
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model EmailVerificationRequest
 * 
 */
export type EmailVerificationRequest = $Result.DefaultSelection<Prisma.$EmailVerificationRequestPayload>
/**
 * Model PasswordResetSession
 * 
 */
export type PasswordResetSession = $Result.DefaultSelection<Prisma.$PasswordResetSessionPayload>
/**
 * Model Consumer
 * 
 */
export type Consumer = $Result.DefaultSelection<Prisma.$ConsumerPayload>
/**
 * Model MerchantUser
 * 
 */
export type MerchantUser = $Result.DefaultSelection<Prisma.$MerchantUserPayload>
/**
 * Model AdminUser
 * 
 */
export type AdminUser = $Result.DefaultSelection<Prisma.$AdminUserPayload>
/**
 * Model BrandUser
 * 
 */
export type BrandUser = $Result.DefaultSelection<Prisma.$BrandUserPayload>
/**
 * Model Currency
 * 
 */
export type Currency = $Result.DefaultSelection<Prisma.$CurrencyPayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model State
 * 
 */
export type State = $Result.DefaultSelection<Prisma.$StatePayload>
/**
 * Model Merchant
 * 
 */
export type Merchant = $Result.DefaultSelection<Prisma.$MerchantPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Store
 * 
 */
export type Store = $Result.DefaultSelection<Prisma.$StorePayload>
/**
 * Model Receipt
 * 
 */
export type Receipt = $Result.DefaultSelection<Prisma.$ReceiptPayload>
/**
 * Model ReceiptPayment
 * 
 */
export type ReceiptPayment = $Result.DefaultSelection<Prisma.$ReceiptPaymentPayload>
/**
 * Model ReceiptItem
 * 
 */
export type ReceiptItem = $Result.DefaultSelection<Prisma.$ReceiptItemPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  DISABLED: 'DISABLED',
  REJECTED: 'REJECTED'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  NOTSAY: 'NOTSAY'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Role: {
  CONSUMER: 'CONSUMER',
  MERCHANT: 'MERCHANT',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const AdminRole: {
  ADMIN: 'ADMIN',
  SALES: 'SALES',
  TECHNICAL: 'TECHNICAL',
  ACCOUNTS: 'ACCOUNTS'
};

export type AdminRole = (typeof AdminRole)[keyof typeof AdminRole]


export const MerchantRole: {
  ADMIN: 'ADMIN',
  TECHNICAL: 'TECHNICAL',
  ACCOUNTS: 'ACCOUNTS'
};

export type MerchantRole = (typeof MerchantRole)[keyof typeof MerchantRole]


export const BrandRole: {
  ADMIN: 'ADMIN',
  TECHNICAL: 'TECHNICAL',
  ACCOUNTS: 'ACCOUNTS'
};

export type BrandRole = (typeof BrandRole)[keyof typeof BrandRole]


export const PaymentType: {
  CASH: 'CASH',
  EFTPOS: 'EFTPOS',
  CREDIT: 'CREDIT'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type AdminRole = $Enums.AdminRole

export const AdminRole: typeof $Enums.AdminRole

export type MerchantRole = $Enums.MerchantRole

export const MerchantRole: typeof $Enums.MerchantRole

export type BrandRole = $Enums.BrandRole

export const BrandRole: typeof $Enums.BrandRole

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailVerificationRequest`: Exposes CRUD operations for the **EmailVerificationRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailVerificationRequests
    * const emailVerificationRequests = await prisma.emailVerificationRequest.findMany()
    * ```
    */
  get emailVerificationRequest(): Prisma.EmailVerificationRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetSession`: Exposes CRUD operations for the **PasswordResetSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetSessions
    * const passwordResetSessions = await prisma.passwordResetSession.findMany()
    * ```
    */
  get passwordResetSession(): Prisma.PasswordResetSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consumer`: Exposes CRUD operations for the **Consumer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consumers
    * const consumers = await prisma.consumer.findMany()
    * ```
    */
  get consumer(): Prisma.ConsumerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.merchantUser`: Exposes CRUD operations for the **MerchantUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MerchantUsers
    * const merchantUsers = await prisma.merchantUser.findMany()
    * ```
    */
  get merchantUser(): Prisma.MerchantUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminUser`: Exposes CRUD operations for the **AdminUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminUsers
    * const adminUsers = await prisma.adminUser.findMany()
    * ```
    */
  get adminUser(): Prisma.AdminUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brandUser`: Exposes CRUD operations for the **BrandUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BrandUsers
    * const brandUsers = await prisma.brandUser.findMany()
    * ```
    */
  get brandUser(): Prisma.BrandUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.currency`: Exposes CRUD operations for the **Currency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Currencies
    * const currencies = await prisma.currency.findMany()
    * ```
    */
  get currency(): Prisma.CurrencyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.state`: Exposes CRUD operations for the **State** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more States
    * const states = await prisma.state.findMany()
    * ```
    */
  get state(): Prisma.StateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.merchant`: Exposes CRUD operations for the **Merchant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Merchants
    * const merchants = await prisma.merchant.findMany()
    * ```
    */
  get merchant(): Prisma.MerchantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.store`: Exposes CRUD operations for the **Store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): Prisma.StoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receipt`: Exposes CRUD operations for the **Receipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receipts
    * const receipts = await prisma.receipt.findMany()
    * ```
    */
  get receipt(): Prisma.ReceiptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receiptPayment`: Exposes CRUD operations for the **ReceiptPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptPayments
    * const receiptPayments = await prisma.receiptPayment.findMany()
    * ```
    */
  get receiptPayment(): Prisma.ReceiptPaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receiptItem`: Exposes CRUD operations for the **ReceiptItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptItems
    * const receiptItems = await prisma.receiptItem.findMany()
    * ```
    */
  get receiptItem(): Prisma.ReceiptItemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    EmailVerificationRequest: 'EmailVerificationRequest',
    PasswordResetSession: 'PasswordResetSession',
    Consumer: 'Consumer',
    MerchantUser: 'MerchantUser',
    AdminUser: 'AdminUser',
    BrandUser: 'BrandUser',
    Currency: 'Currency',
    Country: 'Country',
    State: 'State',
    Merchant: 'Merchant',
    Brand: 'Brand',
    Store: 'Store',
    Receipt: 'Receipt',
    ReceiptPayment: 'ReceiptPayment',
    ReceiptItem: 'ReceiptItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "emailVerificationRequest" | "passwordResetSession" | "consumer" | "merchantUser" | "adminUser" | "brandUser" | "currency" | "country" | "state" | "merchant" | "brand" | "store" | "receipt" | "receiptPayment" | "receiptItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      EmailVerificationRequest: {
        payload: Prisma.$EmailVerificationRequestPayload<ExtArgs>
        fields: Prisma.EmailVerificationRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailVerificationRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailVerificationRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>
          }
          findFirst: {
            args: Prisma.EmailVerificationRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailVerificationRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>
          }
          findMany: {
            args: Prisma.EmailVerificationRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>[]
          }
          create: {
            args: Prisma.EmailVerificationRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>
          }
          createMany: {
            args: Prisma.EmailVerificationRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailVerificationRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>[]
          }
          delete: {
            args: Prisma.EmailVerificationRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>
          }
          update: {
            args: Prisma.EmailVerificationRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>
          }
          deleteMany: {
            args: Prisma.EmailVerificationRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailVerificationRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailVerificationRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>[]
          }
          upsert: {
            args: Prisma.EmailVerificationRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationRequestPayload>
          }
          aggregate: {
            args: Prisma.EmailVerificationRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailVerificationRequest>
          }
          groupBy: {
            args: Prisma.EmailVerificationRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailVerificationRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailVerificationRequestCountArgs<ExtArgs>
            result: $Utils.Optional<EmailVerificationRequestCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetSession: {
        payload: Prisma.$PasswordResetSessionPayload<ExtArgs>
        fields: Prisma.PasswordResetSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>
          }
          findMany: {
            args: Prisma.PasswordResetSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>[]
          }
          create: {
            args: Prisma.PasswordResetSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>
          }
          createMany: {
            args: Prisma.PasswordResetSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>
          }
          update: {
            args: Prisma.PasswordResetSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetSessionPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetSession>
          }
          groupBy: {
            args: Prisma.PasswordResetSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetSessionCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetSessionCountAggregateOutputType> | number
          }
        }
      }
      Consumer: {
        payload: Prisma.$ConsumerPayload<ExtArgs>
        fields: Prisma.ConsumerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsumerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsumerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          findFirst: {
            args: Prisma.ConsumerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsumerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          findMany: {
            args: Prisma.ConsumerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>[]
          }
          create: {
            args: Prisma.ConsumerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          createMany: {
            args: Prisma.ConsumerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsumerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>[]
          }
          delete: {
            args: Prisma.ConsumerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          update: {
            args: Prisma.ConsumerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          deleteMany: {
            args: Prisma.ConsumerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsumerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsumerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>[]
          }
          upsert: {
            args: Prisma.ConsumerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          aggregate: {
            args: Prisma.ConsumerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsumer>
          }
          groupBy: {
            args: Prisma.ConsumerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsumerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsumerCountArgs<ExtArgs>
            result: $Utils.Optional<ConsumerCountAggregateOutputType> | number
          }
        }
      }
      MerchantUser: {
        payload: Prisma.$MerchantUserPayload<ExtArgs>
        fields: Prisma.MerchantUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MerchantUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MerchantUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>
          }
          findFirst: {
            args: Prisma.MerchantUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MerchantUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>
          }
          findMany: {
            args: Prisma.MerchantUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>[]
          }
          create: {
            args: Prisma.MerchantUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>
          }
          createMany: {
            args: Prisma.MerchantUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MerchantUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>[]
          }
          delete: {
            args: Prisma.MerchantUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>
          }
          update: {
            args: Prisma.MerchantUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>
          }
          deleteMany: {
            args: Prisma.MerchantUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MerchantUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MerchantUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>[]
          }
          upsert: {
            args: Prisma.MerchantUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantUserPayload>
          }
          aggregate: {
            args: Prisma.MerchantUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMerchantUser>
          }
          groupBy: {
            args: Prisma.MerchantUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<MerchantUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.MerchantUserCountArgs<ExtArgs>
            result: $Utils.Optional<MerchantUserCountAggregateOutputType> | number
          }
        }
      }
      AdminUser: {
        payload: Prisma.$AdminUserPayload<ExtArgs>
        fields: Prisma.AdminUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          findFirst: {
            args: Prisma.AdminUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          findMany: {
            args: Prisma.AdminUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          create: {
            args: Prisma.AdminUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          createMany: {
            args: Prisma.AdminUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          delete: {
            args: Prisma.AdminUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          update: {
            args: Prisma.AdminUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          deleteMany: {
            args: Prisma.AdminUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          upsert: {
            args: Prisma.AdminUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          aggregate: {
            args: Prisma.AdminUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminUser>
          }
          groupBy: {
            args: Prisma.AdminUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminUserCountArgs<ExtArgs>
            result: $Utils.Optional<AdminUserCountAggregateOutputType> | number
          }
        }
      }
      BrandUser: {
        payload: Prisma.$BrandUserPayload<ExtArgs>
        fields: Prisma.BrandUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>
          }
          findFirst: {
            args: Prisma.BrandUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>
          }
          findMany: {
            args: Prisma.BrandUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>[]
          }
          create: {
            args: Prisma.BrandUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>
          }
          createMany: {
            args: Prisma.BrandUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>[]
          }
          delete: {
            args: Prisma.BrandUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>
          }
          update: {
            args: Prisma.BrandUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>
          }
          deleteMany: {
            args: Prisma.BrandUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>[]
          }
          upsert: {
            args: Prisma.BrandUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandUserPayload>
          }
          aggregate: {
            args: Prisma.BrandUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrandUser>
          }
          groupBy: {
            args: Prisma.BrandUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandUserCountArgs<ExtArgs>
            result: $Utils.Optional<BrandUserCountAggregateOutputType> | number
          }
        }
      }
      Currency: {
        payload: Prisma.$CurrencyPayload<ExtArgs>
        fields: Prisma.CurrencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurrencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurrencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findFirst: {
            args: Prisma.CurrencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurrencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findMany: {
            args: Prisma.CurrencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          create: {
            args: Prisma.CurrencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          createMany: {
            args: Prisma.CurrencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CurrencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          delete: {
            args: Prisma.CurrencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          update: {
            args: Prisma.CurrencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          deleteMany: {
            args: Prisma.CurrencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CurrencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CurrencyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          upsert: {
            args: Prisma.CurrencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          aggregate: {
            args: Prisma.CurrencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCurrency>
          }
          groupBy: {
            args: Prisma.CurrencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CurrencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurrencyCountArgs<ExtArgs>
            result: $Utils.Optional<CurrencyCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CountryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CountryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      State: {
        payload: Prisma.$StatePayload<ExtArgs>
        fields: Prisma.StateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          findFirst: {
            args: Prisma.StateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          findMany: {
            args: Prisma.StateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>[]
          }
          create: {
            args: Prisma.StateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          createMany: {
            args: Prisma.StateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>[]
          }
          delete: {
            args: Prisma.StateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          update: {
            args: Prisma.StateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          deleteMany: {
            args: Prisma.StateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>[]
          }
          upsert: {
            args: Prisma.StateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          aggregate: {
            args: Prisma.StateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateState>
          }
          groupBy: {
            args: Prisma.StateGroupByArgs<ExtArgs>
            result: $Utils.Optional<StateGroupByOutputType>[]
          }
          count: {
            args: Prisma.StateCountArgs<ExtArgs>
            result: $Utils.Optional<StateCountAggregateOutputType> | number
          }
        }
      }
      Merchant: {
        payload: Prisma.$MerchantPayload<ExtArgs>
        fields: Prisma.MerchantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MerchantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MerchantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          findFirst: {
            args: Prisma.MerchantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MerchantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          findMany: {
            args: Prisma.MerchantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          create: {
            args: Prisma.MerchantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          createMany: {
            args: Prisma.MerchantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MerchantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          delete: {
            args: Prisma.MerchantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          update: {
            args: Prisma.MerchantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          deleteMany: {
            args: Prisma.MerchantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MerchantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MerchantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          upsert: {
            args: Prisma.MerchantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          aggregate: {
            args: Prisma.MerchantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMerchant>
          }
          groupBy: {
            args: Prisma.MerchantGroupByArgs<ExtArgs>
            result: $Utils.Optional<MerchantGroupByOutputType>[]
          }
          count: {
            args: Prisma.MerchantCountArgs<ExtArgs>
            result: $Utils.Optional<MerchantCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Store: {
        payload: Prisma.$StorePayload<ExtArgs>
        fields: Prisma.StoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findFirst: {
            args: Prisma.StoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findMany: {
            args: Prisma.StoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          create: {
            args: Prisma.StoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          createMany: {
            args: Prisma.StoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          delete: {
            args: Prisma.StoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          update: {
            args: Prisma.StoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          deleteMany: {
            args: Prisma.StoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          upsert: {
            args: Prisma.StoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          aggregate: {
            args: Prisma.StoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStore>
          }
          groupBy: {
            args: Prisma.StoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoreCountArgs<ExtArgs>
            result: $Utils.Optional<StoreCountAggregateOutputType> | number
          }
        }
      }
      Receipt: {
        payload: Prisma.$ReceiptPayload<ExtArgs>
        fields: Prisma.ReceiptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          findFirst: {
            args: Prisma.ReceiptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          findMany: {
            args: Prisma.ReceiptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>[]
          }
          create: {
            args: Prisma.ReceiptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          createMany: {
            args: Prisma.ReceiptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>[]
          }
          delete: {
            args: Prisma.ReceiptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          update: {
            args: Prisma.ReceiptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceiptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>[]
          }
          upsert: {
            args: Prisma.ReceiptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          aggregate: {
            args: Prisma.ReceiptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceipt>
          }
          groupBy: {
            args: Prisma.ReceiptGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptCountAggregateOutputType> | number
          }
        }
      }
      ReceiptPayment: {
        payload: Prisma.$ReceiptPaymentPayload<ExtArgs>
        fields: Prisma.ReceiptPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          findFirst: {
            args: Prisma.ReceiptPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          findMany: {
            args: Prisma.ReceiptPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>[]
          }
          create: {
            args: Prisma.ReceiptPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          createMany: {
            args: Prisma.ReceiptPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>[]
          }
          delete: {
            args: Prisma.ReceiptPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          update: {
            args: Prisma.ReceiptPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceiptPaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>[]
          }
          upsert: {
            args: Prisma.ReceiptPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          aggregate: {
            args: Prisma.ReceiptPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptPayment>
          }
          groupBy: {
            args: Prisma.ReceiptPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptPaymentCountAggregateOutputType> | number
          }
        }
      }
      ReceiptItem: {
        payload: Prisma.$ReceiptItemPayload<ExtArgs>
        fields: Prisma.ReceiptItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          findFirst: {
            args: Prisma.ReceiptItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          findMany: {
            args: Prisma.ReceiptItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>[]
          }
          create: {
            args: Prisma.ReceiptItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          createMany: {
            args: Prisma.ReceiptItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>[]
          }
          delete: {
            args: Prisma.ReceiptItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          update: {
            args: Prisma.ReceiptItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceiptItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>[]
          }
          upsert: {
            args: Prisma.ReceiptItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          aggregate: {
            args: Prisma.ReceiptItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptItem>
          }
          groupBy: {
            args: Prisma.ReceiptItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptItemCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    emailVerificationRequest?: EmailVerificationRequestOmit
    passwordResetSession?: PasswordResetSessionOmit
    consumer?: ConsumerOmit
    merchantUser?: MerchantUserOmit
    adminUser?: AdminUserOmit
    brandUser?: BrandUserOmit
    currency?: CurrencyOmit
    country?: CountryOmit
    state?: StateOmit
    merchant?: MerchantOmit
    brand?: BrandOmit
    store?: StoreOmit
    receipt?: ReceiptOmit
    receiptPayment?: ReceiptPaymentOmit
    receiptItem?: ReceiptItemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    session: number
    emailVerificationRequest: number
    passwordResetSession: number
    primaryContactBrand: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | UserCountOutputTypeCountSessionArgs
    emailVerificationRequest?: boolean | UserCountOutputTypeCountEmailVerificationRequestArgs
    passwordResetSession?: boolean | UserCountOutputTypeCountPasswordResetSessionArgs
    primaryContactBrand?: boolean | UserCountOutputTypeCountPrimaryContactBrandArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmailVerificationRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailVerificationRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordResetSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPrimaryContactBrandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }


  /**
   * Count Type ConsumerCountOutputType
   */

  export type ConsumerCountOutputType = {
    Receipts: number
  }

  export type ConsumerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Receipts?: boolean | ConsumerCountOutputTypeCountReceiptsArgs
  }

  // Custom InputTypes
  /**
   * ConsumerCountOutputType without action
   */
  export type ConsumerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumerCountOutputType
     */
    select?: ConsumerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsumerCountOutputType without action
   */
  export type ConsumerCountOutputTypeCountReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
  }


  /**
   * Count Type MerchantUserCountOutputType
   */

  export type MerchantUserCountOutputType = {
    brandUsers: number
  }

  export type MerchantUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brandUsers?: boolean | MerchantUserCountOutputTypeCountBrandUsersArgs
  }

  // Custom InputTypes
  /**
   * MerchantUserCountOutputType without action
   */
  export type MerchantUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUserCountOutputType
     */
    select?: MerchantUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MerchantUserCountOutputType without action
   */
  export type MerchantUserCountOutputTypeCountBrandUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandUserWhereInput
  }


  /**
   * Count Type CurrencyCountOutputType
   */

  export type CurrencyCountOutputType = {
    Store: number
  }

  export type CurrencyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Store?: boolean | CurrencyCountOutputTypeCountStoreArgs
  }

  // Custom InputTypes
  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyCountOutputType
     */
    select?: CurrencyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountStoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
  }


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    states: number
    Merchants: number
    store: number
    brand: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    states?: boolean | CountryCountOutputTypeCountStatesArgs
    Merchants?: boolean | CountryCountOutputTypeCountMerchantsArgs
    store?: boolean | CountryCountOutputTypeCountStoreArgs
    brand?: boolean | CountryCountOutputTypeCountBrandArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountStatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StateWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountMerchantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountStoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountBrandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }


  /**
   * Count Type StateCountOutputType
   */

  export type StateCountOutputType = {
    merchants: number
    brands: number
    users: number
  }

  export type StateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchants?: boolean | StateCountOutputTypeCountMerchantsArgs
    brands?: boolean | StateCountOutputTypeCountBrandsArgs
    users?: boolean | StateCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateCountOutputType
     */
    select?: StateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountMerchantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type MerchantCountOutputType
   */

  export type MerchantCountOutputType = {
    brands: number
    merchantUser: number
  }

  export type MerchantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brands?: boolean | MerchantCountOutputTypeCountBrandsArgs
    merchantUser?: boolean | MerchantCountOutputTypeCountMerchantUserArgs
  }

  // Custom InputTypes
  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantCountOutputType
     */
    select?: MerchantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountMerchantUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantUserWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    stores: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stores?: boolean | BrandCountOutputTypeCountStoresArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountStoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
  }


  /**
   * Count Type StoreCountOutputType
   */

  export type StoreCountOutputType = {
    receipts: number
  }

  export type StoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipts?: boolean | StoreCountOutputTypeCountReceiptsArgs
  }

  // Custom InputTypes
  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreCountOutputType
     */
    select?: StoreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
  }


  /**
   * Count Type ReceiptCountOutputType
   */

  export type ReceiptCountOutputType = {
    receiptItems: number
    receiptPayments: number
  }

  export type ReceiptCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receiptItems?: boolean | ReceiptCountOutputTypeCountReceiptItemsArgs
    receiptPayments?: boolean | ReceiptCountOutputTypeCountReceiptPaymentsArgs
  }

  // Custom InputTypes
  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptCountOutputType
     */
    select?: ReceiptCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeCountReceiptItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptItemWhereInput
  }

  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeCountReceiptPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptPaymentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    emailVerified: boolean | null
    emailVerifiedTime: Date | null
    passwordVerified: boolean | null
    postcode: string | null
    city: string | null
    stateId: string | null
    phoneNumber: string | null
    password: string | null
    image: string | null
    totpKey: Uint8Array | null
    createdAt: Date | null
    updatedAt: Date | null
    status: $Enums.Status | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    emailVerified: boolean | null
    emailVerifiedTime: Date | null
    passwordVerified: boolean | null
    postcode: string | null
    city: string | null
    stateId: string | null
    phoneNumber: string | null
    password: string | null
    image: string | null
    totpKey: Uint8Array | null
    createdAt: Date | null
    updatedAt: Date | null
    status: $Enums.Status | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    emailVerified: number
    emailVerifiedTime: number
    passwordVerified: number
    postcode: number
    city: number
    stateId: number
    phoneNumber: number
    password: number
    image: number
    role: number
    totpKey: number
    recoveryCodes: number
    createdAt: number
    updatedAt: number
    status: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    emailVerified?: true
    emailVerifiedTime?: true
    passwordVerified?: true
    postcode?: true
    city?: true
    stateId?: true
    phoneNumber?: true
    password?: true
    image?: true
    totpKey?: true
    createdAt?: true
    updatedAt?: true
    status?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    emailVerified?: true
    emailVerifiedTime?: true
    passwordVerified?: true
    postcode?: true
    city?: true
    stateId?: true
    phoneNumber?: true
    password?: true
    image?: true
    totpKey?: true
    createdAt?: true
    updatedAt?: true
    status?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    emailVerified?: true
    emailVerifiedTime?: true
    passwordVerified?: true
    postcode?: true
    city?: true
    stateId?: true
    phoneNumber?: true
    password?: true
    image?: true
    role?: true
    totpKey?: true
    recoveryCodes?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    emailVerified: boolean
    emailVerifiedTime: Date | null
    passwordVerified: boolean
    postcode: string | null
    city: string | null
    stateId: string | null
    phoneNumber: string | null
    password: string
    image: string | null
    role: $Enums.Role[]
    totpKey: Uint8Array | null
    recoveryCodes: string[]
    createdAt: Date
    updatedAt: Date
    status: $Enums.Status
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    emailVerifiedTime?: boolean
    passwordVerified?: boolean
    postcode?: boolean
    city?: boolean
    stateId?: boolean
    phoneNumber?: boolean
    password?: boolean
    image?: boolean
    role?: boolean
    totpKey?: boolean
    recoveryCodes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    state?: boolean | User$stateArgs<ExtArgs>
    consumerUser?: boolean | User$consumerUserArgs<ExtArgs>
    merchantUser?: boolean | User$merchantUserArgs<ExtArgs>
    adminUser?: boolean | User$adminUserArgs<ExtArgs>
    session?: boolean | User$sessionArgs<ExtArgs>
    emailVerificationRequest?: boolean | User$emailVerificationRequestArgs<ExtArgs>
    passwordResetSession?: boolean | User$passwordResetSessionArgs<ExtArgs>
    primaryContactMerchant?: boolean | User$primaryContactMerchantArgs<ExtArgs>
    primaryContactBrand?: boolean | User$primaryContactBrandArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    emailVerifiedTime?: boolean
    passwordVerified?: boolean
    postcode?: boolean
    city?: boolean
    stateId?: boolean
    phoneNumber?: boolean
    password?: boolean
    image?: boolean
    role?: boolean
    totpKey?: boolean
    recoveryCodes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    state?: boolean | User$stateArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    emailVerifiedTime?: boolean
    passwordVerified?: boolean
    postcode?: boolean
    city?: boolean
    stateId?: boolean
    phoneNumber?: boolean
    password?: boolean
    image?: boolean
    role?: boolean
    totpKey?: boolean
    recoveryCodes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    state?: boolean | User$stateArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    emailVerifiedTime?: boolean
    passwordVerified?: boolean
    postcode?: boolean
    city?: boolean
    stateId?: boolean
    phoneNumber?: boolean
    password?: boolean
    image?: boolean
    role?: boolean
    totpKey?: boolean
    recoveryCodes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "emailVerified" | "emailVerifiedTime" | "passwordVerified" | "postcode" | "city" | "stateId" | "phoneNumber" | "password" | "image" | "role" | "totpKey" | "recoveryCodes" | "createdAt" | "updatedAt" | "status", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | User$stateArgs<ExtArgs>
    consumerUser?: boolean | User$consumerUserArgs<ExtArgs>
    merchantUser?: boolean | User$merchantUserArgs<ExtArgs>
    adminUser?: boolean | User$adminUserArgs<ExtArgs>
    session?: boolean | User$sessionArgs<ExtArgs>
    emailVerificationRequest?: boolean | User$emailVerificationRequestArgs<ExtArgs>
    passwordResetSession?: boolean | User$passwordResetSessionArgs<ExtArgs>
    primaryContactMerchant?: boolean | User$primaryContactMerchantArgs<ExtArgs>
    primaryContactBrand?: boolean | User$primaryContactBrandArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | User$stateArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | User$stateArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      state: Prisma.$StatePayload<ExtArgs> | null
      consumerUser: Prisma.$ConsumerPayload<ExtArgs> | null
      merchantUser: Prisma.$MerchantUserPayload<ExtArgs> | null
      adminUser: Prisma.$AdminUserPayload<ExtArgs> | null
      session: Prisma.$SessionPayload<ExtArgs>[]
      emailVerificationRequest: Prisma.$EmailVerificationRequestPayload<ExtArgs>[]
      passwordResetSession: Prisma.$PasswordResetSessionPayload<ExtArgs>[]
      primaryContactMerchant: Prisma.$MerchantPayload<ExtArgs> | null
      primaryContactBrand: Prisma.$BrandPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      emailVerified: boolean
      emailVerifiedTime: Date | null
      passwordVerified: boolean
      postcode: string | null
      city: string | null
      stateId: string | null
      phoneNumber: string | null
      password: string
      image: string | null
      role: $Enums.Role[]
      totpKey: Uint8Array | null
      recoveryCodes: string[]
      createdAt: Date
      updatedAt: Date
      status: $Enums.Status
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    state<T extends User$stateArgs<ExtArgs> = {}>(args?: Subset<T, User$stateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    consumerUser<T extends User$consumerUserArgs<ExtArgs> = {}>(args?: Subset<T, User$consumerUserArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    merchantUser<T extends User$merchantUserArgs<ExtArgs> = {}>(args?: Subset<T, User$merchantUserArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    adminUser<T extends User$adminUserArgs<ExtArgs> = {}>(args?: Subset<T, User$adminUserArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    session<T extends User$sessionArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailVerificationRequest<T extends User$emailVerificationRequestArgs<ExtArgs> = {}>(args?: Subset<T, User$emailVerificationRequestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    passwordResetSession<T extends User$passwordResetSessionArgs<ExtArgs> = {}>(args?: Subset<T, User$passwordResetSessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    primaryContactMerchant<T extends User$primaryContactMerchantArgs<ExtArgs> = {}>(args?: Subset<T, User$primaryContactMerchantArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    primaryContactBrand<T extends User$primaryContactBrandArgs<ExtArgs> = {}>(args?: Subset<T, User$primaryContactBrandArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerifiedTime: FieldRef<"User", 'DateTime'>
    readonly passwordVerified: FieldRef<"User", 'Boolean'>
    readonly postcode: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly stateId: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role[]'>
    readonly totpKey: FieldRef<"User", 'Bytes'>
    readonly recoveryCodes: FieldRef<"User", 'String[]'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly status: FieldRef<"User", 'Status'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.state
   */
  export type User$stateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    where?: StateWhereInput
  }

  /**
   * User.consumerUser
   */
  export type User$consumerUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    where?: ConsumerWhereInput
  }

  /**
   * User.merchantUser
   */
  export type User$merchantUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    where?: MerchantUserWhereInput
  }

  /**
   * User.adminUser
   */
  export type User$adminUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    where?: AdminUserWhereInput
  }

  /**
   * User.session
   */
  export type User$sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.emailVerificationRequest
   */
  export type User$emailVerificationRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    where?: EmailVerificationRequestWhereInput
    orderBy?: EmailVerificationRequestOrderByWithRelationInput | EmailVerificationRequestOrderByWithRelationInput[]
    cursor?: EmailVerificationRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailVerificationRequestScalarFieldEnum | EmailVerificationRequestScalarFieldEnum[]
  }

  /**
   * User.passwordResetSession
   */
  export type User$passwordResetSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    where?: PasswordResetSessionWhereInput
    orderBy?: PasswordResetSessionOrderByWithRelationInput | PasswordResetSessionOrderByWithRelationInput[]
    cursor?: PasswordResetSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetSessionScalarFieldEnum | PasswordResetSessionScalarFieldEnum[]
  }

  /**
   * User.primaryContactMerchant
   */
  export type User$primaryContactMerchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
  }

  /**
   * User.primaryContactBrand
   */
  export type User$primaryContactBrandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    expiresAt: number | null
  }

  export type SessionSumAggregateOutputType = {
    expiresAt: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    twoFactorVerified: boolean | null
    userId: string | null
    rememberMe: boolean | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    twoFactorVerified: boolean | null
    userId: string | null
    rememberMe: boolean | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    twoFactorVerified: number
    userId: number
    rememberMe: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    expiresAt?: true
  }

  export type SessionSumAggregateInputType = {
    expiresAt?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    twoFactorVerified?: true
    userId?: true
    rememberMe?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    twoFactorVerified?: true
    userId?: true
    rememberMe?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    twoFactorVerified?: true
    userId?: true
    rememberMe?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: number
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    twoFactorVerified: boolean
    userId: string
    rememberMe: boolean
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    twoFactorVerified?: boolean
    userId?: boolean
    rememberMe?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    twoFactorVerified?: boolean
    userId?: boolean
    rememberMe?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    twoFactorVerified?: boolean
    userId?: boolean
    rememberMe?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    twoFactorVerified?: boolean
    userId?: boolean
    rememberMe?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "twoFactorVerified" | "userId" | "rememberMe", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: number
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      twoFactorVerified: boolean
      userId: string
      rememberMe: boolean
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'Int'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly twoFactorVerified: FieldRef<"Session", 'Boolean'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly rememberMe: FieldRef<"Session", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model EmailVerificationRequest
   */

  export type AggregateEmailVerificationRequest = {
    _count: EmailVerificationRequestCountAggregateOutputType | null
    _avg: EmailVerificationRequestAvgAggregateOutputType | null
    _sum: EmailVerificationRequestSumAggregateOutputType | null
    _min: EmailVerificationRequestMinAggregateOutputType | null
    _max: EmailVerificationRequestMaxAggregateOutputType | null
  }

  export type EmailVerificationRequestAvgAggregateOutputType = {
    expiresAt: number | null
  }

  export type EmailVerificationRequestSumAggregateOutputType = {
    expiresAt: number | null
  }

  export type EmailVerificationRequestMinAggregateOutputType = {
    id: string | null
    userId: string | null
    email: string | null
    expiresAt: number | null
    code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailVerificationRequestMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    email: string | null
    expiresAt: number | null
    code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailVerificationRequestCountAggregateOutputType = {
    id: number
    userId: number
    email: number
    expiresAt: number
    code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailVerificationRequestAvgAggregateInputType = {
    expiresAt?: true
  }

  export type EmailVerificationRequestSumAggregateInputType = {
    expiresAt?: true
  }

  export type EmailVerificationRequestMinAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    expiresAt?: true
    code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailVerificationRequestMaxAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    expiresAt?: true
    code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailVerificationRequestCountAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    expiresAt?: true
    code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailVerificationRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerificationRequest to aggregate.
     */
    where?: EmailVerificationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationRequests to fetch.
     */
    orderBy?: EmailVerificationRequestOrderByWithRelationInput | EmailVerificationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailVerificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailVerificationRequests
    **/
    _count?: true | EmailVerificationRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailVerificationRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailVerificationRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailVerificationRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailVerificationRequestMaxAggregateInputType
  }

  export type GetEmailVerificationRequestAggregateType<T extends EmailVerificationRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailVerificationRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailVerificationRequest[P]>
      : GetScalarType<T[P], AggregateEmailVerificationRequest[P]>
  }




  export type EmailVerificationRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailVerificationRequestWhereInput
    orderBy?: EmailVerificationRequestOrderByWithAggregationInput | EmailVerificationRequestOrderByWithAggregationInput[]
    by: EmailVerificationRequestScalarFieldEnum[] | EmailVerificationRequestScalarFieldEnum
    having?: EmailVerificationRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailVerificationRequestCountAggregateInputType | true
    _avg?: EmailVerificationRequestAvgAggregateInputType
    _sum?: EmailVerificationRequestSumAggregateInputType
    _min?: EmailVerificationRequestMinAggregateInputType
    _max?: EmailVerificationRequestMaxAggregateInputType
  }

  export type EmailVerificationRequestGroupByOutputType = {
    id: string
    userId: string
    email: string
    expiresAt: number
    code: string
    createdAt: Date
    updatedAt: Date
    _count: EmailVerificationRequestCountAggregateOutputType | null
    _avg: EmailVerificationRequestAvgAggregateOutputType | null
    _sum: EmailVerificationRequestSumAggregateOutputType | null
    _min: EmailVerificationRequestMinAggregateOutputType | null
    _max: EmailVerificationRequestMaxAggregateOutputType | null
  }

  type GetEmailVerificationRequestGroupByPayload<T extends EmailVerificationRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailVerificationRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailVerificationRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailVerificationRequestGroupByOutputType[P]>
            : GetScalarType<T[P], EmailVerificationRequestGroupByOutputType[P]>
        }
      >
    >


  export type EmailVerificationRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    expiresAt?: boolean
    code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerificationRequest"]>

  export type EmailVerificationRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    expiresAt?: boolean
    code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerificationRequest"]>

  export type EmailVerificationRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    expiresAt?: boolean
    code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerificationRequest"]>

  export type EmailVerificationRequestSelectScalar = {
    id?: boolean
    userId?: boolean
    email?: boolean
    expiresAt?: boolean
    code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailVerificationRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "email" | "expiresAt" | "code" | "createdAt" | "updatedAt", ExtArgs["result"]["emailVerificationRequest"]>
  export type EmailVerificationRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmailVerificationRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmailVerificationRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmailVerificationRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailVerificationRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      email: string
      expiresAt: number
      code: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailVerificationRequest"]>
    composites: {}
  }

  type EmailVerificationRequestGetPayload<S extends boolean | null | undefined | EmailVerificationRequestDefaultArgs> = $Result.GetResult<Prisma.$EmailVerificationRequestPayload, S>

  type EmailVerificationRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailVerificationRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailVerificationRequestCountAggregateInputType | true
    }

  export interface EmailVerificationRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailVerificationRequest'], meta: { name: 'EmailVerificationRequest' } }
    /**
     * Find zero or one EmailVerificationRequest that matches the filter.
     * @param {EmailVerificationRequestFindUniqueArgs} args - Arguments to find a EmailVerificationRequest
     * @example
     * // Get one EmailVerificationRequest
     * const emailVerificationRequest = await prisma.emailVerificationRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailVerificationRequestFindUniqueArgs>(args: SelectSubset<T, EmailVerificationRequestFindUniqueArgs<ExtArgs>>): Prisma__EmailVerificationRequestClient<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailVerificationRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailVerificationRequestFindUniqueOrThrowArgs} args - Arguments to find a EmailVerificationRequest
     * @example
     * // Get one EmailVerificationRequest
     * const emailVerificationRequest = await prisma.emailVerificationRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailVerificationRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailVerificationRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailVerificationRequestClient<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailVerificationRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationRequestFindFirstArgs} args - Arguments to find a EmailVerificationRequest
     * @example
     * // Get one EmailVerificationRequest
     * const emailVerificationRequest = await prisma.emailVerificationRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailVerificationRequestFindFirstArgs>(args?: SelectSubset<T, EmailVerificationRequestFindFirstArgs<ExtArgs>>): Prisma__EmailVerificationRequestClient<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailVerificationRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationRequestFindFirstOrThrowArgs} args - Arguments to find a EmailVerificationRequest
     * @example
     * // Get one EmailVerificationRequest
     * const emailVerificationRequest = await prisma.emailVerificationRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailVerificationRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailVerificationRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailVerificationRequestClient<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailVerificationRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailVerificationRequests
     * const emailVerificationRequests = await prisma.emailVerificationRequest.findMany()
     * 
     * // Get first 10 EmailVerificationRequests
     * const emailVerificationRequests = await prisma.emailVerificationRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailVerificationRequestWithIdOnly = await prisma.emailVerificationRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailVerificationRequestFindManyArgs>(args?: SelectSubset<T, EmailVerificationRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailVerificationRequest.
     * @param {EmailVerificationRequestCreateArgs} args - Arguments to create a EmailVerificationRequest.
     * @example
     * // Create one EmailVerificationRequest
     * const EmailVerificationRequest = await prisma.emailVerificationRequest.create({
     *   data: {
     *     // ... data to create a EmailVerificationRequest
     *   }
     * })
     * 
     */
    create<T extends EmailVerificationRequestCreateArgs>(args: SelectSubset<T, EmailVerificationRequestCreateArgs<ExtArgs>>): Prisma__EmailVerificationRequestClient<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailVerificationRequests.
     * @param {EmailVerificationRequestCreateManyArgs} args - Arguments to create many EmailVerificationRequests.
     * @example
     * // Create many EmailVerificationRequests
     * const emailVerificationRequest = await prisma.emailVerificationRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailVerificationRequestCreateManyArgs>(args?: SelectSubset<T, EmailVerificationRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailVerificationRequests and returns the data saved in the database.
     * @param {EmailVerificationRequestCreateManyAndReturnArgs} args - Arguments to create many EmailVerificationRequests.
     * @example
     * // Create many EmailVerificationRequests
     * const emailVerificationRequest = await prisma.emailVerificationRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailVerificationRequests and only return the `id`
     * const emailVerificationRequestWithIdOnly = await prisma.emailVerificationRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailVerificationRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailVerificationRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailVerificationRequest.
     * @param {EmailVerificationRequestDeleteArgs} args - Arguments to delete one EmailVerificationRequest.
     * @example
     * // Delete one EmailVerificationRequest
     * const EmailVerificationRequest = await prisma.emailVerificationRequest.delete({
     *   where: {
     *     // ... filter to delete one EmailVerificationRequest
     *   }
     * })
     * 
     */
    delete<T extends EmailVerificationRequestDeleteArgs>(args: SelectSubset<T, EmailVerificationRequestDeleteArgs<ExtArgs>>): Prisma__EmailVerificationRequestClient<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailVerificationRequest.
     * @param {EmailVerificationRequestUpdateArgs} args - Arguments to update one EmailVerificationRequest.
     * @example
     * // Update one EmailVerificationRequest
     * const emailVerificationRequest = await prisma.emailVerificationRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailVerificationRequestUpdateArgs>(args: SelectSubset<T, EmailVerificationRequestUpdateArgs<ExtArgs>>): Prisma__EmailVerificationRequestClient<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailVerificationRequests.
     * @param {EmailVerificationRequestDeleteManyArgs} args - Arguments to filter EmailVerificationRequests to delete.
     * @example
     * // Delete a few EmailVerificationRequests
     * const { count } = await prisma.emailVerificationRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailVerificationRequestDeleteManyArgs>(args?: SelectSubset<T, EmailVerificationRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerificationRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailVerificationRequests
     * const emailVerificationRequest = await prisma.emailVerificationRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailVerificationRequestUpdateManyArgs>(args: SelectSubset<T, EmailVerificationRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerificationRequests and returns the data updated in the database.
     * @param {EmailVerificationRequestUpdateManyAndReturnArgs} args - Arguments to update many EmailVerificationRequests.
     * @example
     * // Update many EmailVerificationRequests
     * const emailVerificationRequest = await prisma.emailVerificationRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailVerificationRequests and only return the `id`
     * const emailVerificationRequestWithIdOnly = await prisma.emailVerificationRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailVerificationRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailVerificationRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailVerificationRequest.
     * @param {EmailVerificationRequestUpsertArgs} args - Arguments to update or create a EmailVerificationRequest.
     * @example
     * // Update or create a EmailVerificationRequest
     * const emailVerificationRequest = await prisma.emailVerificationRequest.upsert({
     *   create: {
     *     // ... data to create a EmailVerificationRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailVerificationRequest we want to update
     *   }
     * })
     */
    upsert<T extends EmailVerificationRequestUpsertArgs>(args: SelectSubset<T, EmailVerificationRequestUpsertArgs<ExtArgs>>): Prisma__EmailVerificationRequestClient<$Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailVerificationRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationRequestCountArgs} args - Arguments to filter EmailVerificationRequests to count.
     * @example
     * // Count the number of EmailVerificationRequests
     * const count = await prisma.emailVerificationRequest.count({
     *   where: {
     *     // ... the filter for the EmailVerificationRequests we want to count
     *   }
     * })
    **/
    count<T extends EmailVerificationRequestCountArgs>(
      args?: Subset<T, EmailVerificationRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailVerificationRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailVerificationRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailVerificationRequestAggregateArgs>(args: Subset<T, EmailVerificationRequestAggregateArgs>): Prisma.PrismaPromise<GetEmailVerificationRequestAggregateType<T>>

    /**
     * Group by EmailVerificationRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailVerificationRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailVerificationRequestGroupByArgs['orderBy'] }
        : { orderBy?: EmailVerificationRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailVerificationRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailVerificationRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailVerificationRequest model
   */
  readonly fields: EmailVerificationRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailVerificationRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailVerificationRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailVerificationRequest model
   */
  interface EmailVerificationRequestFieldRefs {
    readonly id: FieldRef<"EmailVerificationRequest", 'String'>
    readonly userId: FieldRef<"EmailVerificationRequest", 'String'>
    readonly email: FieldRef<"EmailVerificationRequest", 'String'>
    readonly expiresAt: FieldRef<"EmailVerificationRequest", 'Int'>
    readonly code: FieldRef<"EmailVerificationRequest", 'String'>
    readonly createdAt: FieldRef<"EmailVerificationRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailVerificationRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailVerificationRequest findUnique
   */
  export type EmailVerificationRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationRequest to fetch.
     */
    where: EmailVerificationRequestWhereUniqueInput
  }

  /**
   * EmailVerificationRequest findUniqueOrThrow
   */
  export type EmailVerificationRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationRequest to fetch.
     */
    where: EmailVerificationRequestWhereUniqueInput
  }

  /**
   * EmailVerificationRequest findFirst
   */
  export type EmailVerificationRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationRequest to fetch.
     */
    where?: EmailVerificationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationRequests to fetch.
     */
    orderBy?: EmailVerificationRequestOrderByWithRelationInput | EmailVerificationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerificationRequests.
     */
    cursor?: EmailVerificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerificationRequests.
     */
    distinct?: EmailVerificationRequestScalarFieldEnum | EmailVerificationRequestScalarFieldEnum[]
  }

  /**
   * EmailVerificationRequest findFirstOrThrow
   */
  export type EmailVerificationRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationRequest to fetch.
     */
    where?: EmailVerificationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationRequests to fetch.
     */
    orderBy?: EmailVerificationRequestOrderByWithRelationInput | EmailVerificationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerificationRequests.
     */
    cursor?: EmailVerificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerificationRequests.
     */
    distinct?: EmailVerificationRequestScalarFieldEnum | EmailVerificationRequestScalarFieldEnum[]
  }

  /**
   * EmailVerificationRequest findMany
   */
  export type EmailVerificationRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationRequests to fetch.
     */
    where?: EmailVerificationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationRequests to fetch.
     */
    orderBy?: EmailVerificationRequestOrderByWithRelationInput | EmailVerificationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailVerificationRequests.
     */
    cursor?: EmailVerificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationRequests.
     */
    skip?: number
    distinct?: EmailVerificationRequestScalarFieldEnum | EmailVerificationRequestScalarFieldEnum[]
  }

  /**
   * EmailVerificationRequest create
   */
  export type EmailVerificationRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailVerificationRequest.
     */
    data: XOR<EmailVerificationRequestCreateInput, EmailVerificationRequestUncheckedCreateInput>
  }

  /**
   * EmailVerificationRequest createMany
   */
  export type EmailVerificationRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailVerificationRequests.
     */
    data: EmailVerificationRequestCreateManyInput | EmailVerificationRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailVerificationRequest createManyAndReturn
   */
  export type EmailVerificationRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * The data used to create many EmailVerificationRequests.
     */
    data: EmailVerificationRequestCreateManyInput | EmailVerificationRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailVerificationRequest update
   */
  export type EmailVerificationRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailVerificationRequest.
     */
    data: XOR<EmailVerificationRequestUpdateInput, EmailVerificationRequestUncheckedUpdateInput>
    /**
     * Choose, which EmailVerificationRequest to update.
     */
    where: EmailVerificationRequestWhereUniqueInput
  }

  /**
   * EmailVerificationRequest updateMany
   */
  export type EmailVerificationRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailVerificationRequests.
     */
    data: XOR<EmailVerificationRequestUpdateManyMutationInput, EmailVerificationRequestUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerificationRequests to update
     */
    where?: EmailVerificationRequestWhereInput
    /**
     * Limit how many EmailVerificationRequests to update.
     */
    limit?: number
  }

  /**
   * EmailVerificationRequest updateManyAndReturn
   */
  export type EmailVerificationRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * The data used to update EmailVerificationRequests.
     */
    data: XOR<EmailVerificationRequestUpdateManyMutationInput, EmailVerificationRequestUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerificationRequests to update
     */
    where?: EmailVerificationRequestWhereInput
    /**
     * Limit how many EmailVerificationRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailVerificationRequest upsert
   */
  export type EmailVerificationRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailVerificationRequest to update in case it exists.
     */
    where: EmailVerificationRequestWhereUniqueInput
    /**
     * In case the EmailVerificationRequest found by the `where` argument doesn't exist, create a new EmailVerificationRequest with this data.
     */
    create: XOR<EmailVerificationRequestCreateInput, EmailVerificationRequestUncheckedCreateInput>
    /**
     * In case the EmailVerificationRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailVerificationRequestUpdateInput, EmailVerificationRequestUncheckedUpdateInput>
  }

  /**
   * EmailVerificationRequest delete
   */
  export type EmailVerificationRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
    /**
     * Filter which EmailVerificationRequest to delete.
     */
    where: EmailVerificationRequestWhereUniqueInput
  }

  /**
   * EmailVerificationRequest deleteMany
   */
  export type EmailVerificationRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerificationRequests to delete
     */
    where?: EmailVerificationRequestWhereInput
    /**
     * Limit how many EmailVerificationRequests to delete.
     */
    limit?: number
  }

  /**
   * EmailVerificationRequest without action
   */
  export type EmailVerificationRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationRequest
     */
    select?: EmailVerificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationRequest
     */
    omit?: EmailVerificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationRequestInclude<ExtArgs> | null
  }


  /**
   * Model PasswordResetSession
   */

  export type AggregatePasswordResetSession = {
    _count: PasswordResetSessionCountAggregateOutputType | null
    _avg: PasswordResetSessionAvgAggregateOutputType | null
    _sum: PasswordResetSessionSumAggregateOutputType | null
    _min: PasswordResetSessionMinAggregateOutputType | null
    _max: PasswordResetSessionMaxAggregateOutputType | null
  }

  export type PasswordResetSessionAvgAggregateOutputType = {
    expiresAt: number | null
  }

  export type PasswordResetSessionSumAggregateOutputType = {
    expiresAt: number | null
  }

  export type PasswordResetSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    email: string | null
    expiresAt: number | null
    code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PasswordResetSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    email: string | null
    expiresAt: number | null
    code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PasswordResetSessionCountAggregateOutputType = {
    id: number
    userId: number
    email: number
    expiresAt: number
    code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PasswordResetSessionAvgAggregateInputType = {
    expiresAt?: true
  }

  export type PasswordResetSessionSumAggregateInputType = {
    expiresAt?: true
  }

  export type PasswordResetSessionMinAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    expiresAt?: true
    code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PasswordResetSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    expiresAt?: true
    code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PasswordResetSessionCountAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    expiresAt?: true
    code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PasswordResetSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetSession to aggregate.
     */
    where?: PasswordResetSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetSessions to fetch.
     */
    orderBy?: PasswordResetSessionOrderByWithRelationInput | PasswordResetSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetSessions
    **/
    _count?: true | PasswordResetSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PasswordResetSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PasswordResetSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetSessionMaxAggregateInputType
  }

  export type GetPasswordResetSessionAggregateType<T extends PasswordResetSessionAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetSession[P]>
      : GetScalarType<T[P], AggregatePasswordResetSession[P]>
  }




  export type PasswordResetSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetSessionWhereInput
    orderBy?: PasswordResetSessionOrderByWithAggregationInput | PasswordResetSessionOrderByWithAggregationInput[]
    by: PasswordResetSessionScalarFieldEnum[] | PasswordResetSessionScalarFieldEnum
    having?: PasswordResetSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetSessionCountAggregateInputType | true
    _avg?: PasswordResetSessionAvgAggregateInputType
    _sum?: PasswordResetSessionSumAggregateInputType
    _min?: PasswordResetSessionMinAggregateInputType
    _max?: PasswordResetSessionMaxAggregateInputType
  }

  export type PasswordResetSessionGroupByOutputType = {
    id: string
    userId: string
    email: string
    expiresAt: number
    code: string
    createdAt: Date
    updatedAt: Date
    _count: PasswordResetSessionCountAggregateOutputType | null
    _avg: PasswordResetSessionAvgAggregateOutputType | null
    _sum: PasswordResetSessionSumAggregateOutputType | null
    _min: PasswordResetSessionMinAggregateOutputType | null
    _max: PasswordResetSessionMaxAggregateOutputType | null
  }

  type GetPasswordResetSessionGroupByPayload<T extends PasswordResetSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetSessionGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetSessionGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    expiresAt?: boolean
    code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetSession"]>

  export type PasswordResetSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    expiresAt?: boolean
    code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetSession"]>

  export type PasswordResetSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    expiresAt?: boolean
    code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetSession"]>

  export type PasswordResetSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    email?: boolean
    expiresAt?: boolean
    code?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PasswordResetSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "email" | "expiresAt" | "code" | "createdAt" | "updatedAt", ExtArgs["result"]["passwordResetSession"]>
  export type PasswordResetSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PasswordResetSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      email: string
      expiresAt: number
      code: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["passwordResetSession"]>
    composites: {}
  }

  type PasswordResetSessionGetPayload<S extends boolean | null | undefined | PasswordResetSessionDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetSessionPayload, S>

  type PasswordResetSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetSessionCountAggregateInputType | true
    }

  export interface PasswordResetSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetSession'], meta: { name: 'PasswordResetSession' } }
    /**
     * Find zero or one PasswordResetSession that matches the filter.
     * @param {PasswordResetSessionFindUniqueArgs} args - Arguments to find a PasswordResetSession
     * @example
     * // Get one PasswordResetSession
     * const passwordResetSession = await prisma.passwordResetSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetSessionFindUniqueArgs>(args: SelectSubset<T, PasswordResetSessionFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetSessionClient<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetSessionFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetSession
     * @example
     * // Get one PasswordResetSession
     * const passwordResetSession = await prisma.passwordResetSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetSessionClient<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetSessionFindFirstArgs} args - Arguments to find a PasswordResetSession
     * @example
     * // Get one PasswordResetSession
     * const passwordResetSession = await prisma.passwordResetSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetSessionFindFirstArgs>(args?: SelectSubset<T, PasswordResetSessionFindFirstArgs<ExtArgs>>): Prisma__PasswordResetSessionClient<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetSessionFindFirstOrThrowArgs} args - Arguments to find a PasswordResetSession
     * @example
     * // Get one PasswordResetSession
     * const passwordResetSession = await prisma.passwordResetSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetSessionClient<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetSessions
     * const passwordResetSessions = await prisma.passwordResetSession.findMany()
     * 
     * // Get first 10 PasswordResetSessions
     * const passwordResetSessions = await prisma.passwordResetSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetSessionWithIdOnly = await prisma.passwordResetSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetSessionFindManyArgs>(args?: SelectSubset<T, PasswordResetSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetSession.
     * @param {PasswordResetSessionCreateArgs} args - Arguments to create a PasswordResetSession.
     * @example
     * // Create one PasswordResetSession
     * const PasswordResetSession = await prisma.passwordResetSession.create({
     *   data: {
     *     // ... data to create a PasswordResetSession
     *   }
     * })
     * 
     */
    create<T extends PasswordResetSessionCreateArgs>(args: SelectSubset<T, PasswordResetSessionCreateArgs<ExtArgs>>): Prisma__PasswordResetSessionClient<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetSessions.
     * @param {PasswordResetSessionCreateManyArgs} args - Arguments to create many PasswordResetSessions.
     * @example
     * // Create many PasswordResetSessions
     * const passwordResetSession = await prisma.passwordResetSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetSessionCreateManyArgs>(args?: SelectSubset<T, PasswordResetSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetSessions and returns the data saved in the database.
     * @param {PasswordResetSessionCreateManyAndReturnArgs} args - Arguments to create many PasswordResetSessions.
     * @example
     * // Create many PasswordResetSessions
     * const passwordResetSession = await prisma.passwordResetSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetSessions and only return the `id`
     * const passwordResetSessionWithIdOnly = await prisma.passwordResetSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResetSession.
     * @param {PasswordResetSessionDeleteArgs} args - Arguments to delete one PasswordResetSession.
     * @example
     * // Delete one PasswordResetSession
     * const PasswordResetSession = await prisma.passwordResetSession.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetSession
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetSessionDeleteArgs>(args: SelectSubset<T, PasswordResetSessionDeleteArgs<ExtArgs>>): Prisma__PasswordResetSessionClient<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetSession.
     * @param {PasswordResetSessionUpdateArgs} args - Arguments to update one PasswordResetSession.
     * @example
     * // Update one PasswordResetSession
     * const passwordResetSession = await prisma.passwordResetSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetSessionUpdateArgs>(args: SelectSubset<T, PasswordResetSessionUpdateArgs<ExtArgs>>): Prisma__PasswordResetSessionClient<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetSessions.
     * @param {PasswordResetSessionDeleteManyArgs} args - Arguments to filter PasswordResetSessions to delete.
     * @example
     * // Delete a few PasswordResetSessions
     * const { count } = await prisma.passwordResetSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetSessionDeleteManyArgs>(args?: SelectSubset<T, PasswordResetSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetSessions
     * const passwordResetSession = await prisma.passwordResetSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetSessionUpdateManyArgs>(args: SelectSubset<T, PasswordResetSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetSessions and returns the data updated in the database.
     * @param {PasswordResetSessionUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetSessions.
     * @example
     * // Update many PasswordResetSessions
     * const passwordResetSession = await prisma.passwordResetSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetSessions and only return the `id`
     * const passwordResetSessionWithIdOnly = await prisma.passwordResetSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResetSession.
     * @param {PasswordResetSessionUpsertArgs} args - Arguments to update or create a PasswordResetSession.
     * @example
     * // Update or create a PasswordResetSession
     * const passwordResetSession = await prisma.passwordResetSession.upsert({
     *   create: {
     *     // ... data to create a PasswordResetSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetSession we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetSessionUpsertArgs>(args: SelectSubset<T, PasswordResetSessionUpsertArgs<ExtArgs>>): Prisma__PasswordResetSessionClient<$Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetSessionCountArgs} args - Arguments to filter PasswordResetSessions to count.
     * @example
     * // Count the number of PasswordResetSessions
     * const count = await prisma.passwordResetSession.count({
     *   where: {
     *     // ... the filter for the PasswordResetSessions we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetSessionCountArgs>(
      args?: Subset<T, PasswordResetSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetSessionAggregateArgs>(args: Subset<T, PasswordResetSessionAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetSessionAggregateType<T>>

    /**
     * Group by PasswordResetSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetSessionGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetSession model
   */
  readonly fields: PasswordResetSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetSession model
   */
  interface PasswordResetSessionFieldRefs {
    readonly id: FieldRef<"PasswordResetSession", 'String'>
    readonly userId: FieldRef<"PasswordResetSession", 'String'>
    readonly email: FieldRef<"PasswordResetSession", 'String'>
    readonly expiresAt: FieldRef<"PasswordResetSession", 'Int'>
    readonly code: FieldRef<"PasswordResetSession", 'String'>
    readonly createdAt: FieldRef<"PasswordResetSession", 'DateTime'>
    readonly updatedAt: FieldRef<"PasswordResetSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetSession findUnique
   */
  export type PasswordResetSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetSession to fetch.
     */
    where: PasswordResetSessionWhereUniqueInput
  }

  /**
   * PasswordResetSession findUniqueOrThrow
   */
  export type PasswordResetSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetSession to fetch.
     */
    where: PasswordResetSessionWhereUniqueInput
  }

  /**
   * PasswordResetSession findFirst
   */
  export type PasswordResetSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetSession to fetch.
     */
    where?: PasswordResetSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetSessions to fetch.
     */
    orderBy?: PasswordResetSessionOrderByWithRelationInput | PasswordResetSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetSessions.
     */
    cursor?: PasswordResetSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetSessions.
     */
    distinct?: PasswordResetSessionScalarFieldEnum | PasswordResetSessionScalarFieldEnum[]
  }

  /**
   * PasswordResetSession findFirstOrThrow
   */
  export type PasswordResetSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetSession to fetch.
     */
    where?: PasswordResetSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetSessions to fetch.
     */
    orderBy?: PasswordResetSessionOrderByWithRelationInput | PasswordResetSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetSessions.
     */
    cursor?: PasswordResetSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetSessions.
     */
    distinct?: PasswordResetSessionScalarFieldEnum | PasswordResetSessionScalarFieldEnum[]
  }

  /**
   * PasswordResetSession findMany
   */
  export type PasswordResetSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetSessions to fetch.
     */
    where?: PasswordResetSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetSessions to fetch.
     */
    orderBy?: PasswordResetSessionOrderByWithRelationInput | PasswordResetSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetSessions.
     */
    cursor?: PasswordResetSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetSessions.
     */
    skip?: number
    distinct?: PasswordResetSessionScalarFieldEnum | PasswordResetSessionScalarFieldEnum[]
  }

  /**
   * PasswordResetSession create
   */
  export type PasswordResetSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetSession.
     */
    data: XOR<PasswordResetSessionCreateInput, PasswordResetSessionUncheckedCreateInput>
  }

  /**
   * PasswordResetSession createMany
   */
  export type PasswordResetSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetSessions.
     */
    data: PasswordResetSessionCreateManyInput | PasswordResetSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetSession createManyAndReturn
   */
  export type PasswordResetSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetSessions.
     */
    data: PasswordResetSessionCreateManyInput | PasswordResetSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetSession update
   */
  export type PasswordResetSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetSession.
     */
    data: XOR<PasswordResetSessionUpdateInput, PasswordResetSessionUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetSession to update.
     */
    where: PasswordResetSessionWhereUniqueInput
  }

  /**
   * PasswordResetSession updateMany
   */
  export type PasswordResetSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetSessions.
     */
    data: XOR<PasswordResetSessionUpdateManyMutationInput, PasswordResetSessionUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetSessions to update
     */
    where?: PasswordResetSessionWhereInput
    /**
     * Limit how many PasswordResetSessions to update.
     */
    limit?: number
  }

  /**
   * PasswordResetSession updateManyAndReturn
   */
  export type PasswordResetSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetSessions.
     */
    data: XOR<PasswordResetSessionUpdateManyMutationInput, PasswordResetSessionUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetSessions to update
     */
    where?: PasswordResetSessionWhereInput
    /**
     * Limit how many PasswordResetSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetSession upsert
   */
  export type PasswordResetSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetSession to update in case it exists.
     */
    where: PasswordResetSessionWhereUniqueInput
    /**
     * In case the PasswordResetSession found by the `where` argument doesn't exist, create a new PasswordResetSession with this data.
     */
    create: XOR<PasswordResetSessionCreateInput, PasswordResetSessionUncheckedCreateInput>
    /**
     * In case the PasswordResetSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetSessionUpdateInput, PasswordResetSessionUncheckedUpdateInput>
  }

  /**
   * PasswordResetSession delete
   */
  export type PasswordResetSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
    /**
     * Filter which PasswordResetSession to delete.
     */
    where: PasswordResetSessionWhereUniqueInput
  }

  /**
   * PasswordResetSession deleteMany
   */
  export type PasswordResetSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetSessions to delete
     */
    where?: PasswordResetSessionWhereInput
    /**
     * Limit how many PasswordResetSessions to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetSession without action
   */
  export type PasswordResetSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetSession
     */
    select?: PasswordResetSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetSession
     */
    omit?: PasswordResetSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetSessionInclude<ExtArgs> | null
  }


  /**
   * Model Consumer
   */

  export type AggregateConsumer = {
    _count: ConsumerCountAggregateOutputType | null
    _min: ConsumerMinAggregateOutputType | null
    _max: ConsumerMaxAggregateOutputType | null
  }

  export type ConsumerMinAggregateOutputType = {
    id: string | null
    barcode: string | null
    userId: string | null
    gender: $Enums.Gender | null
    dateOfBirth: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsumerMaxAggregateOutputType = {
    id: string | null
    barcode: string | null
    userId: string | null
    gender: $Enums.Gender | null
    dateOfBirth: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsumerCountAggregateOutputType = {
    id: number
    barcode: number
    userId: number
    gender: number
    dateOfBirth: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConsumerMinAggregateInputType = {
    id?: true
    barcode?: true
    userId?: true
    gender?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsumerMaxAggregateInputType = {
    id?: true
    barcode?: true
    userId?: true
    gender?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsumerCountAggregateInputType = {
    id?: true
    barcode?: true
    userId?: true
    gender?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConsumerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consumer to aggregate.
     */
    where?: ConsumerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumers to fetch.
     */
    orderBy?: ConsumerOrderByWithRelationInput | ConsumerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsumerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consumers
    **/
    _count?: true | ConsumerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumerMaxAggregateInputType
  }

  export type GetConsumerAggregateType<T extends ConsumerAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumer[P]>
      : GetScalarType<T[P], AggregateConsumer[P]>
  }




  export type ConsumerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumerWhereInput
    orderBy?: ConsumerOrderByWithAggregationInput | ConsumerOrderByWithAggregationInput[]
    by: ConsumerScalarFieldEnum[] | ConsumerScalarFieldEnum
    having?: ConsumerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumerCountAggregateInputType | true
    _min?: ConsumerMinAggregateInputType
    _max?: ConsumerMaxAggregateInputType
  }

  export type ConsumerGroupByOutputType = {
    id: string
    barcode: string
    userId: string
    gender: $Enums.Gender | null
    dateOfBirth: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ConsumerCountAggregateOutputType | null
    _min: ConsumerMinAggregateOutputType | null
    _max: ConsumerMaxAggregateOutputType | null
  }

  type GetConsumerGroupByPayload<T extends ConsumerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsumerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsumerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsumerGroupByOutputType[P]>
            : GetScalarType<T[P], ConsumerGroupByOutputType[P]>
        }
      >
    >


  export type ConsumerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    userId?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Receipts?: boolean | Consumer$ReceiptsArgs<ExtArgs>
    _count?: boolean | ConsumerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumer"]>

  export type ConsumerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    userId?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumer"]>

  export type ConsumerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    userId?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumer"]>

  export type ConsumerSelectScalar = {
    id?: boolean
    barcode?: boolean
    userId?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConsumerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "barcode" | "userId" | "gender" | "dateOfBirth" | "createdAt" | "updatedAt", ExtArgs["result"]["consumer"]>
  export type ConsumerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Receipts?: boolean | Consumer$ReceiptsArgs<ExtArgs>
    _count?: boolean | ConsumerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsumerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ConsumerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ConsumerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consumer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Receipts: Prisma.$ReceiptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      barcode: string
      userId: string
      gender: $Enums.Gender | null
      dateOfBirth: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["consumer"]>
    composites: {}
  }

  type ConsumerGetPayload<S extends boolean | null | undefined | ConsumerDefaultArgs> = $Result.GetResult<Prisma.$ConsumerPayload, S>

  type ConsumerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsumerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsumerCountAggregateInputType | true
    }

  export interface ConsumerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consumer'], meta: { name: 'Consumer' } }
    /**
     * Find zero or one Consumer that matches the filter.
     * @param {ConsumerFindUniqueArgs} args - Arguments to find a Consumer
     * @example
     * // Get one Consumer
     * const consumer = await prisma.consumer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsumerFindUniqueArgs>(args: SelectSubset<T, ConsumerFindUniqueArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consumer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsumerFindUniqueOrThrowArgs} args - Arguments to find a Consumer
     * @example
     * // Get one Consumer
     * const consumer = await prisma.consumer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsumerFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsumerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consumer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerFindFirstArgs} args - Arguments to find a Consumer
     * @example
     * // Get one Consumer
     * const consumer = await prisma.consumer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsumerFindFirstArgs>(args?: SelectSubset<T, ConsumerFindFirstArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consumer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerFindFirstOrThrowArgs} args - Arguments to find a Consumer
     * @example
     * // Get one Consumer
     * const consumer = await prisma.consumer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsumerFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsumerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consumers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consumers
     * const consumers = await prisma.consumer.findMany()
     * 
     * // Get first 10 Consumers
     * const consumers = await prisma.consumer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consumerWithIdOnly = await prisma.consumer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsumerFindManyArgs>(args?: SelectSubset<T, ConsumerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consumer.
     * @param {ConsumerCreateArgs} args - Arguments to create a Consumer.
     * @example
     * // Create one Consumer
     * const Consumer = await prisma.consumer.create({
     *   data: {
     *     // ... data to create a Consumer
     *   }
     * })
     * 
     */
    create<T extends ConsumerCreateArgs>(args: SelectSubset<T, ConsumerCreateArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consumers.
     * @param {ConsumerCreateManyArgs} args - Arguments to create many Consumers.
     * @example
     * // Create many Consumers
     * const consumer = await prisma.consumer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsumerCreateManyArgs>(args?: SelectSubset<T, ConsumerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consumers and returns the data saved in the database.
     * @param {ConsumerCreateManyAndReturnArgs} args - Arguments to create many Consumers.
     * @example
     * // Create many Consumers
     * const consumer = await prisma.consumer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consumers and only return the `id`
     * const consumerWithIdOnly = await prisma.consumer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsumerCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsumerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Consumer.
     * @param {ConsumerDeleteArgs} args - Arguments to delete one Consumer.
     * @example
     * // Delete one Consumer
     * const Consumer = await prisma.consumer.delete({
     *   where: {
     *     // ... filter to delete one Consumer
     *   }
     * })
     * 
     */
    delete<T extends ConsumerDeleteArgs>(args: SelectSubset<T, ConsumerDeleteArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consumer.
     * @param {ConsumerUpdateArgs} args - Arguments to update one Consumer.
     * @example
     * // Update one Consumer
     * const consumer = await prisma.consumer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsumerUpdateArgs>(args: SelectSubset<T, ConsumerUpdateArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consumers.
     * @param {ConsumerDeleteManyArgs} args - Arguments to filter Consumers to delete.
     * @example
     * // Delete a few Consumers
     * const { count } = await prisma.consumer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsumerDeleteManyArgs>(args?: SelectSubset<T, ConsumerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consumers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consumers
     * const consumer = await prisma.consumer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsumerUpdateManyArgs>(args: SelectSubset<T, ConsumerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consumers and returns the data updated in the database.
     * @param {ConsumerUpdateManyAndReturnArgs} args - Arguments to update many Consumers.
     * @example
     * // Update many Consumers
     * const consumer = await prisma.consumer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consumers and only return the `id`
     * const consumerWithIdOnly = await prisma.consumer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsumerUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsumerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Consumer.
     * @param {ConsumerUpsertArgs} args - Arguments to update or create a Consumer.
     * @example
     * // Update or create a Consumer
     * const consumer = await prisma.consumer.upsert({
     *   create: {
     *     // ... data to create a Consumer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consumer we want to update
     *   }
     * })
     */
    upsert<T extends ConsumerUpsertArgs>(args: SelectSubset<T, ConsumerUpsertArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consumers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerCountArgs} args - Arguments to filter Consumers to count.
     * @example
     * // Count the number of Consumers
     * const count = await prisma.consumer.count({
     *   where: {
     *     // ... the filter for the Consumers we want to count
     *   }
     * })
    **/
    count<T extends ConsumerCountArgs>(
      args?: Subset<T, ConsumerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consumer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumerAggregateArgs>(args: Subset<T, ConsumerAggregateArgs>): Prisma.PrismaPromise<GetConsumerAggregateType<T>>

    /**
     * Group by Consumer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumerGroupByArgs['orderBy'] }
        : { orderBy?: ConsumerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consumer model
   */
  readonly fields: ConsumerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consumer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsumerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Receipts<T extends Consumer$ReceiptsArgs<ExtArgs> = {}>(args?: Subset<T, Consumer$ReceiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consumer model
   */
  interface ConsumerFieldRefs {
    readonly id: FieldRef<"Consumer", 'String'>
    readonly barcode: FieldRef<"Consumer", 'String'>
    readonly userId: FieldRef<"Consumer", 'String'>
    readonly gender: FieldRef<"Consumer", 'Gender'>
    readonly dateOfBirth: FieldRef<"Consumer", 'DateTime'>
    readonly createdAt: FieldRef<"Consumer", 'DateTime'>
    readonly updatedAt: FieldRef<"Consumer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Consumer findUnique
   */
  export type ConsumerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumer to fetch.
     */
    where: ConsumerWhereUniqueInput
  }

  /**
   * Consumer findUniqueOrThrow
   */
  export type ConsumerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumer to fetch.
     */
    where: ConsumerWhereUniqueInput
  }

  /**
   * Consumer findFirst
   */
  export type ConsumerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumer to fetch.
     */
    where?: ConsumerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumers to fetch.
     */
    orderBy?: ConsumerOrderByWithRelationInput | ConsumerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consumers.
     */
    cursor?: ConsumerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consumers.
     */
    distinct?: ConsumerScalarFieldEnum | ConsumerScalarFieldEnum[]
  }

  /**
   * Consumer findFirstOrThrow
   */
  export type ConsumerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumer to fetch.
     */
    where?: ConsumerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumers to fetch.
     */
    orderBy?: ConsumerOrderByWithRelationInput | ConsumerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consumers.
     */
    cursor?: ConsumerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consumers.
     */
    distinct?: ConsumerScalarFieldEnum | ConsumerScalarFieldEnum[]
  }

  /**
   * Consumer findMany
   */
  export type ConsumerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumers to fetch.
     */
    where?: ConsumerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumers to fetch.
     */
    orderBy?: ConsumerOrderByWithRelationInput | ConsumerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consumers.
     */
    cursor?: ConsumerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumers.
     */
    skip?: number
    distinct?: ConsumerScalarFieldEnum | ConsumerScalarFieldEnum[]
  }

  /**
   * Consumer create
   */
  export type ConsumerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * The data needed to create a Consumer.
     */
    data: XOR<ConsumerCreateInput, ConsumerUncheckedCreateInput>
  }

  /**
   * Consumer createMany
   */
  export type ConsumerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consumers.
     */
    data: ConsumerCreateManyInput | ConsumerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consumer createManyAndReturn
   */
  export type ConsumerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * The data used to create many Consumers.
     */
    data: ConsumerCreateManyInput | ConsumerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consumer update
   */
  export type ConsumerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * The data needed to update a Consumer.
     */
    data: XOR<ConsumerUpdateInput, ConsumerUncheckedUpdateInput>
    /**
     * Choose, which Consumer to update.
     */
    where: ConsumerWhereUniqueInput
  }

  /**
   * Consumer updateMany
   */
  export type ConsumerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consumers.
     */
    data: XOR<ConsumerUpdateManyMutationInput, ConsumerUncheckedUpdateManyInput>
    /**
     * Filter which Consumers to update
     */
    where?: ConsumerWhereInput
    /**
     * Limit how many Consumers to update.
     */
    limit?: number
  }

  /**
   * Consumer updateManyAndReturn
   */
  export type ConsumerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * The data used to update Consumers.
     */
    data: XOR<ConsumerUpdateManyMutationInput, ConsumerUncheckedUpdateManyInput>
    /**
     * Filter which Consumers to update
     */
    where?: ConsumerWhereInput
    /**
     * Limit how many Consumers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consumer upsert
   */
  export type ConsumerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * The filter to search for the Consumer to update in case it exists.
     */
    where: ConsumerWhereUniqueInput
    /**
     * In case the Consumer found by the `where` argument doesn't exist, create a new Consumer with this data.
     */
    create: XOR<ConsumerCreateInput, ConsumerUncheckedCreateInput>
    /**
     * In case the Consumer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsumerUpdateInput, ConsumerUncheckedUpdateInput>
  }

  /**
   * Consumer delete
   */
  export type ConsumerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter which Consumer to delete.
     */
    where: ConsumerWhereUniqueInput
  }

  /**
   * Consumer deleteMany
   */
  export type ConsumerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consumers to delete
     */
    where?: ConsumerWhereInput
    /**
     * Limit how many Consumers to delete.
     */
    limit?: number
  }

  /**
   * Consumer.Receipts
   */
  export type Consumer$ReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    cursor?: ReceiptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Consumer without action
   */
  export type ConsumerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
  }


  /**
   * Model MerchantUser
   */

  export type AggregateMerchantUser = {
    _count: MerchantUserCountAggregateOutputType | null
    _min: MerchantUserMinAggregateOutputType | null
    _max: MerchantUserMaxAggregateOutputType | null
  }

  export type MerchantUserMinAggregateOutputType = {
    id: string | null
    jobTitle: string | null
    merchantId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MerchantUserMaxAggregateOutputType = {
    id: string | null
    jobTitle: string | null
    merchantId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MerchantUserCountAggregateOutputType = {
    id: number
    jobTitle: number
    merchantId: number
    merchantRole: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MerchantUserMinAggregateInputType = {
    id?: true
    jobTitle?: true
    merchantId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MerchantUserMaxAggregateInputType = {
    id?: true
    jobTitle?: true
    merchantId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MerchantUserCountAggregateInputType = {
    id?: true
    jobTitle?: true
    merchantId?: true
    merchantRole?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MerchantUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MerchantUser to aggregate.
     */
    where?: MerchantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerchantUsers to fetch.
     */
    orderBy?: MerchantUserOrderByWithRelationInput | MerchantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MerchantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerchantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerchantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MerchantUsers
    **/
    _count?: true | MerchantUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerchantUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerchantUserMaxAggregateInputType
  }

  export type GetMerchantUserAggregateType<T extends MerchantUserAggregateArgs> = {
        [P in keyof T & keyof AggregateMerchantUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerchantUser[P]>
      : GetScalarType<T[P], AggregateMerchantUser[P]>
  }




  export type MerchantUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantUserWhereInput
    orderBy?: MerchantUserOrderByWithAggregationInput | MerchantUserOrderByWithAggregationInput[]
    by: MerchantUserScalarFieldEnum[] | MerchantUserScalarFieldEnum
    having?: MerchantUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerchantUserCountAggregateInputType | true
    _min?: MerchantUserMinAggregateInputType
    _max?: MerchantUserMaxAggregateInputType
  }

  export type MerchantUserGroupByOutputType = {
    id: string
    jobTitle: string
    merchantId: string
    merchantRole: $Enums.MerchantRole[]
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: MerchantUserCountAggregateOutputType | null
    _min: MerchantUserMinAggregateOutputType | null
    _max: MerchantUserMaxAggregateOutputType | null
  }

  type GetMerchantUserGroupByPayload<T extends MerchantUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerchantUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerchantUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerchantUserGroupByOutputType[P]>
            : GetScalarType<T[P], MerchantUserGroupByOutputType[P]>
        }
      >
    >


  export type MerchantUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobTitle?: boolean
    merchantId?: boolean
    merchantRole?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    brandUsers?: boolean | MerchantUser$brandUsersArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | MerchantUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchantUser"]>

  export type MerchantUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobTitle?: boolean
    merchantId?: boolean
    merchantRole?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchantUser"]>

  export type MerchantUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobTitle?: boolean
    merchantId?: boolean
    merchantRole?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchantUser"]>

  export type MerchantUserSelectScalar = {
    id?: boolean
    jobTitle?: boolean
    merchantId?: boolean
    merchantRole?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MerchantUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobTitle" | "merchantId" | "merchantRole" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["merchantUser"]>
  export type MerchantUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    brandUsers?: boolean | MerchantUser$brandUsersArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | MerchantUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MerchantUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MerchantUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MerchantUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MerchantUser"
    objects: {
      merchant: Prisma.$MerchantPayload<ExtArgs>
      brandUsers: Prisma.$BrandUserPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobTitle: string
      merchantId: string
      merchantRole: $Enums.MerchantRole[]
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["merchantUser"]>
    composites: {}
  }

  type MerchantUserGetPayload<S extends boolean | null | undefined | MerchantUserDefaultArgs> = $Result.GetResult<Prisma.$MerchantUserPayload, S>

  type MerchantUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MerchantUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MerchantUserCountAggregateInputType | true
    }

  export interface MerchantUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MerchantUser'], meta: { name: 'MerchantUser' } }
    /**
     * Find zero or one MerchantUser that matches the filter.
     * @param {MerchantUserFindUniqueArgs} args - Arguments to find a MerchantUser
     * @example
     * // Get one MerchantUser
     * const merchantUser = await prisma.merchantUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MerchantUserFindUniqueArgs>(args: SelectSubset<T, MerchantUserFindUniqueArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MerchantUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MerchantUserFindUniqueOrThrowArgs} args - Arguments to find a MerchantUser
     * @example
     * // Get one MerchantUser
     * const merchantUser = await prisma.merchantUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MerchantUserFindUniqueOrThrowArgs>(args: SelectSubset<T, MerchantUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MerchantUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUserFindFirstArgs} args - Arguments to find a MerchantUser
     * @example
     * // Get one MerchantUser
     * const merchantUser = await prisma.merchantUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MerchantUserFindFirstArgs>(args?: SelectSubset<T, MerchantUserFindFirstArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MerchantUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUserFindFirstOrThrowArgs} args - Arguments to find a MerchantUser
     * @example
     * // Get one MerchantUser
     * const merchantUser = await prisma.merchantUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MerchantUserFindFirstOrThrowArgs>(args?: SelectSubset<T, MerchantUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MerchantUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MerchantUsers
     * const merchantUsers = await prisma.merchantUser.findMany()
     * 
     * // Get first 10 MerchantUsers
     * const merchantUsers = await prisma.merchantUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const merchantUserWithIdOnly = await prisma.merchantUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MerchantUserFindManyArgs>(args?: SelectSubset<T, MerchantUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MerchantUser.
     * @param {MerchantUserCreateArgs} args - Arguments to create a MerchantUser.
     * @example
     * // Create one MerchantUser
     * const MerchantUser = await prisma.merchantUser.create({
     *   data: {
     *     // ... data to create a MerchantUser
     *   }
     * })
     * 
     */
    create<T extends MerchantUserCreateArgs>(args: SelectSubset<T, MerchantUserCreateArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MerchantUsers.
     * @param {MerchantUserCreateManyArgs} args - Arguments to create many MerchantUsers.
     * @example
     * // Create many MerchantUsers
     * const merchantUser = await prisma.merchantUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MerchantUserCreateManyArgs>(args?: SelectSubset<T, MerchantUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MerchantUsers and returns the data saved in the database.
     * @param {MerchantUserCreateManyAndReturnArgs} args - Arguments to create many MerchantUsers.
     * @example
     * // Create many MerchantUsers
     * const merchantUser = await prisma.merchantUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MerchantUsers and only return the `id`
     * const merchantUserWithIdOnly = await prisma.merchantUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MerchantUserCreateManyAndReturnArgs>(args?: SelectSubset<T, MerchantUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MerchantUser.
     * @param {MerchantUserDeleteArgs} args - Arguments to delete one MerchantUser.
     * @example
     * // Delete one MerchantUser
     * const MerchantUser = await prisma.merchantUser.delete({
     *   where: {
     *     // ... filter to delete one MerchantUser
     *   }
     * })
     * 
     */
    delete<T extends MerchantUserDeleteArgs>(args: SelectSubset<T, MerchantUserDeleteArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MerchantUser.
     * @param {MerchantUserUpdateArgs} args - Arguments to update one MerchantUser.
     * @example
     * // Update one MerchantUser
     * const merchantUser = await prisma.merchantUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MerchantUserUpdateArgs>(args: SelectSubset<T, MerchantUserUpdateArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MerchantUsers.
     * @param {MerchantUserDeleteManyArgs} args - Arguments to filter MerchantUsers to delete.
     * @example
     * // Delete a few MerchantUsers
     * const { count } = await prisma.merchantUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MerchantUserDeleteManyArgs>(args?: SelectSubset<T, MerchantUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MerchantUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MerchantUsers
     * const merchantUser = await prisma.merchantUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MerchantUserUpdateManyArgs>(args: SelectSubset<T, MerchantUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MerchantUsers and returns the data updated in the database.
     * @param {MerchantUserUpdateManyAndReturnArgs} args - Arguments to update many MerchantUsers.
     * @example
     * // Update many MerchantUsers
     * const merchantUser = await prisma.merchantUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MerchantUsers and only return the `id`
     * const merchantUserWithIdOnly = await prisma.merchantUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MerchantUserUpdateManyAndReturnArgs>(args: SelectSubset<T, MerchantUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MerchantUser.
     * @param {MerchantUserUpsertArgs} args - Arguments to update or create a MerchantUser.
     * @example
     * // Update or create a MerchantUser
     * const merchantUser = await prisma.merchantUser.upsert({
     *   create: {
     *     // ... data to create a MerchantUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MerchantUser we want to update
     *   }
     * })
     */
    upsert<T extends MerchantUserUpsertArgs>(args: SelectSubset<T, MerchantUserUpsertArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MerchantUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUserCountArgs} args - Arguments to filter MerchantUsers to count.
     * @example
     * // Count the number of MerchantUsers
     * const count = await prisma.merchantUser.count({
     *   where: {
     *     // ... the filter for the MerchantUsers we want to count
     *   }
     * })
    **/
    count<T extends MerchantUserCountArgs>(
      args?: Subset<T, MerchantUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerchantUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MerchantUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerchantUserAggregateArgs>(args: Subset<T, MerchantUserAggregateArgs>): Prisma.PrismaPromise<GetMerchantUserAggregateType<T>>

    /**
     * Group by MerchantUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MerchantUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MerchantUserGroupByArgs['orderBy'] }
        : { orderBy?: MerchantUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MerchantUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerchantUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MerchantUser model
   */
  readonly fields: MerchantUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MerchantUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MerchantUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    merchant<T extends MerchantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MerchantDefaultArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    brandUsers<T extends MerchantUser$brandUsersArgs<ExtArgs> = {}>(args?: Subset<T, MerchantUser$brandUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MerchantUser model
   */
  interface MerchantUserFieldRefs {
    readonly id: FieldRef<"MerchantUser", 'String'>
    readonly jobTitle: FieldRef<"MerchantUser", 'String'>
    readonly merchantId: FieldRef<"MerchantUser", 'String'>
    readonly merchantRole: FieldRef<"MerchantUser", 'MerchantRole[]'>
    readonly userId: FieldRef<"MerchantUser", 'String'>
    readonly createdAt: FieldRef<"MerchantUser", 'DateTime'>
    readonly updatedAt: FieldRef<"MerchantUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MerchantUser findUnique
   */
  export type MerchantUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * Filter, which MerchantUser to fetch.
     */
    where: MerchantUserWhereUniqueInput
  }

  /**
   * MerchantUser findUniqueOrThrow
   */
  export type MerchantUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * Filter, which MerchantUser to fetch.
     */
    where: MerchantUserWhereUniqueInput
  }

  /**
   * MerchantUser findFirst
   */
  export type MerchantUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * Filter, which MerchantUser to fetch.
     */
    where?: MerchantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerchantUsers to fetch.
     */
    orderBy?: MerchantUserOrderByWithRelationInput | MerchantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MerchantUsers.
     */
    cursor?: MerchantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerchantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerchantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MerchantUsers.
     */
    distinct?: MerchantUserScalarFieldEnum | MerchantUserScalarFieldEnum[]
  }

  /**
   * MerchantUser findFirstOrThrow
   */
  export type MerchantUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * Filter, which MerchantUser to fetch.
     */
    where?: MerchantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerchantUsers to fetch.
     */
    orderBy?: MerchantUserOrderByWithRelationInput | MerchantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MerchantUsers.
     */
    cursor?: MerchantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerchantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerchantUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MerchantUsers.
     */
    distinct?: MerchantUserScalarFieldEnum | MerchantUserScalarFieldEnum[]
  }

  /**
   * MerchantUser findMany
   */
  export type MerchantUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * Filter, which MerchantUsers to fetch.
     */
    where?: MerchantUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerchantUsers to fetch.
     */
    orderBy?: MerchantUserOrderByWithRelationInput | MerchantUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MerchantUsers.
     */
    cursor?: MerchantUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerchantUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerchantUsers.
     */
    skip?: number
    distinct?: MerchantUserScalarFieldEnum | MerchantUserScalarFieldEnum[]
  }

  /**
   * MerchantUser create
   */
  export type MerchantUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * The data needed to create a MerchantUser.
     */
    data: XOR<MerchantUserCreateInput, MerchantUserUncheckedCreateInput>
  }

  /**
   * MerchantUser createMany
   */
  export type MerchantUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MerchantUsers.
     */
    data: MerchantUserCreateManyInput | MerchantUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MerchantUser createManyAndReturn
   */
  export type MerchantUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * The data used to create many MerchantUsers.
     */
    data: MerchantUserCreateManyInput | MerchantUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MerchantUser update
   */
  export type MerchantUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * The data needed to update a MerchantUser.
     */
    data: XOR<MerchantUserUpdateInput, MerchantUserUncheckedUpdateInput>
    /**
     * Choose, which MerchantUser to update.
     */
    where: MerchantUserWhereUniqueInput
  }

  /**
   * MerchantUser updateMany
   */
  export type MerchantUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MerchantUsers.
     */
    data: XOR<MerchantUserUpdateManyMutationInput, MerchantUserUncheckedUpdateManyInput>
    /**
     * Filter which MerchantUsers to update
     */
    where?: MerchantUserWhereInput
    /**
     * Limit how many MerchantUsers to update.
     */
    limit?: number
  }

  /**
   * MerchantUser updateManyAndReturn
   */
  export type MerchantUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * The data used to update MerchantUsers.
     */
    data: XOR<MerchantUserUpdateManyMutationInput, MerchantUserUncheckedUpdateManyInput>
    /**
     * Filter which MerchantUsers to update
     */
    where?: MerchantUserWhereInput
    /**
     * Limit how many MerchantUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MerchantUser upsert
   */
  export type MerchantUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * The filter to search for the MerchantUser to update in case it exists.
     */
    where: MerchantUserWhereUniqueInput
    /**
     * In case the MerchantUser found by the `where` argument doesn't exist, create a new MerchantUser with this data.
     */
    create: XOR<MerchantUserCreateInput, MerchantUserUncheckedCreateInput>
    /**
     * In case the MerchantUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MerchantUserUpdateInput, MerchantUserUncheckedUpdateInput>
  }

  /**
   * MerchantUser delete
   */
  export type MerchantUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    /**
     * Filter which MerchantUser to delete.
     */
    where: MerchantUserWhereUniqueInput
  }

  /**
   * MerchantUser deleteMany
   */
  export type MerchantUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MerchantUsers to delete
     */
    where?: MerchantUserWhereInput
    /**
     * Limit how many MerchantUsers to delete.
     */
    limit?: number
  }

  /**
   * MerchantUser.brandUsers
   */
  export type MerchantUser$brandUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    where?: BrandUserWhereInput
    orderBy?: BrandUserOrderByWithRelationInput | BrandUserOrderByWithRelationInput[]
    cursor?: BrandUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandUserScalarFieldEnum | BrandUserScalarFieldEnum[]
  }

  /**
   * MerchantUser without action
   */
  export type MerchantUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
  }


  /**
   * Model AdminUser
   */

  export type AggregateAdminUser = {
    _count: AdminUserCountAggregateOutputType | null
    _min: AdminUserMinAggregateOutputType | null
    _max: AdminUserMaxAggregateOutputType | null
  }

  export type AdminUserMinAggregateOutputType = {
    id: string | null
    jobTitle: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminUserMaxAggregateOutputType = {
    id: string | null
    jobTitle: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminUserCountAggregateOutputType = {
    id: number
    jobTitle: number
    adminRole: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminUserMinAggregateInputType = {
    id?: true
    jobTitle?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminUserMaxAggregateInputType = {
    id?: true
    jobTitle?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminUserCountAggregateInputType = {
    id?: true
    jobTitle?: true
    adminRole?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminUser to aggregate.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminUsers
    **/
    _count?: true | AdminUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminUserMaxAggregateInputType
  }

  export type GetAdminUserAggregateType<T extends AdminUserAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminUser[P]>
      : GetScalarType<T[P], AggregateAdminUser[P]>
  }




  export type AdminUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminUserWhereInput
    orderBy?: AdminUserOrderByWithAggregationInput | AdminUserOrderByWithAggregationInput[]
    by: AdminUserScalarFieldEnum[] | AdminUserScalarFieldEnum
    having?: AdminUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminUserCountAggregateInputType | true
    _min?: AdminUserMinAggregateInputType
    _max?: AdminUserMaxAggregateInputType
  }

  export type AdminUserGroupByOutputType = {
    id: string
    jobTitle: string
    adminRole: $Enums.AdminRole[]
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: AdminUserCountAggregateOutputType | null
    _min: AdminUserMinAggregateOutputType | null
    _max: AdminUserMaxAggregateOutputType | null
  }

  type GetAdminUserGroupByPayload<T extends AdminUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminUserGroupByOutputType[P]>
            : GetScalarType<T[P], AdminUserGroupByOutputType[P]>
        }
      >
    >


  export type AdminUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobTitle?: boolean
    adminRole?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobTitle?: boolean
    adminRole?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobTitle?: boolean
    adminRole?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectScalar = {
    id?: boolean
    jobTitle?: boolean
    adminRole?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdminUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobTitle" | "adminRole" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["adminUser"]>
  export type AdminUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobTitle: string
      adminRole: $Enums.AdminRole[]
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["adminUser"]>
    composites: {}
  }

  type AdminUserGetPayload<S extends boolean | null | undefined | AdminUserDefaultArgs> = $Result.GetResult<Prisma.$AdminUserPayload, S>

  type AdminUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminUserCountAggregateInputType | true
    }

  export interface AdminUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminUser'], meta: { name: 'AdminUser' } }
    /**
     * Find zero or one AdminUser that matches the filter.
     * @param {AdminUserFindUniqueArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminUserFindUniqueArgs>(args: SelectSubset<T, AdminUserFindUniqueArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminUserFindUniqueOrThrowArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminUserFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindFirstArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminUserFindFirstArgs>(args?: SelectSubset<T, AdminUserFindFirstArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindFirstOrThrowArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminUserFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminUsers
     * const adminUsers = await prisma.adminUser.findMany()
     * 
     * // Get first 10 AdminUsers
     * const adminUsers = await prisma.adminUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminUserFindManyArgs>(args?: SelectSubset<T, AdminUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminUser.
     * @param {AdminUserCreateArgs} args - Arguments to create a AdminUser.
     * @example
     * // Create one AdminUser
     * const AdminUser = await prisma.adminUser.create({
     *   data: {
     *     // ... data to create a AdminUser
     *   }
     * })
     * 
     */
    create<T extends AdminUserCreateArgs>(args: SelectSubset<T, AdminUserCreateArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminUsers.
     * @param {AdminUserCreateManyArgs} args - Arguments to create many AdminUsers.
     * @example
     * // Create many AdminUsers
     * const adminUser = await prisma.adminUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminUserCreateManyArgs>(args?: SelectSubset<T, AdminUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminUsers and returns the data saved in the database.
     * @param {AdminUserCreateManyAndReturnArgs} args - Arguments to create many AdminUsers.
     * @example
     * // Create many AdminUsers
     * const adminUser = await prisma.adminUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminUsers and only return the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminUserCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminUser.
     * @param {AdminUserDeleteArgs} args - Arguments to delete one AdminUser.
     * @example
     * // Delete one AdminUser
     * const AdminUser = await prisma.adminUser.delete({
     *   where: {
     *     // ... filter to delete one AdminUser
     *   }
     * })
     * 
     */
    delete<T extends AdminUserDeleteArgs>(args: SelectSubset<T, AdminUserDeleteArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminUser.
     * @param {AdminUserUpdateArgs} args - Arguments to update one AdminUser.
     * @example
     * // Update one AdminUser
     * const adminUser = await prisma.adminUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUserUpdateArgs>(args: SelectSubset<T, AdminUserUpdateArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminUsers.
     * @param {AdminUserDeleteManyArgs} args - Arguments to filter AdminUsers to delete.
     * @example
     * // Delete a few AdminUsers
     * const { count } = await prisma.adminUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminUserDeleteManyArgs>(args?: SelectSubset<T, AdminUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminUsers
     * const adminUser = await prisma.adminUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUserUpdateManyArgs>(args: SelectSubset<T, AdminUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminUsers and returns the data updated in the database.
     * @param {AdminUserUpdateManyAndReturnArgs} args - Arguments to update many AdminUsers.
     * @example
     * // Update many AdminUsers
     * const adminUser = await prisma.adminUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminUsers and only return the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUserUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminUser.
     * @param {AdminUserUpsertArgs} args - Arguments to update or create a AdminUser.
     * @example
     * // Update or create a AdminUser
     * const adminUser = await prisma.adminUser.upsert({
     *   create: {
     *     // ... data to create a AdminUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminUser we want to update
     *   }
     * })
     */
    upsert<T extends AdminUserUpsertArgs>(args: SelectSubset<T, AdminUserUpsertArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserCountArgs} args - Arguments to filter AdminUsers to count.
     * @example
     * // Count the number of AdminUsers
     * const count = await prisma.adminUser.count({
     *   where: {
     *     // ... the filter for the AdminUsers we want to count
     *   }
     * })
    **/
    count<T extends AdminUserCountArgs>(
      args?: Subset<T, AdminUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminUserAggregateArgs>(args: Subset<T, AdminUserAggregateArgs>): Prisma.PrismaPromise<GetAdminUserAggregateType<T>>

    /**
     * Group by AdminUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminUserGroupByArgs['orderBy'] }
        : { orderBy?: AdminUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminUser model
   */
  readonly fields: AdminUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminUser model
   */
  interface AdminUserFieldRefs {
    readonly id: FieldRef<"AdminUser", 'String'>
    readonly jobTitle: FieldRef<"AdminUser", 'String'>
    readonly adminRole: FieldRef<"AdminUser", 'AdminRole[]'>
    readonly userId: FieldRef<"AdminUser", 'String'>
    readonly createdAt: FieldRef<"AdminUser", 'DateTime'>
    readonly updatedAt: FieldRef<"AdminUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminUser findUnique
   */
  export type AdminUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser findUniqueOrThrow
   */
  export type AdminUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser findFirst
   */
  export type AdminUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminUsers.
     */
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser findFirstOrThrow
   */
  export type AdminUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminUsers.
     */
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser findMany
   */
  export type AdminUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUsers to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser create
   */
  export type AdminUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminUser.
     */
    data: XOR<AdminUserCreateInput, AdminUserUncheckedCreateInput>
  }

  /**
   * AdminUser createMany
   */
  export type AdminUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminUsers.
     */
    data: AdminUserCreateManyInput | AdminUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminUser createManyAndReturn
   */
  export type AdminUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * The data used to create many AdminUsers.
     */
    data: AdminUserCreateManyInput | AdminUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminUser update
   */
  export type AdminUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminUser.
     */
    data: XOR<AdminUserUpdateInput, AdminUserUncheckedUpdateInput>
    /**
     * Choose, which AdminUser to update.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser updateMany
   */
  export type AdminUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminUsers.
     */
    data: XOR<AdminUserUpdateManyMutationInput, AdminUserUncheckedUpdateManyInput>
    /**
     * Filter which AdminUsers to update
     */
    where?: AdminUserWhereInput
    /**
     * Limit how many AdminUsers to update.
     */
    limit?: number
  }

  /**
   * AdminUser updateManyAndReturn
   */
  export type AdminUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * The data used to update AdminUsers.
     */
    data: XOR<AdminUserUpdateManyMutationInput, AdminUserUncheckedUpdateManyInput>
    /**
     * Filter which AdminUsers to update
     */
    where?: AdminUserWhereInput
    /**
     * Limit how many AdminUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminUser upsert
   */
  export type AdminUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminUser to update in case it exists.
     */
    where: AdminUserWhereUniqueInput
    /**
     * In case the AdminUser found by the `where` argument doesn't exist, create a new AdminUser with this data.
     */
    create: XOR<AdminUserCreateInput, AdminUserUncheckedCreateInput>
    /**
     * In case the AdminUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUserUpdateInput, AdminUserUncheckedUpdateInput>
  }

  /**
   * AdminUser delete
   */
  export type AdminUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter which AdminUser to delete.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser deleteMany
   */
  export type AdminUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminUsers to delete
     */
    where?: AdminUserWhereInput
    /**
     * Limit how many AdminUsers to delete.
     */
    limit?: number
  }

  /**
   * AdminUser without action
   */
  export type AdminUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
  }


  /**
   * Model BrandUser
   */

  export type AggregateBrandUser = {
    _count: BrandUserCountAggregateOutputType | null
    _min: BrandUserMinAggregateOutputType | null
    _max: BrandUserMaxAggregateOutputType | null
  }

  export type BrandUserMinAggregateOutputType = {
    id: string | null
    brandId: string | null
    merchantUserId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandUserMaxAggregateOutputType = {
    id: string | null
    brandId: string | null
    merchantUserId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandUserCountAggregateOutputType = {
    id: number
    brandId: number
    merchantUserId: number
    brandRole: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BrandUserMinAggregateInputType = {
    id?: true
    brandId?: true
    merchantUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandUserMaxAggregateInputType = {
    id?: true
    brandId?: true
    merchantUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandUserCountAggregateInputType = {
    id?: true
    brandId?: true
    merchantUserId?: true
    brandRole?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BrandUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BrandUser to aggregate.
     */
    where?: BrandUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BrandUsers to fetch.
     */
    orderBy?: BrandUserOrderByWithRelationInput | BrandUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BrandUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BrandUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BrandUsers
    **/
    _count?: true | BrandUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandUserMaxAggregateInputType
  }

  export type GetBrandUserAggregateType<T extends BrandUserAggregateArgs> = {
        [P in keyof T & keyof AggregateBrandUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrandUser[P]>
      : GetScalarType<T[P], AggregateBrandUser[P]>
  }




  export type BrandUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandUserWhereInput
    orderBy?: BrandUserOrderByWithAggregationInput | BrandUserOrderByWithAggregationInput[]
    by: BrandUserScalarFieldEnum[] | BrandUserScalarFieldEnum
    having?: BrandUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandUserCountAggregateInputType | true
    _min?: BrandUserMinAggregateInputType
    _max?: BrandUserMaxAggregateInputType
  }

  export type BrandUserGroupByOutputType = {
    id: string
    brandId: string
    merchantUserId: string | null
    brandRole: $Enums.BrandRole[]
    createdAt: Date
    updatedAt: Date
    _count: BrandUserCountAggregateOutputType | null
    _min: BrandUserMinAggregateOutputType | null
    _max: BrandUserMaxAggregateOutputType | null
  }

  type GetBrandUserGroupByPayload<T extends BrandUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandUserGroupByOutputType[P]>
            : GetScalarType<T[P], BrandUserGroupByOutputType[P]>
        }
      >
    >


  export type BrandUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brandId?: boolean
    merchantUserId?: boolean
    brandRole?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    MerchantUser?: boolean | BrandUser$MerchantUserArgs<ExtArgs>
  }, ExtArgs["result"]["brandUser"]>

  export type BrandUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brandId?: boolean
    merchantUserId?: boolean
    brandRole?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    MerchantUser?: boolean | BrandUser$MerchantUserArgs<ExtArgs>
  }, ExtArgs["result"]["brandUser"]>

  export type BrandUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brandId?: boolean
    merchantUserId?: boolean
    brandRole?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    MerchantUser?: boolean | BrandUser$MerchantUserArgs<ExtArgs>
  }, ExtArgs["result"]["brandUser"]>

  export type BrandUserSelectScalar = {
    id?: boolean
    brandId?: boolean
    merchantUserId?: boolean
    brandRole?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BrandUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "brandId" | "merchantUserId" | "brandRole" | "createdAt" | "updatedAt", ExtArgs["result"]["brandUser"]>
  export type BrandUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    MerchantUser?: boolean | BrandUser$MerchantUserArgs<ExtArgs>
  }
  export type BrandUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    MerchantUser?: boolean | BrandUser$MerchantUserArgs<ExtArgs>
  }
  export type BrandUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    MerchantUser?: boolean | BrandUser$MerchantUserArgs<ExtArgs>
  }

  export type $BrandUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BrandUser"
    objects: {
      brand: Prisma.$BrandPayload<ExtArgs>
      MerchantUser: Prisma.$MerchantUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      brandId: string
      merchantUserId: string | null
      brandRole: $Enums.BrandRole[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["brandUser"]>
    composites: {}
  }

  type BrandUserGetPayload<S extends boolean | null | undefined | BrandUserDefaultArgs> = $Result.GetResult<Prisma.$BrandUserPayload, S>

  type BrandUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandUserCountAggregateInputType | true
    }

  export interface BrandUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BrandUser'], meta: { name: 'BrandUser' } }
    /**
     * Find zero or one BrandUser that matches the filter.
     * @param {BrandUserFindUniqueArgs} args - Arguments to find a BrandUser
     * @example
     * // Get one BrandUser
     * const brandUser = await prisma.brandUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandUserFindUniqueArgs>(args: SelectSubset<T, BrandUserFindUniqueArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BrandUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandUserFindUniqueOrThrowArgs} args - Arguments to find a BrandUser
     * @example
     * // Get one BrandUser
     * const brandUser = await prisma.brandUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandUserFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BrandUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUserFindFirstArgs} args - Arguments to find a BrandUser
     * @example
     * // Get one BrandUser
     * const brandUser = await prisma.brandUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandUserFindFirstArgs>(args?: SelectSubset<T, BrandUserFindFirstArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BrandUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUserFindFirstOrThrowArgs} args - Arguments to find a BrandUser
     * @example
     * // Get one BrandUser
     * const brandUser = await prisma.brandUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandUserFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BrandUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BrandUsers
     * const brandUsers = await prisma.brandUser.findMany()
     * 
     * // Get first 10 BrandUsers
     * const brandUsers = await prisma.brandUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandUserWithIdOnly = await prisma.brandUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandUserFindManyArgs>(args?: SelectSubset<T, BrandUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BrandUser.
     * @param {BrandUserCreateArgs} args - Arguments to create a BrandUser.
     * @example
     * // Create one BrandUser
     * const BrandUser = await prisma.brandUser.create({
     *   data: {
     *     // ... data to create a BrandUser
     *   }
     * })
     * 
     */
    create<T extends BrandUserCreateArgs>(args: SelectSubset<T, BrandUserCreateArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BrandUsers.
     * @param {BrandUserCreateManyArgs} args - Arguments to create many BrandUsers.
     * @example
     * // Create many BrandUsers
     * const brandUser = await prisma.brandUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandUserCreateManyArgs>(args?: SelectSubset<T, BrandUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BrandUsers and returns the data saved in the database.
     * @param {BrandUserCreateManyAndReturnArgs} args - Arguments to create many BrandUsers.
     * @example
     * // Create many BrandUsers
     * const brandUser = await prisma.brandUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BrandUsers and only return the `id`
     * const brandUserWithIdOnly = await prisma.brandUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandUserCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BrandUser.
     * @param {BrandUserDeleteArgs} args - Arguments to delete one BrandUser.
     * @example
     * // Delete one BrandUser
     * const BrandUser = await prisma.brandUser.delete({
     *   where: {
     *     // ... filter to delete one BrandUser
     *   }
     * })
     * 
     */
    delete<T extends BrandUserDeleteArgs>(args: SelectSubset<T, BrandUserDeleteArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BrandUser.
     * @param {BrandUserUpdateArgs} args - Arguments to update one BrandUser.
     * @example
     * // Update one BrandUser
     * const brandUser = await prisma.brandUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUserUpdateArgs>(args: SelectSubset<T, BrandUserUpdateArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BrandUsers.
     * @param {BrandUserDeleteManyArgs} args - Arguments to filter BrandUsers to delete.
     * @example
     * // Delete a few BrandUsers
     * const { count } = await prisma.brandUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandUserDeleteManyArgs>(args?: SelectSubset<T, BrandUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BrandUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BrandUsers
     * const brandUser = await prisma.brandUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUserUpdateManyArgs>(args: SelectSubset<T, BrandUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BrandUsers and returns the data updated in the database.
     * @param {BrandUserUpdateManyAndReturnArgs} args - Arguments to update many BrandUsers.
     * @example
     * // Update many BrandUsers
     * const brandUser = await prisma.brandUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BrandUsers and only return the `id`
     * const brandUserWithIdOnly = await prisma.brandUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUserUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BrandUser.
     * @param {BrandUserUpsertArgs} args - Arguments to update or create a BrandUser.
     * @example
     * // Update or create a BrandUser
     * const brandUser = await prisma.brandUser.upsert({
     *   create: {
     *     // ... data to create a BrandUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BrandUser we want to update
     *   }
     * })
     */
    upsert<T extends BrandUserUpsertArgs>(args: SelectSubset<T, BrandUserUpsertArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BrandUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUserCountArgs} args - Arguments to filter BrandUsers to count.
     * @example
     * // Count the number of BrandUsers
     * const count = await prisma.brandUser.count({
     *   where: {
     *     // ... the filter for the BrandUsers we want to count
     *   }
     * })
    **/
    count<T extends BrandUserCountArgs>(
      args?: Subset<T, BrandUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BrandUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandUserAggregateArgs>(args: Subset<T, BrandUserAggregateArgs>): Prisma.PrismaPromise<GetBrandUserAggregateType<T>>

    /**
     * Group by BrandUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandUserGroupByArgs['orderBy'] }
        : { orderBy?: BrandUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BrandUser model
   */
  readonly fields: BrandUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BrandUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    MerchantUser<T extends BrandUser$MerchantUserArgs<ExtArgs> = {}>(args?: Subset<T, BrandUser$MerchantUserArgs<ExtArgs>>): Prisma__MerchantUserClient<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BrandUser model
   */
  interface BrandUserFieldRefs {
    readonly id: FieldRef<"BrandUser", 'String'>
    readonly brandId: FieldRef<"BrandUser", 'String'>
    readonly merchantUserId: FieldRef<"BrandUser", 'String'>
    readonly brandRole: FieldRef<"BrandUser", 'BrandRole[]'>
    readonly createdAt: FieldRef<"BrandUser", 'DateTime'>
    readonly updatedAt: FieldRef<"BrandUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BrandUser findUnique
   */
  export type BrandUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * Filter, which BrandUser to fetch.
     */
    where: BrandUserWhereUniqueInput
  }

  /**
   * BrandUser findUniqueOrThrow
   */
  export type BrandUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * Filter, which BrandUser to fetch.
     */
    where: BrandUserWhereUniqueInput
  }

  /**
   * BrandUser findFirst
   */
  export type BrandUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * Filter, which BrandUser to fetch.
     */
    where?: BrandUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BrandUsers to fetch.
     */
    orderBy?: BrandUserOrderByWithRelationInput | BrandUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BrandUsers.
     */
    cursor?: BrandUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BrandUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BrandUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BrandUsers.
     */
    distinct?: BrandUserScalarFieldEnum | BrandUserScalarFieldEnum[]
  }

  /**
   * BrandUser findFirstOrThrow
   */
  export type BrandUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * Filter, which BrandUser to fetch.
     */
    where?: BrandUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BrandUsers to fetch.
     */
    orderBy?: BrandUserOrderByWithRelationInput | BrandUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BrandUsers.
     */
    cursor?: BrandUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BrandUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BrandUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BrandUsers.
     */
    distinct?: BrandUserScalarFieldEnum | BrandUserScalarFieldEnum[]
  }

  /**
   * BrandUser findMany
   */
  export type BrandUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * Filter, which BrandUsers to fetch.
     */
    where?: BrandUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BrandUsers to fetch.
     */
    orderBy?: BrandUserOrderByWithRelationInput | BrandUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BrandUsers.
     */
    cursor?: BrandUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BrandUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BrandUsers.
     */
    skip?: number
    distinct?: BrandUserScalarFieldEnum | BrandUserScalarFieldEnum[]
  }

  /**
   * BrandUser create
   */
  export type BrandUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * The data needed to create a BrandUser.
     */
    data: XOR<BrandUserCreateInput, BrandUserUncheckedCreateInput>
  }

  /**
   * BrandUser createMany
   */
  export type BrandUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BrandUsers.
     */
    data: BrandUserCreateManyInput | BrandUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BrandUser createManyAndReturn
   */
  export type BrandUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * The data used to create many BrandUsers.
     */
    data: BrandUserCreateManyInput | BrandUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BrandUser update
   */
  export type BrandUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * The data needed to update a BrandUser.
     */
    data: XOR<BrandUserUpdateInput, BrandUserUncheckedUpdateInput>
    /**
     * Choose, which BrandUser to update.
     */
    where: BrandUserWhereUniqueInput
  }

  /**
   * BrandUser updateMany
   */
  export type BrandUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BrandUsers.
     */
    data: XOR<BrandUserUpdateManyMutationInput, BrandUserUncheckedUpdateManyInput>
    /**
     * Filter which BrandUsers to update
     */
    where?: BrandUserWhereInput
    /**
     * Limit how many BrandUsers to update.
     */
    limit?: number
  }

  /**
   * BrandUser updateManyAndReturn
   */
  export type BrandUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * The data used to update BrandUsers.
     */
    data: XOR<BrandUserUpdateManyMutationInput, BrandUserUncheckedUpdateManyInput>
    /**
     * Filter which BrandUsers to update
     */
    where?: BrandUserWhereInput
    /**
     * Limit how many BrandUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BrandUser upsert
   */
  export type BrandUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * The filter to search for the BrandUser to update in case it exists.
     */
    where: BrandUserWhereUniqueInput
    /**
     * In case the BrandUser found by the `where` argument doesn't exist, create a new BrandUser with this data.
     */
    create: XOR<BrandUserCreateInput, BrandUserUncheckedCreateInput>
    /**
     * In case the BrandUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUserUpdateInput, BrandUserUncheckedUpdateInput>
  }

  /**
   * BrandUser delete
   */
  export type BrandUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    /**
     * Filter which BrandUser to delete.
     */
    where: BrandUserWhereUniqueInput
  }

  /**
   * BrandUser deleteMany
   */
  export type BrandUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BrandUsers to delete
     */
    where?: BrandUserWhereInput
    /**
     * Limit how many BrandUsers to delete.
     */
    limit?: number
  }

  /**
   * BrandUser.MerchantUser
   */
  export type BrandUser$MerchantUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    where?: MerchantUserWhereInput
  }

  /**
   * BrandUser without action
   */
  export type BrandUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
  }


  /**
   * Model Currency
   */

  export type AggregateCurrency = {
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  export type CurrencyAvgAggregateOutputType = {
    ISOnum: number | null
    ISOdigits: number | null
    decimals: number | null
    numToBasic: number | null
  }

  export type CurrencySumAggregateOutputType = {
    ISOnum: number | null
    ISOdigits: number | null
    decimals: number | null
    numToBasic: number | null
  }

  export type CurrencyMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    demonym: string | null
    majorSingle: string | null
    majorPlural: string | null
    ISOnum: number | null
    symbol: string | null
    symbolNative: string | null
    minorSingle: string | null
    minorPlural: string | null
    ISOdigits: number | null
    decimals: number | null
    numToBasic: number | null
  }

  export type CurrencyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    demonym: string | null
    majorSingle: string | null
    majorPlural: string | null
    ISOnum: number | null
    symbol: string | null
    symbolNative: string | null
    minorSingle: string | null
    minorPlural: string | null
    ISOdigits: number | null
    decimals: number | null
    numToBasic: number | null
  }

  export type CurrencyCountAggregateOutputType = {
    id: number
    name: number
    code: number
    demonym: number
    majorSingle: number
    majorPlural: number
    ISOnum: number
    symbol: number
    symbolNative: number
    minorSingle: number
    minorPlural: number
    ISOdigits: number
    decimals: number
    numToBasic: number
    _all: number
  }


  export type CurrencyAvgAggregateInputType = {
    ISOnum?: true
    ISOdigits?: true
    decimals?: true
    numToBasic?: true
  }

  export type CurrencySumAggregateInputType = {
    ISOnum?: true
    ISOdigits?: true
    decimals?: true
    numToBasic?: true
  }

  export type CurrencyMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    demonym?: true
    majorSingle?: true
    majorPlural?: true
    ISOnum?: true
    symbol?: true
    symbolNative?: true
    minorSingle?: true
    minorPlural?: true
    ISOdigits?: true
    decimals?: true
    numToBasic?: true
  }

  export type CurrencyMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    demonym?: true
    majorSingle?: true
    majorPlural?: true
    ISOnum?: true
    symbol?: true
    symbolNative?: true
    minorSingle?: true
    minorPlural?: true
    ISOdigits?: true
    decimals?: true
    numToBasic?: true
  }

  export type CurrencyCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    demonym?: true
    majorSingle?: true
    majorPlural?: true
    ISOnum?: true
    symbol?: true
    symbolNative?: true
    minorSingle?: true
    minorPlural?: true
    ISOdigits?: true
    decimals?: true
    numToBasic?: true
    _all?: true
  }

  export type CurrencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currency to aggregate.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Currencies
    **/
    _count?: true | CurrencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrencyMaxAggregateInputType
  }

  export type GetCurrencyAggregateType<T extends CurrencyAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrency[P]>
      : GetScalarType<T[P], AggregateCurrency[P]>
  }




  export type CurrencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyWhereInput
    orderBy?: CurrencyOrderByWithAggregationInput | CurrencyOrderByWithAggregationInput[]
    by: CurrencyScalarFieldEnum[] | CurrencyScalarFieldEnum
    having?: CurrencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrencyCountAggregateInputType | true
    _avg?: CurrencyAvgAggregateInputType
    _sum?: CurrencySumAggregateInputType
    _min?: CurrencyMinAggregateInputType
    _max?: CurrencyMaxAggregateInputType
  }

  export type CurrencyGroupByOutputType = {
    id: string
    name: string
    code: string
    demonym: string | null
    majorSingle: string | null
    majorPlural: string | null
    ISOnum: number | null
    symbol: string | null
    symbolNative: string
    minorSingle: string | null
    minorPlural: string | null
    ISOdigits: number | null
    decimals: number | null
    numToBasic: number | null
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  type GetCurrencyGroupByPayload<T extends CurrencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurrencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
            : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
        }
      >
    >


  export type CurrencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    demonym?: boolean
    majorSingle?: boolean
    majorPlural?: boolean
    ISOnum?: boolean
    symbol?: boolean
    symbolNative?: boolean
    minorSingle?: boolean
    minorPlural?: boolean
    ISOdigits?: boolean
    decimals?: boolean
    numToBasic?: boolean
    Store?: boolean | Currency$StoreArgs<ExtArgs>
    _count?: boolean | CurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    demonym?: boolean
    majorSingle?: boolean
    majorPlural?: boolean
    ISOnum?: boolean
    symbol?: boolean
    symbolNative?: boolean
    minorSingle?: boolean
    minorPlural?: boolean
    ISOdigits?: boolean
    decimals?: boolean
    numToBasic?: boolean
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    demonym?: boolean
    majorSingle?: boolean
    majorPlural?: boolean
    ISOnum?: boolean
    symbol?: boolean
    symbolNative?: boolean
    minorSingle?: boolean
    minorPlural?: boolean
    ISOdigits?: boolean
    decimals?: boolean
    numToBasic?: boolean
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    demonym?: boolean
    majorSingle?: boolean
    majorPlural?: boolean
    ISOnum?: boolean
    symbol?: boolean
    symbolNative?: boolean
    minorSingle?: boolean
    minorPlural?: boolean
    ISOdigits?: boolean
    decimals?: boolean
    numToBasic?: boolean
  }

  export type CurrencyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "demonym" | "majorSingle" | "majorPlural" | "ISOnum" | "symbol" | "symbolNative" | "minorSingle" | "minorPlural" | "ISOdigits" | "decimals" | "numToBasic", ExtArgs["result"]["currency"]>
  export type CurrencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Store?: boolean | Currency$StoreArgs<ExtArgs>
    _count?: boolean | CurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CurrencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CurrencyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CurrencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Currency"
    objects: {
      Store: Prisma.$StorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      demonym: string | null
      majorSingle: string | null
      majorPlural: string | null
      ISOnum: number | null
      symbol: string | null
      symbolNative: string
      minorSingle: string | null
      minorPlural: string | null
      ISOdigits: number | null
      decimals: number | null
      numToBasic: number | null
    }, ExtArgs["result"]["currency"]>
    composites: {}
  }

  type CurrencyGetPayload<S extends boolean | null | undefined | CurrencyDefaultArgs> = $Result.GetResult<Prisma.$CurrencyPayload, S>

  type CurrencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CurrencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CurrencyCountAggregateInputType | true
    }

  export interface CurrencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Currency'], meta: { name: 'Currency' } }
    /**
     * Find zero or one Currency that matches the filter.
     * @param {CurrencyFindUniqueArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CurrencyFindUniqueArgs>(args: SelectSubset<T, CurrencyFindUniqueArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Currency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CurrencyFindUniqueOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CurrencyFindUniqueOrThrowArgs>(args: SelectSubset<T, CurrencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CurrencyFindFirstArgs>(args?: SelectSubset<T, CurrencyFindFirstArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CurrencyFindFirstOrThrowArgs>(args?: SelectSubset<T, CurrencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Currencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Currencies
     * const currencies = await prisma.currency.findMany()
     * 
     * // Get first 10 Currencies
     * const currencies = await prisma.currency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currencyWithIdOnly = await prisma.currency.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CurrencyFindManyArgs>(args?: SelectSubset<T, CurrencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Currency.
     * @param {CurrencyCreateArgs} args - Arguments to create a Currency.
     * @example
     * // Create one Currency
     * const Currency = await prisma.currency.create({
     *   data: {
     *     // ... data to create a Currency
     *   }
     * })
     * 
     */
    create<T extends CurrencyCreateArgs>(args: SelectSubset<T, CurrencyCreateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Currencies.
     * @param {CurrencyCreateManyArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CurrencyCreateManyArgs>(args?: SelectSubset<T, CurrencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Currencies and returns the data saved in the database.
     * @param {CurrencyCreateManyAndReturnArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CurrencyCreateManyAndReturnArgs>(args?: SelectSubset<T, CurrencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Currency.
     * @param {CurrencyDeleteArgs} args - Arguments to delete one Currency.
     * @example
     * // Delete one Currency
     * const Currency = await prisma.currency.delete({
     *   where: {
     *     // ... filter to delete one Currency
     *   }
     * })
     * 
     */
    delete<T extends CurrencyDeleteArgs>(args: SelectSubset<T, CurrencyDeleteArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Currency.
     * @param {CurrencyUpdateArgs} args - Arguments to update one Currency.
     * @example
     * // Update one Currency
     * const currency = await prisma.currency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CurrencyUpdateArgs>(args: SelectSubset<T, CurrencyUpdateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Currencies.
     * @param {CurrencyDeleteManyArgs} args - Arguments to filter Currencies to delete.
     * @example
     * // Delete a few Currencies
     * const { count } = await prisma.currency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CurrencyDeleteManyArgs>(args?: SelectSubset<T, CurrencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CurrencyUpdateManyArgs>(args: SelectSubset<T, CurrencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies and returns the data updated in the database.
     * @param {CurrencyUpdateManyAndReturnArgs} args - Arguments to update many Currencies.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CurrencyUpdateManyAndReturnArgs>(args: SelectSubset<T, CurrencyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Currency.
     * @param {CurrencyUpsertArgs} args - Arguments to update or create a Currency.
     * @example
     * // Update or create a Currency
     * const currency = await prisma.currency.upsert({
     *   create: {
     *     // ... data to create a Currency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Currency we want to update
     *   }
     * })
     */
    upsert<T extends CurrencyUpsertArgs>(args: SelectSubset<T, CurrencyUpsertArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyCountArgs} args - Arguments to filter Currencies to count.
     * @example
     * // Count the number of Currencies
     * const count = await prisma.currency.count({
     *   where: {
     *     // ... the filter for the Currencies we want to count
     *   }
     * })
    **/
    count<T extends CurrencyCountArgs>(
      args?: Subset<T, CurrencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrencyAggregateArgs>(args: Subset<T, CurrencyAggregateArgs>): Prisma.PrismaPromise<GetCurrencyAggregateType<T>>

    /**
     * Group by Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrencyGroupByArgs['orderBy'] }
        : { orderBy?: CurrencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Currency model
   */
  readonly fields: CurrencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Currency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurrencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Store<T extends Currency$StoreArgs<ExtArgs> = {}>(args?: Subset<T, Currency$StoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Currency model
   */
  interface CurrencyFieldRefs {
    readonly id: FieldRef<"Currency", 'String'>
    readonly name: FieldRef<"Currency", 'String'>
    readonly code: FieldRef<"Currency", 'String'>
    readonly demonym: FieldRef<"Currency", 'String'>
    readonly majorSingle: FieldRef<"Currency", 'String'>
    readonly majorPlural: FieldRef<"Currency", 'String'>
    readonly ISOnum: FieldRef<"Currency", 'Int'>
    readonly symbol: FieldRef<"Currency", 'String'>
    readonly symbolNative: FieldRef<"Currency", 'String'>
    readonly minorSingle: FieldRef<"Currency", 'String'>
    readonly minorPlural: FieldRef<"Currency", 'String'>
    readonly ISOdigits: FieldRef<"Currency", 'Int'>
    readonly decimals: FieldRef<"Currency", 'Int'>
    readonly numToBasic: FieldRef<"Currency", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Currency findUnique
   */
  export type CurrencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findUniqueOrThrow
   */
  export type CurrencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findFirst
   */
  export type CurrencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findFirstOrThrow
   */
  export type CurrencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findMany
   */
  export type CurrencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currencies to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency create
   */
  export type CurrencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Currency.
     */
    data: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
  }

  /**
   * Currency createMany
   */
  export type CurrencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency createManyAndReturn
   */
  export type CurrencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency update
   */
  export type CurrencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Currency.
     */
    data: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
    /**
     * Choose, which Currency to update.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency updateMany
   */
  export type CurrencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency updateManyAndReturn
   */
  export type CurrencyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency upsert
   */
  export type CurrencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Currency to update in case it exists.
     */
    where: CurrencyWhereUniqueInput
    /**
     * In case the Currency found by the `where` argument doesn't exist, create a new Currency with this data.
     */
    create: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
    /**
     * In case the Currency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
  }

  /**
   * Currency delete
   */
  export type CurrencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter which Currency to delete.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency deleteMany
   */
  export type CurrencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currencies to delete
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to delete.
     */
    limit?: number
  }

  /**
   * Currency.Store
   */
  export type Currency$StoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    cursor?: StoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Currency without action
   */
  export type CurrencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
  }


  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryMinAggregateOutputType = {
    id: string | null
    isoCode: string | null
    name: string | null
    currency: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CountryMaxAggregateOutputType = {
    id: string | null
    isoCode: string | null
    name: string | null
    currency: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    isoCode: number
    name: number
    currency: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CountryMinAggregateInputType = {
    id?: true
    isoCode?: true
    name?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    isoCode?: true
    name?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    isoCode?: true
    name?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: string
    isoCode: string
    name: string
    currency: string
    createdAt: Date
    updatedAt: Date
    _count: CountryCountAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    name?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    states?: boolean | Country$statesArgs<ExtArgs>
    Merchants?: boolean | Country$MerchantsArgs<ExtArgs>
    store?: boolean | Country$storeArgs<ExtArgs>
    brand?: boolean | Country$brandArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    name?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["country"]>

  export type CountrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    name?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    isoCode?: boolean
    name?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CountryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isoCode" | "name" | "currency" | "createdAt" | "updatedAt", ExtArgs["result"]["country"]>
  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    states?: boolean | Country$statesArgs<ExtArgs>
    Merchants?: boolean | Country$MerchantsArgs<ExtArgs>
    store?: boolean | Country$storeArgs<ExtArgs>
    brand?: boolean | Country$brandArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CountryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CountryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      states: Prisma.$StatePayload<ExtArgs>[]
      Merchants: Prisma.$MerchantPayload<ExtArgs>[]
      store: Prisma.$StorePayload<ExtArgs>[]
      brand: Prisma.$BrandPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isoCode: string
      name: string
      currency: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountryFindUniqueArgs>(args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(args: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountryFindFirstArgs>(args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CountryFindManyArgs>(args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends CountryCreateArgs>(args: SelectSubset<T, CountryCreateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountryCreateManyArgs>(args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {CountryCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CountryCreateManyAndReturnArgs>(args?: SelectSubset<T, CountryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends CountryDeleteArgs>(args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountryUpdateArgs>(args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountryDeleteManyArgs>(args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountryUpdateManyArgs>(args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries and returns the data updated in the database.
     * @param {CountryUpdateManyAndReturnArgs} args - Arguments to update many Countries.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CountryUpdateManyAndReturnArgs>(args: SelectSubset<T, CountryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends CountryUpsertArgs>(args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    states<T extends Country$statesArgs<ExtArgs> = {}>(args?: Subset<T, Country$statesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Merchants<T extends Country$MerchantsArgs<ExtArgs> = {}>(args?: Subset<T, Country$MerchantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    store<T extends Country$storeArgs<ExtArgs> = {}>(args?: Subset<T, Country$storeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    brand<T extends Country$brandArgs<ExtArgs> = {}>(args?: Subset<T, Country$brandArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Country model
   */
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'String'>
    readonly isoCode: FieldRef<"Country", 'String'>
    readonly name: FieldRef<"Country", 'String'>
    readonly currency: FieldRef<"Country", 'String'>
    readonly createdAt: FieldRef<"Country", 'DateTime'>
    readonly updatedAt: FieldRef<"Country", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country createManyAndReturn
   */
  export type CountryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country updateManyAndReturn
   */
  export type CountryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to delete.
     */
    limit?: number
  }

  /**
   * Country.states
   */
  export type Country$statesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    where?: StateWhereInput
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    cursor?: StateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * Country.Merchants
   */
  export type Country$MerchantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    cursor?: MerchantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Country.store
   */
  export type Country$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    cursor?: StoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Country.brand
   */
  export type Country$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model State
   */

  export type AggregateState = {
    _count: StateCountAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  export type StateMinAggregateOutputType = {
    id: string | null
    isoCode: string | null
    name: string | null
    countryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StateMaxAggregateOutputType = {
    id: string | null
    isoCode: string | null
    name: string | null
    countryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StateCountAggregateOutputType = {
    id: number
    isoCode: number
    name: number
    countryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StateMinAggregateInputType = {
    id?: true
    isoCode?: true
    name?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StateMaxAggregateInputType = {
    id?: true
    isoCode?: true
    name?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StateCountAggregateInputType = {
    id?: true
    isoCode?: true
    name?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which State to aggregate.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned States
    **/
    _count?: true | StateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StateMaxAggregateInputType
  }

  export type GetStateAggregateType<T extends StateAggregateArgs> = {
        [P in keyof T & keyof AggregateState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateState[P]>
      : GetScalarType<T[P], AggregateState[P]>
  }




  export type StateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StateWhereInput
    orderBy?: StateOrderByWithAggregationInput | StateOrderByWithAggregationInput[]
    by: StateScalarFieldEnum[] | StateScalarFieldEnum
    having?: StateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StateCountAggregateInputType | true
    _min?: StateMinAggregateInputType
    _max?: StateMaxAggregateInputType
  }

  export type StateGroupByOutputType = {
    id: string
    isoCode: string
    name: string
    countryId: string
    createdAt: Date
    updatedAt: Date
    _count: StateCountAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  type GetStateGroupByPayload<T extends StateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StateGroupByOutputType[P]>
            : GetScalarType<T[P], StateGroupByOutputType[P]>
        }
      >
    >


  export type StateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    name?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    merchants?: boolean | State$merchantsArgs<ExtArgs>
    brands?: boolean | State$brandsArgs<ExtArgs>
    users?: boolean | State$usersArgs<ExtArgs>
    _count?: boolean | StateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["state"]>

  export type StateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    name?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["state"]>

  export type StateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    name?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["state"]>

  export type StateSelectScalar = {
    id?: boolean
    isoCode?: boolean
    name?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isoCode" | "name" | "countryId" | "createdAt" | "updatedAt", ExtArgs["result"]["state"]>
  export type StateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    merchants?: boolean | State$merchantsArgs<ExtArgs>
    brands?: boolean | State$brandsArgs<ExtArgs>
    users?: boolean | State$usersArgs<ExtArgs>
    _count?: boolean | StateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }
  export type StateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $StatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "State"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs>
      merchants: Prisma.$MerchantPayload<ExtArgs>[]
      brands: Prisma.$BrandPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isoCode: string
      name: string
      countryId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["state"]>
    composites: {}
  }

  type StateGetPayload<S extends boolean | null | undefined | StateDefaultArgs> = $Result.GetResult<Prisma.$StatePayload, S>

  type StateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StateCountAggregateInputType | true
    }

  export interface StateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['State'], meta: { name: 'State' } }
    /**
     * Find zero or one State that matches the filter.
     * @param {StateFindUniqueArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StateFindUniqueArgs>(args: SelectSubset<T, StateFindUniqueArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one State that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StateFindUniqueOrThrowArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StateFindUniqueOrThrowArgs>(args: SelectSubset<T, StateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first State that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StateFindFirstArgs>(args?: SelectSubset<T, StateFindFirstArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first State that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstOrThrowArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StateFindFirstOrThrowArgs>(args?: SelectSubset<T, StateFindFirstOrThrowArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more States that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all States
     * const states = await prisma.state.findMany()
     * 
     * // Get first 10 States
     * const states = await prisma.state.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stateWithIdOnly = await prisma.state.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StateFindManyArgs>(args?: SelectSubset<T, StateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a State.
     * @param {StateCreateArgs} args - Arguments to create a State.
     * @example
     * // Create one State
     * const State = await prisma.state.create({
     *   data: {
     *     // ... data to create a State
     *   }
     * })
     * 
     */
    create<T extends StateCreateArgs>(args: SelectSubset<T, StateCreateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many States.
     * @param {StateCreateManyArgs} args - Arguments to create many States.
     * @example
     * // Create many States
     * const state = await prisma.state.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StateCreateManyArgs>(args?: SelectSubset<T, StateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many States and returns the data saved in the database.
     * @param {StateCreateManyAndReturnArgs} args - Arguments to create many States.
     * @example
     * // Create many States
     * const state = await prisma.state.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many States and only return the `id`
     * const stateWithIdOnly = await prisma.state.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StateCreateManyAndReturnArgs>(args?: SelectSubset<T, StateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a State.
     * @param {StateDeleteArgs} args - Arguments to delete one State.
     * @example
     * // Delete one State
     * const State = await prisma.state.delete({
     *   where: {
     *     // ... filter to delete one State
     *   }
     * })
     * 
     */
    delete<T extends StateDeleteArgs>(args: SelectSubset<T, StateDeleteArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one State.
     * @param {StateUpdateArgs} args - Arguments to update one State.
     * @example
     * // Update one State
     * const state = await prisma.state.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StateUpdateArgs>(args: SelectSubset<T, StateUpdateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more States.
     * @param {StateDeleteManyArgs} args - Arguments to filter States to delete.
     * @example
     * // Delete a few States
     * const { count } = await prisma.state.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StateDeleteManyArgs>(args?: SelectSubset<T, StateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many States
     * const state = await prisma.state.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StateUpdateManyArgs>(args: SelectSubset<T, StateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more States and returns the data updated in the database.
     * @param {StateUpdateManyAndReturnArgs} args - Arguments to update many States.
     * @example
     * // Update many States
     * const state = await prisma.state.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more States and only return the `id`
     * const stateWithIdOnly = await prisma.state.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StateUpdateManyAndReturnArgs>(args: SelectSubset<T, StateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one State.
     * @param {StateUpsertArgs} args - Arguments to update or create a State.
     * @example
     * // Update or create a State
     * const state = await prisma.state.upsert({
     *   create: {
     *     // ... data to create a State
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the State we want to update
     *   }
     * })
     */
    upsert<T extends StateUpsertArgs>(args: SelectSubset<T, StateUpsertArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateCountArgs} args - Arguments to filter States to count.
     * @example
     * // Count the number of States
     * const count = await prisma.state.count({
     *   where: {
     *     // ... the filter for the States we want to count
     *   }
     * })
    **/
    count<T extends StateCountArgs>(
      args?: Subset<T, StateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StateAggregateArgs>(args: Subset<T, StateAggregateArgs>): Prisma.PrismaPromise<GetStateAggregateType<T>>

    /**
     * Group by State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StateGroupByArgs['orderBy'] }
        : { orderBy?: StateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the State model
   */
  readonly fields: StateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for State.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    merchants<T extends State$merchantsArgs<ExtArgs> = {}>(args?: Subset<T, State$merchantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    brands<T extends State$brandsArgs<ExtArgs> = {}>(args?: Subset<T, State$brandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends State$usersArgs<ExtArgs> = {}>(args?: Subset<T, State$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the State model
   */
  interface StateFieldRefs {
    readonly id: FieldRef<"State", 'String'>
    readonly isoCode: FieldRef<"State", 'String'>
    readonly name: FieldRef<"State", 'String'>
    readonly countryId: FieldRef<"State", 'String'>
    readonly createdAt: FieldRef<"State", 'DateTime'>
    readonly updatedAt: FieldRef<"State", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * State findUnique
   */
  export type StateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State findUniqueOrThrow
   */
  export type StateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State findFirst
   */
  export type StateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     */
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State findFirstOrThrow
   */
  export type StateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     */
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State findMany
   */
  export type StateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which States to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State create
   */
  export type StateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The data needed to create a State.
     */
    data: XOR<StateCreateInput, StateUncheckedCreateInput>
  }

  /**
   * State createMany
   */
  export type StateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many States.
     */
    data: StateCreateManyInput | StateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * State createManyAndReturn
   */
  export type StateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * The data used to create many States.
     */
    data: StateCreateManyInput | StateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * State update
   */
  export type StateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The data needed to update a State.
     */
    data: XOR<StateUpdateInput, StateUncheckedUpdateInput>
    /**
     * Choose, which State to update.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State updateMany
   */
  export type StateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update States.
     */
    data: XOR<StateUpdateManyMutationInput, StateUncheckedUpdateManyInput>
    /**
     * Filter which States to update
     */
    where?: StateWhereInput
    /**
     * Limit how many States to update.
     */
    limit?: number
  }

  /**
   * State updateManyAndReturn
   */
  export type StateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * The data used to update States.
     */
    data: XOR<StateUpdateManyMutationInput, StateUncheckedUpdateManyInput>
    /**
     * Filter which States to update
     */
    where?: StateWhereInput
    /**
     * Limit how many States to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * State upsert
   */
  export type StateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The filter to search for the State to update in case it exists.
     */
    where: StateWhereUniqueInput
    /**
     * In case the State found by the `where` argument doesn't exist, create a new State with this data.
     */
    create: XOR<StateCreateInput, StateUncheckedCreateInput>
    /**
     * In case the State was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StateUpdateInput, StateUncheckedUpdateInput>
  }

  /**
   * State delete
   */
  export type StateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter which State to delete.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State deleteMany
   */
  export type StateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which States to delete
     */
    where?: StateWhereInput
    /**
     * Limit how many States to delete.
     */
    limit?: number
  }

  /**
   * State.merchants
   */
  export type State$merchantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    cursor?: MerchantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * State.brands
   */
  export type State$brandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * State.users
   */
  export type State$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * State without action
   */
  export type StateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the State
     */
    omit?: StateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
  }


  /**
   * Model Merchant
   */

  export type AggregateMerchant = {
    _count: MerchantCountAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  export type MerchantMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    status: $Enums.Status | null
    phoneNumber: string | null
    genericEmail: string | null
    invoiceEmail: string | null
    address1: string | null
    address2: string | null
    suburb: string | null
    postcode: string | null
    stateId: string | null
    countryId: string | null
    abn: string | null
    acn: string | null
    logoUrl: string | null
    primaryContactId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MerchantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    status: $Enums.Status | null
    phoneNumber: string | null
    genericEmail: string | null
    invoiceEmail: string | null
    address1: string | null
    address2: string | null
    suburb: string | null
    postcode: string | null
    stateId: string | null
    countryId: string | null
    abn: string | null
    acn: string | null
    logoUrl: string | null
    primaryContactId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MerchantCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    status: number
    phoneNumber: number
    genericEmail: number
    invoiceEmail: number
    address1: number
    address2: number
    suburb: number
    postcode: number
    stateId: number
    countryId: number
    abn: number
    acn: number
    logoUrl: number
    primaryContactId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MerchantMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    phoneNumber?: true
    genericEmail?: true
    invoiceEmail?: true
    address1?: true
    address2?: true
    suburb?: true
    postcode?: true
    stateId?: true
    countryId?: true
    abn?: true
    acn?: true
    logoUrl?: true
    primaryContactId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MerchantMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    phoneNumber?: true
    genericEmail?: true
    invoiceEmail?: true
    address1?: true
    address2?: true
    suburb?: true
    postcode?: true
    stateId?: true
    countryId?: true
    abn?: true
    acn?: true
    logoUrl?: true
    primaryContactId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MerchantCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    phoneNumber?: true
    genericEmail?: true
    invoiceEmail?: true
    address1?: true
    address2?: true
    suburb?: true
    postcode?: true
    stateId?: true
    countryId?: true
    abn?: true
    acn?: true
    logoUrl?: true
    primaryContactId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MerchantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Merchant to aggregate.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Merchants
    **/
    _count?: true | MerchantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerchantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerchantMaxAggregateInputType
  }

  export type GetMerchantAggregateType<T extends MerchantAggregateArgs> = {
        [P in keyof T & keyof AggregateMerchant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerchant[P]>
      : GetScalarType<T[P], AggregateMerchant[P]>
  }




  export type MerchantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithAggregationInput | MerchantOrderByWithAggregationInput[]
    by: MerchantScalarFieldEnum[] | MerchantScalarFieldEnum
    having?: MerchantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerchantCountAggregateInputType | true
    _min?: MerchantMinAggregateInputType
    _max?: MerchantMaxAggregateInputType
  }

  export type MerchantGroupByOutputType = {
    id: string
    name: string
    slug: string
    status: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail: string | null
    address1: string
    address2: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn: string
    acn: string
    logoUrl: string | null
    primaryContactId: string | null
    createdAt: Date
    updatedAt: Date
    _count: MerchantCountAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  type GetMerchantGroupByPayload<T extends MerchantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerchantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerchantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerchantGroupByOutputType[P]>
            : GetScalarType<T[P], MerchantGroupByOutputType[P]>
        }
      >
    >


  export type MerchantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    phoneNumber?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    address1?: boolean
    address2?: boolean
    suburb?: boolean
    postcode?: boolean
    stateId?: boolean
    countryId?: boolean
    abn?: boolean
    acn?: boolean
    logoUrl?: boolean
    primaryContactId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Merchant$primaryContactArgs<ExtArgs>
    brands?: boolean | Merchant$brandsArgs<ExtArgs>
    merchantUser?: boolean | Merchant$merchantUserArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>

  export type MerchantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    phoneNumber?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    address1?: boolean
    address2?: boolean
    suburb?: boolean
    postcode?: boolean
    stateId?: boolean
    countryId?: boolean
    abn?: boolean
    acn?: boolean
    logoUrl?: boolean
    primaryContactId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Merchant$primaryContactArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>

  export type MerchantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    phoneNumber?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    address1?: boolean
    address2?: boolean
    suburb?: boolean
    postcode?: boolean
    stateId?: boolean
    countryId?: boolean
    abn?: boolean
    acn?: boolean
    logoUrl?: boolean
    primaryContactId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Merchant$primaryContactArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>

  export type MerchantSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    phoneNumber?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    address1?: boolean
    address2?: boolean
    suburb?: boolean
    postcode?: boolean
    stateId?: boolean
    countryId?: boolean
    abn?: boolean
    acn?: boolean
    logoUrl?: boolean
    primaryContactId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MerchantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "status" | "phoneNumber" | "genericEmail" | "invoiceEmail" | "address1" | "address2" | "suburb" | "postcode" | "stateId" | "countryId" | "abn" | "acn" | "logoUrl" | "primaryContactId" | "createdAt" | "updatedAt", ExtArgs["result"]["merchant"]>
  export type MerchantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Merchant$primaryContactArgs<ExtArgs>
    brands?: boolean | Merchant$brandsArgs<ExtArgs>
    merchantUser?: boolean | Merchant$merchantUserArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MerchantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Merchant$primaryContactArgs<ExtArgs>
  }
  export type MerchantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Merchant$primaryContactArgs<ExtArgs>
  }

  export type $MerchantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Merchant"
    objects: {
      state: Prisma.$StatePayload<ExtArgs>
      country: Prisma.$CountryPayload<ExtArgs>
      primaryContact: Prisma.$UserPayload<ExtArgs> | null
      brands: Prisma.$BrandPayload<ExtArgs>[]
      merchantUser: Prisma.$MerchantUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      status: $Enums.Status
      phoneNumber: string
      genericEmail: string
      invoiceEmail: string | null
      address1: string
      address2: string | null
      suburb: string
      postcode: string
      stateId: string
      countryId: string
      abn: string
      acn: string
      logoUrl: string | null
      primaryContactId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["merchant"]>
    composites: {}
  }

  type MerchantGetPayload<S extends boolean | null | undefined | MerchantDefaultArgs> = $Result.GetResult<Prisma.$MerchantPayload, S>

  type MerchantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MerchantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MerchantCountAggregateInputType | true
    }

  export interface MerchantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Merchant'], meta: { name: 'Merchant' } }
    /**
     * Find zero or one Merchant that matches the filter.
     * @param {MerchantFindUniqueArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MerchantFindUniqueArgs>(args: SelectSubset<T, MerchantFindUniqueArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Merchant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MerchantFindUniqueOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MerchantFindUniqueOrThrowArgs>(args: SelectSubset<T, MerchantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Merchant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindFirstArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MerchantFindFirstArgs>(args?: SelectSubset<T, MerchantFindFirstArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Merchant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindFirstOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MerchantFindFirstOrThrowArgs>(args?: SelectSubset<T, MerchantFindFirstOrThrowArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Merchants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Merchants
     * const merchants = await prisma.merchant.findMany()
     * 
     * // Get first 10 Merchants
     * const merchants = await prisma.merchant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const merchantWithIdOnly = await prisma.merchant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MerchantFindManyArgs>(args?: SelectSubset<T, MerchantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Merchant.
     * @param {MerchantCreateArgs} args - Arguments to create a Merchant.
     * @example
     * // Create one Merchant
     * const Merchant = await prisma.merchant.create({
     *   data: {
     *     // ... data to create a Merchant
     *   }
     * })
     * 
     */
    create<T extends MerchantCreateArgs>(args: SelectSubset<T, MerchantCreateArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Merchants.
     * @param {MerchantCreateManyArgs} args - Arguments to create many Merchants.
     * @example
     * // Create many Merchants
     * const merchant = await prisma.merchant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MerchantCreateManyArgs>(args?: SelectSubset<T, MerchantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Merchants and returns the data saved in the database.
     * @param {MerchantCreateManyAndReturnArgs} args - Arguments to create many Merchants.
     * @example
     * // Create many Merchants
     * const merchant = await prisma.merchant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Merchants and only return the `id`
     * const merchantWithIdOnly = await prisma.merchant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MerchantCreateManyAndReturnArgs>(args?: SelectSubset<T, MerchantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Merchant.
     * @param {MerchantDeleteArgs} args - Arguments to delete one Merchant.
     * @example
     * // Delete one Merchant
     * const Merchant = await prisma.merchant.delete({
     *   where: {
     *     // ... filter to delete one Merchant
     *   }
     * })
     * 
     */
    delete<T extends MerchantDeleteArgs>(args: SelectSubset<T, MerchantDeleteArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Merchant.
     * @param {MerchantUpdateArgs} args - Arguments to update one Merchant.
     * @example
     * // Update one Merchant
     * const merchant = await prisma.merchant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MerchantUpdateArgs>(args: SelectSubset<T, MerchantUpdateArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Merchants.
     * @param {MerchantDeleteManyArgs} args - Arguments to filter Merchants to delete.
     * @example
     * // Delete a few Merchants
     * const { count } = await prisma.merchant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MerchantDeleteManyArgs>(args?: SelectSubset<T, MerchantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Merchants
     * const merchant = await prisma.merchant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MerchantUpdateManyArgs>(args: SelectSubset<T, MerchantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Merchants and returns the data updated in the database.
     * @param {MerchantUpdateManyAndReturnArgs} args - Arguments to update many Merchants.
     * @example
     * // Update many Merchants
     * const merchant = await prisma.merchant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Merchants and only return the `id`
     * const merchantWithIdOnly = await prisma.merchant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MerchantUpdateManyAndReturnArgs>(args: SelectSubset<T, MerchantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Merchant.
     * @param {MerchantUpsertArgs} args - Arguments to update or create a Merchant.
     * @example
     * // Update or create a Merchant
     * const merchant = await prisma.merchant.upsert({
     *   create: {
     *     // ... data to create a Merchant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Merchant we want to update
     *   }
     * })
     */
    upsert<T extends MerchantUpsertArgs>(args: SelectSubset<T, MerchantUpsertArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantCountArgs} args - Arguments to filter Merchants to count.
     * @example
     * // Count the number of Merchants
     * const count = await prisma.merchant.count({
     *   where: {
     *     // ... the filter for the Merchants we want to count
     *   }
     * })
    **/
    count<T extends MerchantCountArgs>(
      args?: Subset<T, MerchantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerchantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerchantAggregateArgs>(args: Subset<T, MerchantAggregateArgs>): Prisma.PrismaPromise<GetMerchantAggregateType<T>>

    /**
     * Group by Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MerchantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MerchantGroupByArgs['orderBy'] }
        : { orderBy?: MerchantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MerchantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerchantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Merchant model
   */
  readonly fields: MerchantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Merchant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MerchantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    state<T extends StateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StateDefaultArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    primaryContact<T extends Merchant$primaryContactArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$primaryContactArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    brands<T extends Merchant$brandsArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$brandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    merchantUser<T extends Merchant$merchantUserArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$merchantUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Merchant model
   */
  interface MerchantFieldRefs {
    readonly id: FieldRef<"Merchant", 'String'>
    readonly name: FieldRef<"Merchant", 'String'>
    readonly slug: FieldRef<"Merchant", 'String'>
    readonly status: FieldRef<"Merchant", 'Status'>
    readonly phoneNumber: FieldRef<"Merchant", 'String'>
    readonly genericEmail: FieldRef<"Merchant", 'String'>
    readonly invoiceEmail: FieldRef<"Merchant", 'String'>
    readonly address1: FieldRef<"Merchant", 'String'>
    readonly address2: FieldRef<"Merchant", 'String'>
    readonly suburb: FieldRef<"Merchant", 'String'>
    readonly postcode: FieldRef<"Merchant", 'String'>
    readonly stateId: FieldRef<"Merchant", 'String'>
    readonly countryId: FieldRef<"Merchant", 'String'>
    readonly abn: FieldRef<"Merchant", 'String'>
    readonly acn: FieldRef<"Merchant", 'String'>
    readonly logoUrl: FieldRef<"Merchant", 'String'>
    readonly primaryContactId: FieldRef<"Merchant", 'String'>
    readonly createdAt: FieldRef<"Merchant", 'DateTime'>
    readonly updatedAt: FieldRef<"Merchant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Merchant findUnique
   */
  export type MerchantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant findUniqueOrThrow
   */
  export type MerchantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant findFirst
   */
  export type MerchantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant findFirstOrThrow
   */
  export type MerchantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant findMany
   */
  export type MerchantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchants to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant create
   */
  export type MerchantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The data needed to create a Merchant.
     */
    data: XOR<MerchantCreateInput, MerchantUncheckedCreateInput>
  }

  /**
   * Merchant createMany
   */
  export type MerchantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Merchants.
     */
    data: MerchantCreateManyInput | MerchantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Merchant createManyAndReturn
   */
  export type MerchantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * The data used to create many Merchants.
     */
    data: MerchantCreateManyInput | MerchantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Merchant update
   */
  export type MerchantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The data needed to update a Merchant.
     */
    data: XOR<MerchantUpdateInput, MerchantUncheckedUpdateInput>
    /**
     * Choose, which Merchant to update.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant updateMany
   */
  export type MerchantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Merchants.
     */
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyInput>
    /**
     * Filter which Merchants to update
     */
    where?: MerchantWhereInput
    /**
     * Limit how many Merchants to update.
     */
    limit?: number
  }

  /**
   * Merchant updateManyAndReturn
   */
  export type MerchantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * The data used to update Merchants.
     */
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyInput>
    /**
     * Filter which Merchants to update
     */
    where?: MerchantWhereInput
    /**
     * Limit how many Merchants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Merchant upsert
   */
  export type MerchantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The filter to search for the Merchant to update in case it exists.
     */
    where: MerchantWhereUniqueInput
    /**
     * In case the Merchant found by the `where` argument doesn't exist, create a new Merchant with this data.
     */
    create: XOR<MerchantCreateInput, MerchantUncheckedCreateInput>
    /**
     * In case the Merchant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MerchantUpdateInput, MerchantUncheckedUpdateInput>
  }

  /**
   * Merchant delete
   */
  export type MerchantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter which Merchant to delete.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant deleteMany
   */
  export type MerchantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Merchants to delete
     */
    where?: MerchantWhereInput
    /**
     * Limit how many Merchants to delete.
     */
    limit?: number
  }

  /**
   * Merchant.primaryContact
   */
  export type Merchant$primaryContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Merchant.brands
   */
  export type Merchant$brandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Merchant.merchantUser
   */
  export type Merchant$merchantUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantUser
     */
    select?: MerchantUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MerchantUser
     */
    omit?: MerchantUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantUserInclude<ExtArgs> | null
    where?: MerchantUserWhereInput
    orderBy?: MerchantUserOrderByWithRelationInput | MerchantUserOrderByWithRelationInput[]
    cursor?: MerchantUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantUserScalarFieldEnum | MerchantUserScalarFieldEnum[]
  }

  /**
   * Merchant without action
   */
  export type MerchantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    status: $Enums.Status | null
    merchantId: string | null
    name: string | null
    slug: string | null
    genericEmail: string | null
    invoiceEmail: string | null
    tradingAsName: string | null
    logoUrl: string | null
    address1: string | null
    address2: string | null
    suburb: string | null
    postcode: string | null
    stateId: string | null
    countryId: string | null
    abn: string | null
    acn: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    primaryContactId: string | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    status: $Enums.Status | null
    merchantId: string | null
    name: string | null
    slug: string | null
    genericEmail: string | null
    invoiceEmail: string | null
    tradingAsName: string | null
    logoUrl: string | null
    address1: string | null
    address2: string | null
    suburb: string | null
    postcode: string | null
    stateId: string | null
    countryId: string | null
    abn: string | null
    acn: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    primaryContactId: string | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    status: number
    merchantId: number
    name: number
    slug: number
    genericEmail: number
    invoiceEmail: number
    tradingAsName: number
    logoUrl: number
    address1: number
    address2: number
    suburb: number
    postcode: number
    stateId: number
    countryId: number
    abn: number
    acn: number
    phoneNumber: number
    createdAt: number
    updatedAt: number
    primaryContactId: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    status?: true
    merchantId?: true
    name?: true
    slug?: true
    genericEmail?: true
    invoiceEmail?: true
    tradingAsName?: true
    logoUrl?: true
    address1?: true
    address2?: true
    suburb?: true
    postcode?: true
    stateId?: true
    countryId?: true
    abn?: true
    acn?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    primaryContactId?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    status?: true
    merchantId?: true
    name?: true
    slug?: true
    genericEmail?: true
    invoiceEmail?: true
    tradingAsName?: true
    logoUrl?: true
    address1?: true
    address2?: true
    suburb?: true
    postcode?: true
    stateId?: true
    countryId?: true
    abn?: true
    acn?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    primaryContactId?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    status?: true
    merchantId?: true
    name?: true
    slug?: true
    genericEmail?: true
    invoiceEmail?: true
    tradingAsName?: true
    logoUrl?: true
    address1?: true
    address2?: true
    suburb?: true
    postcode?: true
    stateId?: true
    countryId?: true
    abn?: true
    acn?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    primaryContactId?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: string
    status: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn: string | null
    acn: string | null
    phoneNumber: string
    createdAt: Date
    updatedAt: Date
    primaryContactId: string | null
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    merchantId?: boolean
    name?: boolean
    slug?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    tradingAsName?: boolean
    logoUrl?: boolean
    address1?: boolean
    address2?: boolean
    suburb?: boolean
    postcode?: boolean
    stateId?: boolean
    countryId?: boolean
    abn?: boolean
    acn?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    primaryContactId?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Brand$primaryContactArgs<ExtArgs>
    stores?: boolean | Brand$storesArgs<ExtArgs>
    BrandUser?: boolean | Brand$BrandUserArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    merchantId?: boolean
    name?: boolean
    slug?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    tradingAsName?: boolean
    logoUrl?: boolean
    address1?: boolean
    address2?: boolean
    suburb?: boolean
    postcode?: boolean
    stateId?: boolean
    countryId?: boolean
    abn?: boolean
    acn?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    primaryContactId?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Brand$primaryContactArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    merchantId?: boolean
    name?: boolean
    slug?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    tradingAsName?: boolean
    logoUrl?: boolean
    address1?: boolean
    address2?: boolean
    suburb?: boolean
    postcode?: boolean
    stateId?: boolean
    countryId?: boolean
    abn?: boolean
    acn?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    primaryContactId?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Brand$primaryContactArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectScalar = {
    id?: boolean
    status?: boolean
    merchantId?: boolean
    name?: boolean
    slug?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    tradingAsName?: boolean
    logoUrl?: boolean
    address1?: boolean
    address2?: boolean
    suburb?: boolean
    postcode?: boolean
    stateId?: boolean
    countryId?: boolean
    abn?: boolean
    acn?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    primaryContactId?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "merchantId" | "name" | "slug" | "genericEmail" | "invoiceEmail" | "tradingAsName" | "logoUrl" | "address1" | "address2" | "suburb" | "postcode" | "stateId" | "countryId" | "abn" | "acn" | "phoneNumber" | "createdAt" | "updatedAt" | "primaryContactId", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Brand$primaryContactArgs<ExtArgs>
    stores?: boolean | Brand$storesArgs<ExtArgs>
    BrandUser?: boolean | Brand$BrandUserArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Brand$primaryContactArgs<ExtArgs>
  }
  export type BrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    state?: boolean | StateDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    primaryContact?: boolean | Brand$primaryContactArgs<ExtArgs>
  }

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      merchant: Prisma.$MerchantPayload<ExtArgs>
      state: Prisma.$StatePayload<ExtArgs>
      country: Prisma.$CountryPayload<ExtArgs>
      primaryContact: Prisma.$UserPayload<ExtArgs> | null
      stores: Prisma.$StorePayload<ExtArgs>[]
      BrandUser: Prisma.$BrandUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.Status
      merchantId: string
      name: string
      slug: string
      genericEmail: string
      invoiceEmail: string | null
      tradingAsName: string
      logoUrl: string
      address1: string
      address2: string | null
      suburb: string
      postcode: string
      stateId: string
      countryId: string
      abn: string | null
      acn: string | null
      phoneNumber: string
      createdAt: Date
      updatedAt: Date
      primaryContactId: string | null
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brands and returns the data saved in the database.
     * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands and returns the data updated in the database.
     * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    merchant<T extends MerchantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MerchantDefaultArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    state<T extends StateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StateDefaultArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    primaryContact<T extends Brand$primaryContactArgs<ExtArgs> = {}>(args?: Subset<T, Brand$primaryContactArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    stores<T extends Brand$storesArgs<ExtArgs> = {}>(args?: Subset<T, Brand$storesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BrandUser<T extends Brand$BrandUserArgs<ExtArgs> = {}>(args?: Subset<T, Brand$BrandUserArgs<ExtArgs>>): Prisma__BrandUserClient<$Result.GetResult<Prisma.$BrandUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'String'>
    readonly status: FieldRef<"Brand", 'Status'>
    readonly merchantId: FieldRef<"Brand", 'String'>
    readonly name: FieldRef<"Brand", 'String'>
    readonly slug: FieldRef<"Brand", 'String'>
    readonly genericEmail: FieldRef<"Brand", 'String'>
    readonly invoiceEmail: FieldRef<"Brand", 'String'>
    readonly tradingAsName: FieldRef<"Brand", 'String'>
    readonly logoUrl: FieldRef<"Brand", 'String'>
    readonly address1: FieldRef<"Brand", 'String'>
    readonly address2: FieldRef<"Brand", 'String'>
    readonly suburb: FieldRef<"Brand", 'String'>
    readonly postcode: FieldRef<"Brand", 'String'>
    readonly stateId: FieldRef<"Brand", 'String'>
    readonly countryId: FieldRef<"Brand", 'String'>
    readonly abn: FieldRef<"Brand", 'String'>
    readonly acn: FieldRef<"Brand", 'String'>
    readonly phoneNumber: FieldRef<"Brand", 'String'>
    readonly createdAt: FieldRef<"Brand", 'DateTime'>
    readonly updatedAt: FieldRef<"Brand", 'DateTime'>
    readonly primaryContactId: FieldRef<"Brand", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand createManyAndReturn
   */
  export type BrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand updateManyAndReturn
   */
  export type BrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.primaryContact
   */
  export type Brand$primaryContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Brand.stores
   */
  export type Brand$storesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    cursor?: StoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Brand.BrandUser
   */
  export type Brand$BrandUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandUser
     */
    select?: BrandUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BrandUser
     */
    omit?: BrandUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandUserInclude<ExtArgs> | null
    where?: BrandUserWhereInput
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Store
   */

  export type AggregateStore = {
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  export type StoreAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type StoreSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type StoreMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    status: $Enums.Status | null
    brandId: string | null
    address1: string | null
    address2: string | null
    city: string | null
    region: string | null
    postalCode: string | null
    countryId: string | null
    formattedAddress: string | null
    latitude: number | null
    longitude: number | null
    abn: string | null
    acn: string | null
    phoneNumber: string | null
    currencyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoreMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    status: $Enums.Status | null
    brandId: string | null
    address1: string | null
    address2: string | null
    city: string | null
    region: string | null
    postalCode: string | null
    countryId: string | null
    formattedAddress: string | null
    latitude: number | null
    longitude: number | null
    abn: string | null
    acn: string | null
    phoneNumber: string | null
    currencyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoreCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    status: number
    brandId: number
    address1: number
    address2: number
    city: number
    region: number
    postalCode: number
    countryId: number
    formattedAddress: number
    latitude: number
    longitude: number
    abn: number
    acn: number
    phoneNumber: number
    currencyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StoreAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type StoreSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type StoreMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    brandId?: true
    address1?: true
    address2?: true
    city?: true
    region?: true
    postalCode?: true
    countryId?: true
    formattedAddress?: true
    latitude?: true
    longitude?: true
    abn?: true
    acn?: true
    phoneNumber?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoreMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    brandId?: true
    address1?: true
    address2?: true
    city?: true
    region?: true
    postalCode?: true
    countryId?: true
    formattedAddress?: true
    latitude?: true
    longitude?: true
    abn?: true
    acn?: true
    phoneNumber?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoreCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    brandId?: true
    address1?: true
    address2?: true
    city?: true
    region?: true
    postalCode?: true
    countryId?: true
    formattedAddress?: true
    latitude?: true
    longitude?: true
    abn?: true
    acn?: true
    phoneNumber?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Store to aggregate.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stores
    **/
    _count?: true | StoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreMaxAggregateInputType
  }

  export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
        [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStore[P]>
      : GetScalarType<T[P], AggregateStore[P]>
  }




  export type StoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithAggregationInput | StoreOrderByWithAggregationInput[]
    by: StoreScalarFieldEnum[] | StoreScalarFieldEnum
    having?: StoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreCountAggregateInputType | true
    _avg?: StoreAvgAggregateInputType
    _sum?: StoreSumAggregateInputType
    _min?: StoreMinAggregateInputType
    _max?: StoreMaxAggregateInputType
  }

  export type StoreGroupByOutputType = {
    id: string
    name: string
    slug: string
    status: $Enums.Status
    brandId: string
    address1: string
    address2: string | null
    city: string
    region: string
    postalCode: string
    countryId: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn: string | null
    acn: string | null
    phoneNumber: string
    currencyId: string
    createdAt: Date
    updatedAt: Date
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  type GetStoreGroupByPayload<T extends StoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreGroupByOutputType[P]>
            : GetScalarType<T[P], StoreGroupByOutputType[P]>
        }
      >
    >


  export type StoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    brandId?: boolean
    address1?: boolean
    address2?: boolean
    city?: boolean
    region?: boolean
    postalCode?: boolean
    countryId?: boolean
    formattedAddress?: boolean
    latitude?: boolean
    longitude?: boolean
    abn?: boolean
    acn?: boolean
    phoneNumber?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    receipts?: boolean | Store$receiptsArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    brandId?: boolean
    address1?: boolean
    address2?: boolean
    city?: boolean
    region?: boolean
    postalCode?: boolean
    countryId?: boolean
    formattedAddress?: boolean
    latitude?: boolean
    longitude?: boolean
    abn?: boolean
    acn?: boolean
    phoneNumber?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    brandId?: boolean
    address1?: boolean
    address2?: boolean
    city?: boolean
    region?: boolean
    postalCode?: boolean
    countryId?: boolean
    formattedAddress?: boolean
    latitude?: boolean
    longitude?: boolean
    abn?: boolean
    acn?: boolean
    phoneNumber?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    brandId?: boolean
    address1?: boolean
    address2?: boolean
    city?: boolean
    region?: boolean
    postalCode?: boolean
    countryId?: boolean
    formattedAddress?: boolean
    latitude?: boolean
    longitude?: boolean
    abn?: boolean
    acn?: boolean
    phoneNumber?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "status" | "brandId" | "address1" | "address2" | "city" | "region" | "postalCode" | "countryId" | "formattedAddress" | "latitude" | "longitude" | "abn" | "acn" | "phoneNumber" | "currencyId" | "createdAt" | "updatedAt", ExtArgs["result"]["store"]>
  export type StoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    receipts?: boolean | Store$receiptsArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }
  export type StoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }

  export type $StorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Store"
    objects: {
      brand: Prisma.$BrandPayload<ExtArgs>
      country: Prisma.$CountryPayload<ExtArgs>
      currency: Prisma.$CurrencyPayload<ExtArgs>
      receipts: Prisma.$ReceiptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      status: $Enums.Status
      brandId: string
      address1: string
      address2: string | null
      city: string
      region: string
      postalCode: string
      countryId: string
      formattedAddress: string
      latitude: number
      longitude: number
      abn: string | null
      acn: string | null
      phoneNumber: string
      currencyId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["store"]>
    composites: {}
  }

  type StoreGetPayload<S extends boolean | null | undefined | StoreDefaultArgs> = $Result.GetResult<Prisma.$StorePayload, S>

  type StoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoreCountAggregateInputType | true
    }

  export interface StoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Store'], meta: { name: 'Store' } }
    /**
     * Find zero or one Store that matches the filter.
     * @param {StoreFindUniqueArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoreFindUniqueArgs>(args: SelectSubset<T, StoreFindUniqueArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Store that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoreFindUniqueOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoreFindUniqueOrThrowArgs>(args: SelectSubset<T, StoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoreFindFirstArgs>(args?: SelectSubset<T, StoreFindFirstArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Store that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoreFindFirstOrThrowArgs>(args?: SelectSubset<T, StoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.store.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.store.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storeWithIdOnly = await prisma.store.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoreFindManyArgs>(args?: SelectSubset<T, StoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Store.
     * @param {StoreCreateArgs} args - Arguments to create a Store.
     * @example
     * // Create one Store
     * const Store = await prisma.store.create({
     *   data: {
     *     // ... data to create a Store
     *   }
     * })
     * 
     */
    create<T extends StoreCreateArgs>(args: SelectSubset<T, StoreCreateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stores.
     * @param {StoreCreateManyArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoreCreateManyArgs>(args?: SelectSubset<T, StoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stores and returns the data saved in the database.
     * @param {StoreCreateManyAndReturnArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stores and only return the `id`
     * const storeWithIdOnly = await prisma.store.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoreCreateManyAndReturnArgs>(args?: SelectSubset<T, StoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Store.
     * @param {StoreDeleteArgs} args - Arguments to delete one Store.
     * @example
     * // Delete one Store
     * const Store = await prisma.store.delete({
     *   where: {
     *     // ... filter to delete one Store
     *   }
     * })
     * 
     */
    delete<T extends StoreDeleteArgs>(args: SelectSubset<T, StoreDeleteArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Store.
     * @param {StoreUpdateArgs} args - Arguments to update one Store.
     * @example
     * // Update one Store
     * const store = await prisma.store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoreUpdateArgs>(args: SelectSubset<T, StoreUpdateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stores.
     * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoreDeleteManyArgs>(args?: SelectSubset<T, StoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoreUpdateManyArgs>(args: SelectSubset<T, StoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores and returns the data updated in the database.
     * @param {StoreUpdateManyAndReturnArgs} args - Arguments to update many Stores.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stores and only return the `id`
     * const storeWithIdOnly = await prisma.store.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StoreUpdateManyAndReturnArgs>(args: SelectSubset<T, StoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Store.
     * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
     * @example
     * // Update or create a Store
     * const store = await prisma.store.upsert({
     *   create: {
     *     // ... data to create a Store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Store we want to update
     *   }
     * })
     */
    upsert<T extends StoreUpsertArgs>(args: SelectSubset<T, StoreUpsertArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.store.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends StoreCountArgs>(
      args?: Subset<T, StoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreAggregateArgs>(args: Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

    /**
     * Group by Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreGroupByArgs['orderBy'] }
        : { orderBy?: StoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Store model
   */
  readonly fields: StoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currency<T extends CurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CurrencyDefaultArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receipts<T extends Store$receiptsArgs<ExtArgs> = {}>(args?: Subset<T, Store$receiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Store model
   */
  interface StoreFieldRefs {
    readonly id: FieldRef<"Store", 'String'>
    readonly name: FieldRef<"Store", 'String'>
    readonly slug: FieldRef<"Store", 'String'>
    readonly status: FieldRef<"Store", 'Status'>
    readonly brandId: FieldRef<"Store", 'String'>
    readonly address1: FieldRef<"Store", 'String'>
    readonly address2: FieldRef<"Store", 'String'>
    readonly city: FieldRef<"Store", 'String'>
    readonly region: FieldRef<"Store", 'String'>
    readonly postalCode: FieldRef<"Store", 'String'>
    readonly countryId: FieldRef<"Store", 'String'>
    readonly formattedAddress: FieldRef<"Store", 'String'>
    readonly latitude: FieldRef<"Store", 'Float'>
    readonly longitude: FieldRef<"Store", 'Float'>
    readonly abn: FieldRef<"Store", 'String'>
    readonly acn: FieldRef<"Store", 'String'>
    readonly phoneNumber: FieldRef<"Store", 'String'>
    readonly currencyId: FieldRef<"Store", 'String'>
    readonly createdAt: FieldRef<"Store", 'DateTime'>
    readonly updatedAt: FieldRef<"Store", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Store findUnique
   */
  export type StoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findUniqueOrThrow
   */
  export type StoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findFirst
   */
  export type StoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findFirstOrThrow
   */
  export type StoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findMany
   */
  export type StoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store create
   */
  export type StoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Store.
     */
    data: XOR<StoreCreateInput, StoreUncheckedCreateInput>
  }

  /**
   * Store createMany
   */
  export type StoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Store createManyAndReturn
   */
  export type StoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Store update
   */
  export type StoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Store.
     */
    data: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
    /**
     * Choose, which Store to update.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store updateMany
   */
  export type StoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to update.
     */
    limit?: number
  }

  /**
   * Store updateManyAndReturn
   */
  export type StoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Store upsert
   */
  export type StoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Store to update in case it exists.
     */
    where: StoreWhereUniqueInput
    /**
     * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
     */
    create: XOR<StoreCreateInput, StoreUncheckedCreateInput>
    /**
     * In case the Store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
  }

  /**
   * Store delete
   */
  export type StoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter which Store to delete.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store deleteMany
   */
  export type StoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stores to delete
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to delete.
     */
    limit?: number
  }

  /**
   * Store.receipts
   */
  export type Store$receiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    cursor?: ReceiptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Store without action
   */
  export type StoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
  }


  /**
   * Model Receipt
   */

  export type AggregateReceipt = {
    _count: ReceiptCountAggregateOutputType | null
    _avg: ReceiptAvgAggregateOutputType | null
    _sum: ReceiptSumAggregateOutputType | null
    _min: ReceiptMinAggregateOutputType | null
    _max: ReceiptMaxAggregateOutputType | null
  }

  export type ReceiptAvgAggregateOutputType = {
    subTotal: number | null
    tax: number | null
    cardSurcharge: number | null
  }

  export type ReceiptSumAggregateOutputType = {
    subTotal: number | null
    tax: number | null
    cardSurcharge: number | null
  }

  export type ReceiptMinAggregateOutputType = {
    id: string | null
    receiptNumber: string | null
    consumerId: string | null
    storeId: string | null
    subTotal: number | null
    tax: number | null
    cardSurcharge: number | null
    receiptDateTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptMaxAggregateOutputType = {
    id: string | null
    receiptNumber: string | null
    consumerId: string | null
    storeId: string | null
    subTotal: number | null
    tax: number | null
    cardSurcharge: number | null
    receiptDateTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptCountAggregateOutputType = {
    id: number
    receiptNumber: number
    consumerId: number
    storeId: number
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation: number
    receiptDateTime: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReceiptAvgAggregateInputType = {
    subTotal?: true
    tax?: true
    cardSurcharge?: true
  }

  export type ReceiptSumAggregateInputType = {
    subTotal?: true
    tax?: true
    cardSurcharge?: true
  }

  export type ReceiptMinAggregateInputType = {
    id?: true
    receiptNumber?: true
    consumerId?: true
    storeId?: true
    subTotal?: true
    tax?: true
    cardSurcharge?: true
    receiptDateTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptMaxAggregateInputType = {
    id?: true
    receiptNumber?: true
    consumerId?: true
    storeId?: true
    subTotal?: true
    tax?: true
    cardSurcharge?: true
    receiptDateTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptCountAggregateInputType = {
    id?: true
    receiptNumber?: true
    consumerId?: true
    storeId?: true
    subTotal?: true
    tax?: true
    cardSurcharge?: true
    otherInformation?: true
    receiptDateTime?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReceiptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receipt to aggregate.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Receipts
    **/
    _count?: true | ReceiptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptMaxAggregateInputType
  }

  export type GetReceiptAggregateType<T extends ReceiptAggregateArgs> = {
        [P in keyof T & keyof AggregateReceipt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceipt[P]>
      : GetScalarType<T[P], AggregateReceipt[P]>
  }




  export type ReceiptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithAggregationInput | ReceiptOrderByWithAggregationInput[]
    by: ReceiptScalarFieldEnum[] | ReceiptScalarFieldEnum
    having?: ReceiptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptCountAggregateInputType | true
    _avg?: ReceiptAvgAggregateInputType
    _sum?: ReceiptSumAggregateInputType
    _min?: ReceiptMinAggregateInputType
    _max?: ReceiptMaxAggregateInputType
  }

  export type ReceiptGroupByOutputType = {
    id: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation: string[]
    receiptDateTime: Date
    createdAt: Date
    updatedAt: Date
    _count: ReceiptCountAggregateOutputType | null
    _avg: ReceiptAvgAggregateOutputType | null
    _sum: ReceiptSumAggregateOutputType | null
    _min: ReceiptMinAggregateOutputType | null
    _max: ReceiptMaxAggregateOutputType | null
  }

  type GetReceiptGroupByPayload<T extends ReceiptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptNumber?: boolean
    consumerId?: boolean
    storeId?: boolean
    subTotal?: boolean
    tax?: boolean
    cardSurcharge?: boolean
    otherInformation?: boolean
    receiptDateTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    receiptItems?: boolean | Receipt$receiptItemsArgs<ExtArgs>
    receiptPayments?: boolean | Receipt$receiptPaymentsArgs<ExtArgs>
    _count?: boolean | ReceiptCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipt"]>

  export type ReceiptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptNumber?: boolean
    consumerId?: boolean
    storeId?: boolean
    subTotal?: boolean
    tax?: boolean
    cardSurcharge?: boolean
    otherInformation?: boolean
    receiptDateTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipt"]>

  export type ReceiptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptNumber?: boolean
    consumerId?: boolean
    storeId?: boolean
    subTotal?: boolean
    tax?: boolean
    cardSurcharge?: boolean
    otherInformation?: boolean
    receiptDateTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipt"]>

  export type ReceiptSelectScalar = {
    id?: boolean
    receiptNumber?: boolean
    consumerId?: boolean
    storeId?: boolean
    subTotal?: boolean
    tax?: boolean
    cardSurcharge?: boolean
    otherInformation?: boolean
    receiptDateTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReceiptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "receiptNumber" | "consumerId" | "storeId" | "subTotal" | "tax" | "cardSurcharge" | "otherInformation" | "receiptDateTime" | "createdAt" | "updatedAt", ExtArgs["result"]["receipt"]>
  export type ReceiptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    receiptItems?: boolean | Receipt$receiptItemsArgs<ExtArgs>
    receiptPayments?: boolean | Receipt$receiptPaymentsArgs<ExtArgs>
    _count?: boolean | ReceiptCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReceiptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type ReceiptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }

  export type $ReceiptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Receipt"
    objects: {
      consumer: Prisma.$ConsumerPayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
      receiptItems: Prisma.$ReceiptItemPayload<ExtArgs>[]
      receiptPayments: Prisma.$ReceiptPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptNumber: string
      consumerId: string
      storeId: string
      subTotal: number
      tax: number
      cardSurcharge: number
      otherInformation: string[]
      receiptDateTime: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["receipt"]>
    composites: {}
  }

  type ReceiptGetPayload<S extends boolean | null | undefined | ReceiptDefaultArgs> = $Result.GetResult<Prisma.$ReceiptPayload, S>

  type ReceiptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceiptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptCountAggregateInputType | true
    }

  export interface ReceiptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Receipt'], meta: { name: 'Receipt' } }
    /**
     * Find zero or one Receipt that matches the filter.
     * @param {ReceiptFindUniqueArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptFindUniqueArgs>(args: SelectSubset<T, ReceiptFindUniqueArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Receipt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceiptFindUniqueOrThrowArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receipt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindFirstArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptFindFirstArgs>(args?: SelectSubset<T, ReceiptFindFirstArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receipt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindFirstOrThrowArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Receipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receipts
     * const receipts = await prisma.receipt.findMany()
     * 
     * // Get first 10 Receipts
     * const receipts = await prisma.receipt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptWithIdOnly = await prisma.receipt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptFindManyArgs>(args?: SelectSubset<T, ReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Receipt.
     * @param {ReceiptCreateArgs} args - Arguments to create a Receipt.
     * @example
     * // Create one Receipt
     * const Receipt = await prisma.receipt.create({
     *   data: {
     *     // ... data to create a Receipt
     *   }
     * })
     * 
     */
    create<T extends ReceiptCreateArgs>(args: SelectSubset<T, ReceiptCreateArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Receipts.
     * @param {ReceiptCreateManyArgs} args - Arguments to create many Receipts.
     * @example
     * // Create many Receipts
     * const receipt = await prisma.receipt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptCreateManyArgs>(args?: SelectSubset<T, ReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Receipts and returns the data saved in the database.
     * @param {ReceiptCreateManyAndReturnArgs} args - Arguments to create many Receipts.
     * @example
     * // Create many Receipts
     * const receipt = await prisma.receipt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Receipts and only return the `id`
     * const receiptWithIdOnly = await prisma.receipt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Receipt.
     * @param {ReceiptDeleteArgs} args - Arguments to delete one Receipt.
     * @example
     * // Delete one Receipt
     * const Receipt = await prisma.receipt.delete({
     *   where: {
     *     // ... filter to delete one Receipt
     *   }
     * })
     * 
     */
    delete<T extends ReceiptDeleteArgs>(args: SelectSubset<T, ReceiptDeleteArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Receipt.
     * @param {ReceiptUpdateArgs} args - Arguments to update one Receipt.
     * @example
     * // Update one Receipt
     * const receipt = await prisma.receipt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptUpdateArgs>(args: SelectSubset<T, ReceiptUpdateArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Receipts.
     * @param {ReceiptDeleteManyArgs} args - Arguments to filter Receipts to delete.
     * @example
     * // Delete a few Receipts
     * const { count } = await prisma.receipt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptDeleteManyArgs>(args?: SelectSubset<T, ReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receipts
     * const receipt = await prisma.receipt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptUpdateManyArgs>(args: SelectSubset<T, ReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receipts and returns the data updated in the database.
     * @param {ReceiptUpdateManyAndReturnArgs} args - Arguments to update many Receipts.
     * @example
     * // Update many Receipts
     * const receipt = await prisma.receipt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Receipts and only return the `id`
     * const receiptWithIdOnly = await prisma.receipt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceiptUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceiptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Receipt.
     * @param {ReceiptUpsertArgs} args - Arguments to update or create a Receipt.
     * @example
     * // Update or create a Receipt
     * const receipt = await prisma.receipt.upsert({
     *   create: {
     *     // ... data to create a Receipt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receipt we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptUpsertArgs>(args: SelectSubset<T, ReceiptUpsertArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptCountArgs} args - Arguments to filter Receipts to count.
     * @example
     * // Count the number of Receipts
     * const count = await prisma.receipt.count({
     *   where: {
     *     // ... the filter for the Receipts we want to count
     *   }
     * })
    **/
    count<T extends ReceiptCountArgs>(
      args?: Subset<T, ReceiptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptAggregateArgs>(args: Subset<T, ReceiptAggregateArgs>): Prisma.PrismaPromise<GetReceiptAggregateType<T>>

    /**
     * Group by Receipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Receipt model
   */
  readonly fields: ReceiptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Receipt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consumer<T extends ConsumerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsumerDefaultArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiptItems<T extends Receipt$receiptItemsArgs<ExtArgs> = {}>(args?: Subset<T, Receipt$receiptItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receiptPayments<T extends Receipt$receiptPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Receipt$receiptPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Receipt model
   */
  interface ReceiptFieldRefs {
    readonly id: FieldRef<"Receipt", 'String'>
    readonly receiptNumber: FieldRef<"Receipt", 'String'>
    readonly consumerId: FieldRef<"Receipt", 'String'>
    readonly storeId: FieldRef<"Receipt", 'String'>
    readonly subTotal: FieldRef<"Receipt", 'Float'>
    readonly tax: FieldRef<"Receipt", 'Float'>
    readonly cardSurcharge: FieldRef<"Receipt", 'Float'>
    readonly otherInformation: FieldRef<"Receipt", 'String[]'>
    readonly receiptDateTime: FieldRef<"Receipt", 'DateTime'>
    readonly createdAt: FieldRef<"Receipt", 'DateTime'>
    readonly updatedAt: FieldRef<"Receipt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Receipt findUnique
   */
  export type ReceiptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt findUniqueOrThrow
   */
  export type ReceiptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt findFirst
   */
  export type ReceiptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receipts.
     */
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt findFirstOrThrow
   */
  export type ReceiptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receipts.
     */
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt findMany
   */
  export type ReceiptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipts to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt create
   */
  export type ReceiptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The data needed to create a Receipt.
     */
    data: XOR<ReceiptCreateInput, ReceiptUncheckedCreateInput>
  }

  /**
   * Receipt createMany
   */
  export type ReceiptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Receipts.
     */
    data: ReceiptCreateManyInput | ReceiptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Receipt createManyAndReturn
   */
  export type ReceiptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * The data used to create many Receipts.
     */
    data: ReceiptCreateManyInput | ReceiptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Receipt update
   */
  export type ReceiptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The data needed to update a Receipt.
     */
    data: XOR<ReceiptUpdateInput, ReceiptUncheckedUpdateInput>
    /**
     * Choose, which Receipt to update.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt updateMany
   */
  export type ReceiptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Receipts.
     */
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyInput>
    /**
     * Filter which Receipts to update
     */
    where?: ReceiptWhereInput
    /**
     * Limit how many Receipts to update.
     */
    limit?: number
  }

  /**
   * Receipt updateManyAndReturn
   */
  export type ReceiptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * The data used to update Receipts.
     */
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyInput>
    /**
     * Filter which Receipts to update
     */
    where?: ReceiptWhereInput
    /**
     * Limit how many Receipts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Receipt upsert
   */
  export type ReceiptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The filter to search for the Receipt to update in case it exists.
     */
    where: ReceiptWhereUniqueInput
    /**
     * In case the Receipt found by the `where` argument doesn't exist, create a new Receipt with this data.
     */
    create: XOR<ReceiptCreateInput, ReceiptUncheckedCreateInput>
    /**
     * In case the Receipt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptUpdateInput, ReceiptUncheckedUpdateInput>
  }

  /**
   * Receipt delete
   */
  export type ReceiptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter which Receipt to delete.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt deleteMany
   */
  export type ReceiptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receipts to delete
     */
    where?: ReceiptWhereInput
    /**
     * Limit how many Receipts to delete.
     */
    limit?: number
  }

  /**
   * Receipt.receiptItems
   */
  export type Receipt$receiptItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    where?: ReceiptItemWhereInput
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    cursor?: ReceiptItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptItemScalarFieldEnum | ReceiptItemScalarFieldEnum[]
  }

  /**
   * Receipt.receiptPayments
   */
  export type Receipt$receiptPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    where?: ReceiptPaymentWhereInput
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    cursor?: ReceiptPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptPaymentScalarFieldEnum | ReceiptPaymentScalarFieldEnum[]
  }

  /**
   * Receipt without action
   */
  export type ReceiptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
  }


  /**
   * Model ReceiptPayment
   */

  export type AggregateReceiptPayment = {
    _count: ReceiptPaymentCountAggregateOutputType | null
    _avg: ReceiptPaymentAvgAggregateOutputType | null
    _sum: ReceiptPaymentSumAggregateOutputType | null
    _min: ReceiptPaymentMinAggregateOutputType | null
    _max: ReceiptPaymentMaxAggregateOutputType | null
  }

  export type ReceiptPaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type ReceiptPaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type ReceiptPaymentMinAggregateOutputType = {
    id: string | null
    receiptId: string | null
    paymentType: $Enums.PaymentType | null
    amount: number | null
    terminal: string | null
    reference: string | null
    cardNo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptPaymentMaxAggregateOutputType = {
    id: string | null
    receiptId: string | null
    paymentType: $Enums.PaymentType | null
    amount: number | null
    terminal: string | null
    reference: string | null
    cardNo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptPaymentCountAggregateOutputType = {
    id: number
    receiptId: number
    paymentType: number
    amount: number
    terminal: number
    reference: number
    cardNo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReceiptPaymentAvgAggregateInputType = {
    amount?: true
  }

  export type ReceiptPaymentSumAggregateInputType = {
    amount?: true
  }

  export type ReceiptPaymentMinAggregateInputType = {
    id?: true
    receiptId?: true
    paymentType?: true
    amount?: true
    terminal?: true
    reference?: true
    cardNo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptPaymentMaxAggregateInputType = {
    id?: true
    receiptId?: true
    paymentType?: true
    amount?: true
    terminal?: true
    reference?: true
    cardNo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptPaymentCountAggregateInputType = {
    id?: true
    receiptId?: true
    paymentType?: true
    amount?: true
    terminal?: true
    reference?: true
    cardNo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReceiptPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptPayment to aggregate.
     */
    where?: ReceiptPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptPayments to fetch.
     */
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptPayments
    **/
    _count?: true | ReceiptPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptPaymentMaxAggregateInputType
  }

  export type GetReceiptPaymentAggregateType<T extends ReceiptPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptPayment[P]>
      : GetScalarType<T[P], AggregateReceiptPayment[P]>
  }




  export type ReceiptPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptPaymentWhereInput
    orderBy?: ReceiptPaymentOrderByWithAggregationInput | ReceiptPaymentOrderByWithAggregationInput[]
    by: ReceiptPaymentScalarFieldEnum[] | ReceiptPaymentScalarFieldEnum
    having?: ReceiptPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptPaymentCountAggregateInputType | true
    _avg?: ReceiptPaymentAvgAggregateInputType
    _sum?: ReceiptPaymentSumAggregateInputType
    _min?: ReceiptPaymentMinAggregateInputType
    _max?: ReceiptPaymentMaxAggregateInputType
  }

  export type ReceiptPaymentGroupByOutputType = {
    id: string
    receiptId: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal: string | null
    reference: string | null
    cardNo: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReceiptPaymentCountAggregateOutputType | null
    _avg: ReceiptPaymentAvgAggregateOutputType | null
    _sum: ReceiptPaymentSumAggregateOutputType | null
    _min: ReceiptPaymentMinAggregateOutputType | null
    _max: ReceiptPaymentMaxAggregateOutputType | null
  }

  type GetReceiptPaymentGroupByPayload<T extends ReceiptPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptPaymentGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    paymentType?: boolean
    amount?: boolean
    terminal?: boolean
    reference?: boolean
    cardNo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptPayment"]>

  export type ReceiptPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    paymentType?: boolean
    amount?: boolean
    terminal?: boolean
    reference?: boolean
    cardNo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptPayment"]>

  export type ReceiptPaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    paymentType?: boolean
    amount?: boolean
    terminal?: boolean
    reference?: boolean
    cardNo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptPayment"]>

  export type ReceiptPaymentSelectScalar = {
    id?: boolean
    receiptId?: boolean
    paymentType?: boolean
    amount?: boolean
    terminal?: boolean
    reference?: boolean
    cardNo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReceiptPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "receiptId" | "paymentType" | "amount" | "terminal" | "reference" | "cardNo" | "createdAt" | "updatedAt", ExtArgs["result"]["receiptPayment"]>
  export type ReceiptPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptPaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }

  export type $ReceiptPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptPayment"
    objects: {
      receipt: Prisma.$ReceiptPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptId: string
      paymentType: $Enums.PaymentType
      amount: number
      terminal: string | null
      reference: string | null
      cardNo: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["receiptPayment"]>
    composites: {}
  }

  type ReceiptPaymentGetPayload<S extends boolean | null | undefined | ReceiptPaymentDefaultArgs> = $Result.GetResult<Prisma.$ReceiptPaymentPayload, S>

  type ReceiptPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceiptPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptPaymentCountAggregateInputType | true
    }

  export interface ReceiptPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptPayment'], meta: { name: 'ReceiptPayment' } }
    /**
     * Find zero or one ReceiptPayment that matches the filter.
     * @param {ReceiptPaymentFindUniqueArgs} args - Arguments to find a ReceiptPayment
     * @example
     * // Get one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptPaymentFindUniqueArgs>(args: SelectSubset<T, ReceiptPaymentFindUniqueArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReceiptPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceiptPaymentFindUniqueOrThrowArgs} args - Arguments to find a ReceiptPayment
     * @example
     * // Get one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentFindFirstArgs} args - Arguments to find a ReceiptPayment
     * @example
     * // Get one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptPaymentFindFirstArgs>(args?: SelectSubset<T, ReceiptPaymentFindFirstArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentFindFirstOrThrowArgs} args - Arguments to find a ReceiptPayment
     * @example
     * // Get one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReceiptPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptPayments
     * const receiptPayments = await prisma.receiptPayment.findMany()
     * 
     * // Get first 10 ReceiptPayments
     * const receiptPayments = await prisma.receiptPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptPaymentWithIdOnly = await prisma.receiptPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptPaymentFindManyArgs>(args?: SelectSubset<T, ReceiptPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReceiptPayment.
     * @param {ReceiptPaymentCreateArgs} args - Arguments to create a ReceiptPayment.
     * @example
     * // Create one ReceiptPayment
     * const ReceiptPayment = await prisma.receiptPayment.create({
     *   data: {
     *     // ... data to create a ReceiptPayment
     *   }
     * })
     * 
     */
    create<T extends ReceiptPaymentCreateArgs>(args: SelectSubset<T, ReceiptPaymentCreateArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReceiptPayments.
     * @param {ReceiptPaymentCreateManyArgs} args - Arguments to create many ReceiptPayments.
     * @example
     * // Create many ReceiptPayments
     * const receiptPayment = await prisma.receiptPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptPaymentCreateManyArgs>(args?: SelectSubset<T, ReceiptPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReceiptPayments and returns the data saved in the database.
     * @param {ReceiptPaymentCreateManyAndReturnArgs} args - Arguments to create many ReceiptPayments.
     * @example
     * // Create many ReceiptPayments
     * const receiptPayment = await prisma.receiptPayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReceiptPayments and only return the `id`
     * const receiptPaymentWithIdOnly = await prisma.receiptPayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReceiptPayment.
     * @param {ReceiptPaymentDeleteArgs} args - Arguments to delete one ReceiptPayment.
     * @example
     * // Delete one ReceiptPayment
     * const ReceiptPayment = await prisma.receiptPayment.delete({
     *   where: {
     *     // ... filter to delete one ReceiptPayment
     *   }
     * })
     * 
     */
    delete<T extends ReceiptPaymentDeleteArgs>(args: SelectSubset<T, ReceiptPaymentDeleteArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReceiptPayment.
     * @param {ReceiptPaymentUpdateArgs} args - Arguments to update one ReceiptPayment.
     * @example
     * // Update one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptPaymentUpdateArgs>(args: SelectSubset<T, ReceiptPaymentUpdateArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReceiptPayments.
     * @param {ReceiptPaymentDeleteManyArgs} args - Arguments to filter ReceiptPayments to delete.
     * @example
     * // Delete a few ReceiptPayments
     * const { count } = await prisma.receiptPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptPaymentDeleteManyArgs>(args?: SelectSubset<T, ReceiptPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptPayments
     * const receiptPayment = await prisma.receiptPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptPaymentUpdateManyArgs>(args: SelectSubset<T, ReceiptPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptPayments and returns the data updated in the database.
     * @param {ReceiptPaymentUpdateManyAndReturnArgs} args - Arguments to update many ReceiptPayments.
     * @example
     * // Update many ReceiptPayments
     * const receiptPayment = await prisma.receiptPayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReceiptPayments and only return the `id`
     * const receiptPaymentWithIdOnly = await prisma.receiptPayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceiptPaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceiptPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReceiptPayment.
     * @param {ReceiptPaymentUpsertArgs} args - Arguments to update or create a ReceiptPayment.
     * @example
     * // Update or create a ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.upsert({
     *   create: {
     *     // ... data to create a ReceiptPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptPayment we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptPaymentUpsertArgs>(args: SelectSubset<T, ReceiptPaymentUpsertArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReceiptPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentCountArgs} args - Arguments to filter ReceiptPayments to count.
     * @example
     * // Count the number of ReceiptPayments
     * const count = await prisma.receiptPayment.count({
     *   where: {
     *     // ... the filter for the ReceiptPayments we want to count
     *   }
     * })
    **/
    count<T extends ReceiptPaymentCountArgs>(
      args?: Subset<T, ReceiptPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptPaymentAggregateArgs>(args: Subset<T, ReceiptPaymentAggregateArgs>): Prisma.PrismaPromise<GetReceiptPaymentAggregateType<T>>

    /**
     * Group by ReceiptPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptPaymentGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptPayment model
   */
  readonly fields: ReceiptPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receipt<T extends ReceiptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReceiptDefaultArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptPayment model
   */
  interface ReceiptPaymentFieldRefs {
    readonly id: FieldRef<"ReceiptPayment", 'String'>
    readonly receiptId: FieldRef<"ReceiptPayment", 'String'>
    readonly paymentType: FieldRef<"ReceiptPayment", 'PaymentType'>
    readonly amount: FieldRef<"ReceiptPayment", 'Float'>
    readonly terminal: FieldRef<"ReceiptPayment", 'String'>
    readonly reference: FieldRef<"ReceiptPayment", 'String'>
    readonly cardNo: FieldRef<"ReceiptPayment", 'String'>
    readonly createdAt: FieldRef<"ReceiptPayment", 'DateTime'>
    readonly updatedAt: FieldRef<"ReceiptPayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptPayment findUnique
   */
  export type ReceiptPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayment to fetch.
     */
    where: ReceiptPaymentWhereUniqueInput
  }

  /**
   * ReceiptPayment findUniqueOrThrow
   */
  export type ReceiptPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayment to fetch.
     */
    where: ReceiptPaymentWhereUniqueInput
  }

  /**
   * ReceiptPayment findFirst
   */
  export type ReceiptPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayment to fetch.
     */
    where?: ReceiptPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptPayments to fetch.
     */
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptPayments.
     */
    cursor?: ReceiptPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptPayments.
     */
    distinct?: ReceiptPaymentScalarFieldEnum | ReceiptPaymentScalarFieldEnum[]
  }

  /**
   * ReceiptPayment findFirstOrThrow
   */
  export type ReceiptPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayment to fetch.
     */
    where?: ReceiptPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptPayments to fetch.
     */
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptPayments.
     */
    cursor?: ReceiptPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptPayments.
     */
    distinct?: ReceiptPaymentScalarFieldEnum | ReceiptPaymentScalarFieldEnum[]
  }

  /**
   * ReceiptPayment findMany
   */
  export type ReceiptPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayments to fetch.
     */
    where?: ReceiptPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptPayments to fetch.
     */
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptPayments.
     */
    cursor?: ReceiptPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptPayments.
     */
    skip?: number
    distinct?: ReceiptPaymentScalarFieldEnum | ReceiptPaymentScalarFieldEnum[]
  }

  /**
   * ReceiptPayment create
   */
  export type ReceiptPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a ReceiptPayment.
     */
    data: XOR<ReceiptPaymentCreateInput, ReceiptPaymentUncheckedCreateInput>
  }

  /**
   * ReceiptPayment createMany
   */
  export type ReceiptPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptPayments.
     */
    data: ReceiptPaymentCreateManyInput | ReceiptPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptPayment createManyAndReturn
   */
  export type ReceiptPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * The data used to create many ReceiptPayments.
     */
    data: ReceiptPaymentCreateManyInput | ReceiptPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptPayment update
   */
  export type ReceiptPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a ReceiptPayment.
     */
    data: XOR<ReceiptPaymentUpdateInput, ReceiptPaymentUncheckedUpdateInput>
    /**
     * Choose, which ReceiptPayment to update.
     */
    where: ReceiptPaymentWhereUniqueInput
  }

  /**
   * ReceiptPayment updateMany
   */
  export type ReceiptPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptPayments.
     */
    data: XOR<ReceiptPaymentUpdateManyMutationInput, ReceiptPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptPayments to update
     */
    where?: ReceiptPaymentWhereInput
    /**
     * Limit how many ReceiptPayments to update.
     */
    limit?: number
  }

  /**
   * ReceiptPayment updateManyAndReturn
   */
  export type ReceiptPaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * The data used to update ReceiptPayments.
     */
    data: XOR<ReceiptPaymentUpdateManyMutationInput, ReceiptPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptPayments to update
     */
    where?: ReceiptPaymentWhereInput
    /**
     * Limit how many ReceiptPayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptPayment upsert
   */
  export type ReceiptPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the ReceiptPayment to update in case it exists.
     */
    where: ReceiptPaymentWhereUniqueInput
    /**
     * In case the ReceiptPayment found by the `where` argument doesn't exist, create a new ReceiptPayment with this data.
     */
    create: XOR<ReceiptPaymentCreateInput, ReceiptPaymentUncheckedCreateInput>
    /**
     * In case the ReceiptPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptPaymentUpdateInput, ReceiptPaymentUncheckedUpdateInput>
  }

  /**
   * ReceiptPayment delete
   */
  export type ReceiptPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter which ReceiptPayment to delete.
     */
    where: ReceiptPaymentWhereUniqueInput
  }

  /**
   * ReceiptPayment deleteMany
   */
  export type ReceiptPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptPayments to delete
     */
    where?: ReceiptPaymentWhereInput
    /**
     * Limit how many ReceiptPayments to delete.
     */
    limit?: number
  }

  /**
   * ReceiptPayment without action
   */
  export type ReceiptPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
  }


  /**
   * Model ReceiptItem
   */

  export type AggregateReceiptItem = {
    _count: ReceiptItemCountAggregateOutputType | null
    _avg: ReceiptItemAvgAggregateOutputType | null
    _sum: ReceiptItemSumAggregateOutputType | null
    _min: ReceiptItemMinAggregateOutputType | null
    _max: ReceiptItemMaxAggregateOutputType | null
  }

  export type ReceiptItemAvgAggregateOutputType = {
    quantity: number | null
    itemCost: number | null
    itemTax: number | null
    subTotal: number | null
    tax: number | null
  }

  export type ReceiptItemSumAggregateOutputType = {
    quantity: number | null
    itemCost: number | null
    itemTax: number | null
    subTotal: number | null
    tax: number | null
  }

  export type ReceiptItemMinAggregateOutputType = {
    id: string | null
    receiptId: string | null
    name: string | null
    sku: string | null
    description: string | null
    modelNumber: string | null
    quantity: number | null
    itemCost: number | null
    itemTax: number | null
    subTotal: number | null
    tax: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptItemMaxAggregateOutputType = {
    id: string | null
    receiptId: string | null
    name: string | null
    sku: string | null
    description: string | null
    modelNumber: string | null
    quantity: number | null
    itemCost: number | null
    itemTax: number | null
    subTotal: number | null
    tax: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptItemCountAggregateOutputType = {
    id: number
    receiptId: number
    name: number
    sku: number
    description: number
    modelNumber: number
    quantity: number
    itemCost: number
    itemTax: number
    subTotal: number
    tax: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReceiptItemAvgAggregateInputType = {
    quantity?: true
    itemCost?: true
    itemTax?: true
    subTotal?: true
    tax?: true
  }

  export type ReceiptItemSumAggregateInputType = {
    quantity?: true
    itemCost?: true
    itemTax?: true
    subTotal?: true
    tax?: true
  }

  export type ReceiptItemMinAggregateInputType = {
    id?: true
    receiptId?: true
    name?: true
    sku?: true
    description?: true
    modelNumber?: true
    quantity?: true
    itemCost?: true
    itemTax?: true
    subTotal?: true
    tax?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptItemMaxAggregateInputType = {
    id?: true
    receiptId?: true
    name?: true
    sku?: true
    description?: true
    modelNumber?: true
    quantity?: true
    itemCost?: true
    itemTax?: true
    subTotal?: true
    tax?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptItemCountAggregateInputType = {
    id?: true
    receiptId?: true
    name?: true
    sku?: true
    description?: true
    modelNumber?: true
    quantity?: true
    itemCost?: true
    itemTax?: true
    subTotal?: true
    tax?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReceiptItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptItem to aggregate.
     */
    where?: ReceiptItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptItems to fetch.
     */
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptItems
    **/
    _count?: true | ReceiptItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptItemMaxAggregateInputType
  }

  export type GetReceiptItemAggregateType<T extends ReceiptItemAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptItem[P]>
      : GetScalarType<T[P], AggregateReceiptItem[P]>
  }




  export type ReceiptItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptItemWhereInput
    orderBy?: ReceiptItemOrderByWithAggregationInput | ReceiptItemOrderByWithAggregationInput[]
    by: ReceiptItemScalarFieldEnum[] | ReceiptItemScalarFieldEnum
    having?: ReceiptItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptItemCountAggregateInputType | true
    _avg?: ReceiptItemAvgAggregateInputType
    _sum?: ReceiptItemSumAggregateInputType
    _min?: ReceiptItemMinAggregateInputType
    _max?: ReceiptItemMaxAggregateInputType
  }

  export type ReceiptItemGroupByOutputType = {
    id: string
    receiptId: string
    name: string
    sku: string | null
    description: string | null
    modelNumber: string | null
    quantity: number
    itemCost: number
    itemTax: number
    subTotal: number
    tax: number
    createdAt: Date
    updatedAt: Date
    _count: ReceiptItemCountAggregateOutputType | null
    _avg: ReceiptItemAvgAggregateOutputType | null
    _sum: ReceiptItemSumAggregateOutputType | null
    _min: ReceiptItemMinAggregateOutputType | null
    _max: ReceiptItemMaxAggregateOutputType | null
  }

  type GetReceiptItemGroupByPayload<T extends ReceiptItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptItemGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptItemGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    name?: boolean
    sku?: boolean
    description?: boolean
    modelNumber?: boolean
    quantity?: boolean
    itemCost?: boolean
    itemTax?: boolean
    subTotal?: boolean
    tax?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptItem"]>

  export type ReceiptItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    name?: boolean
    sku?: boolean
    description?: boolean
    modelNumber?: boolean
    quantity?: boolean
    itemCost?: boolean
    itemTax?: boolean
    subTotal?: boolean
    tax?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptItem"]>

  export type ReceiptItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    name?: boolean
    sku?: boolean
    description?: boolean
    modelNumber?: boolean
    quantity?: boolean
    itemCost?: boolean
    itemTax?: boolean
    subTotal?: boolean
    tax?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptItem"]>

  export type ReceiptItemSelectScalar = {
    id?: boolean
    receiptId?: boolean
    name?: boolean
    sku?: boolean
    description?: boolean
    modelNumber?: boolean
    quantity?: boolean
    itemCost?: boolean
    itemTax?: boolean
    subTotal?: boolean
    tax?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReceiptItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "receiptId" | "name" | "sku" | "description" | "modelNumber" | "quantity" | "itemCost" | "itemTax" | "subTotal" | "tax" | "createdAt" | "updatedAt", ExtArgs["result"]["receiptItem"]>
  export type ReceiptItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }

  export type $ReceiptItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptItem"
    objects: {
      receipt: Prisma.$ReceiptPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptId: string
      name: string
      sku: string | null
      description: string | null
      modelNumber: string | null
      quantity: number
      itemCost: number
      itemTax: number
      subTotal: number
      tax: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["receiptItem"]>
    composites: {}
  }

  type ReceiptItemGetPayload<S extends boolean | null | undefined | ReceiptItemDefaultArgs> = $Result.GetResult<Prisma.$ReceiptItemPayload, S>

  type ReceiptItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceiptItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptItemCountAggregateInputType | true
    }

  export interface ReceiptItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptItem'], meta: { name: 'ReceiptItem' } }
    /**
     * Find zero or one ReceiptItem that matches the filter.
     * @param {ReceiptItemFindUniqueArgs} args - Arguments to find a ReceiptItem
     * @example
     * // Get one ReceiptItem
     * const receiptItem = await prisma.receiptItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptItemFindUniqueArgs>(args: SelectSubset<T, ReceiptItemFindUniqueArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReceiptItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceiptItemFindUniqueOrThrowArgs} args - Arguments to find a ReceiptItem
     * @example
     * // Get one ReceiptItem
     * const receiptItem = await prisma.receiptItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemFindFirstArgs} args - Arguments to find a ReceiptItem
     * @example
     * // Get one ReceiptItem
     * const receiptItem = await prisma.receiptItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptItemFindFirstArgs>(args?: SelectSubset<T, ReceiptItemFindFirstArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemFindFirstOrThrowArgs} args - Arguments to find a ReceiptItem
     * @example
     * // Get one ReceiptItem
     * const receiptItem = await prisma.receiptItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReceiptItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptItems
     * const receiptItems = await prisma.receiptItem.findMany()
     * 
     * // Get first 10 ReceiptItems
     * const receiptItems = await prisma.receiptItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptItemWithIdOnly = await prisma.receiptItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptItemFindManyArgs>(args?: SelectSubset<T, ReceiptItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReceiptItem.
     * @param {ReceiptItemCreateArgs} args - Arguments to create a ReceiptItem.
     * @example
     * // Create one ReceiptItem
     * const ReceiptItem = await prisma.receiptItem.create({
     *   data: {
     *     // ... data to create a ReceiptItem
     *   }
     * })
     * 
     */
    create<T extends ReceiptItemCreateArgs>(args: SelectSubset<T, ReceiptItemCreateArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReceiptItems.
     * @param {ReceiptItemCreateManyArgs} args - Arguments to create many ReceiptItems.
     * @example
     * // Create many ReceiptItems
     * const receiptItem = await prisma.receiptItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptItemCreateManyArgs>(args?: SelectSubset<T, ReceiptItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReceiptItems and returns the data saved in the database.
     * @param {ReceiptItemCreateManyAndReturnArgs} args - Arguments to create many ReceiptItems.
     * @example
     * // Create many ReceiptItems
     * const receiptItem = await prisma.receiptItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReceiptItems and only return the `id`
     * const receiptItemWithIdOnly = await prisma.receiptItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReceiptItem.
     * @param {ReceiptItemDeleteArgs} args - Arguments to delete one ReceiptItem.
     * @example
     * // Delete one ReceiptItem
     * const ReceiptItem = await prisma.receiptItem.delete({
     *   where: {
     *     // ... filter to delete one ReceiptItem
     *   }
     * })
     * 
     */
    delete<T extends ReceiptItemDeleteArgs>(args: SelectSubset<T, ReceiptItemDeleteArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReceiptItem.
     * @param {ReceiptItemUpdateArgs} args - Arguments to update one ReceiptItem.
     * @example
     * // Update one ReceiptItem
     * const receiptItem = await prisma.receiptItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptItemUpdateArgs>(args: SelectSubset<T, ReceiptItemUpdateArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReceiptItems.
     * @param {ReceiptItemDeleteManyArgs} args - Arguments to filter ReceiptItems to delete.
     * @example
     * // Delete a few ReceiptItems
     * const { count } = await prisma.receiptItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptItemDeleteManyArgs>(args?: SelectSubset<T, ReceiptItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptItems
     * const receiptItem = await prisma.receiptItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptItemUpdateManyArgs>(args: SelectSubset<T, ReceiptItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptItems and returns the data updated in the database.
     * @param {ReceiptItemUpdateManyAndReturnArgs} args - Arguments to update many ReceiptItems.
     * @example
     * // Update many ReceiptItems
     * const receiptItem = await prisma.receiptItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReceiptItems and only return the `id`
     * const receiptItemWithIdOnly = await prisma.receiptItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceiptItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceiptItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReceiptItem.
     * @param {ReceiptItemUpsertArgs} args - Arguments to update or create a ReceiptItem.
     * @example
     * // Update or create a ReceiptItem
     * const receiptItem = await prisma.receiptItem.upsert({
     *   create: {
     *     // ... data to create a ReceiptItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptItem we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptItemUpsertArgs>(args: SelectSubset<T, ReceiptItemUpsertArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReceiptItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemCountArgs} args - Arguments to filter ReceiptItems to count.
     * @example
     * // Count the number of ReceiptItems
     * const count = await prisma.receiptItem.count({
     *   where: {
     *     // ... the filter for the ReceiptItems we want to count
     *   }
     * })
    **/
    count<T extends ReceiptItemCountArgs>(
      args?: Subset<T, ReceiptItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptItemAggregateArgs>(args: Subset<T, ReceiptItemAggregateArgs>): Prisma.PrismaPromise<GetReceiptItemAggregateType<T>>

    /**
     * Group by ReceiptItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptItemGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptItem model
   */
  readonly fields: ReceiptItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receipt<T extends ReceiptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReceiptDefaultArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptItem model
   */
  interface ReceiptItemFieldRefs {
    readonly id: FieldRef<"ReceiptItem", 'String'>
    readonly receiptId: FieldRef<"ReceiptItem", 'String'>
    readonly name: FieldRef<"ReceiptItem", 'String'>
    readonly sku: FieldRef<"ReceiptItem", 'String'>
    readonly description: FieldRef<"ReceiptItem", 'String'>
    readonly modelNumber: FieldRef<"ReceiptItem", 'String'>
    readonly quantity: FieldRef<"ReceiptItem", 'Int'>
    readonly itemCost: FieldRef<"ReceiptItem", 'Float'>
    readonly itemTax: FieldRef<"ReceiptItem", 'Float'>
    readonly subTotal: FieldRef<"ReceiptItem", 'Float'>
    readonly tax: FieldRef<"ReceiptItem", 'Float'>
    readonly createdAt: FieldRef<"ReceiptItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ReceiptItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptItem findUnique
   */
  export type ReceiptItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItem to fetch.
     */
    where: ReceiptItemWhereUniqueInput
  }

  /**
   * ReceiptItem findUniqueOrThrow
   */
  export type ReceiptItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItem to fetch.
     */
    where: ReceiptItemWhereUniqueInput
  }

  /**
   * ReceiptItem findFirst
   */
  export type ReceiptItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItem to fetch.
     */
    where?: ReceiptItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptItems to fetch.
     */
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptItems.
     */
    cursor?: ReceiptItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptItems.
     */
    distinct?: ReceiptItemScalarFieldEnum | ReceiptItemScalarFieldEnum[]
  }

  /**
   * ReceiptItem findFirstOrThrow
   */
  export type ReceiptItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItem to fetch.
     */
    where?: ReceiptItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptItems to fetch.
     */
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptItems.
     */
    cursor?: ReceiptItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptItems.
     */
    distinct?: ReceiptItemScalarFieldEnum | ReceiptItemScalarFieldEnum[]
  }

  /**
   * ReceiptItem findMany
   */
  export type ReceiptItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItems to fetch.
     */
    where?: ReceiptItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptItems to fetch.
     */
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptItems.
     */
    cursor?: ReceiptItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptItems.
     */
    skip?: number
    distinct?: ReceiptItemScalarFieldEnum | ReceiptItemScalarFieldEnum[]
  }

  /**
   * ReceiptItem create
   */
  export type ReceiptItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ReceiptItem.
     */
    data: XOR<ReceiptItemCreateInput, ReceiptItemUncheckedCreateInput>
  }

  /**
   * ReceiptItem createMany
   */
  export type ReceiptItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptItems.
     */
    data: ReceiptItemCreateManyInput | ReceiptItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptItem createManyAndReturn
   */
  export type ReceiptItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * The data used to create many ReceiptItems.
     */
    data: ReceiptItemCreateManyInput | ReceiptItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptItem update
   */
  export type ReceiptItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ReceiptItem.
     */
    data: XOR<ReceiptItemUpdateInput, ReceiptItemUncheckedUpdateInput>
    /**
     * Choose, which ReceiptItem to update.
     */
    where: ReceiptItemWhereUniqueInput
  }

  /**
   * ReceiptItem updateMany
   */
  export type ReceiptItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptItems.
     */
    data: XOR<ReceiptItemUpdateManyMutationInput, ReceiptItemUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptItems to update
     */
    where?: ReceiptItemWhereInput
    /**
     * Limit how many ReceiptItems to update.
     */
    limit?: number
  }

  /**
   * ReceiptItem updateManyAndReturn
   */
  export type ReceiptItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * The data used to update ReceiptItems.
     */
    data: XOR<ReceiptItemUpdateManyMutationInput, ReceiptItemUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptItems to update
     */
    where?: ReceiptItemWhereInput
    /**
     * Limit how many ReceiptItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptItem upsert
   */
  export type ReceiptItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ReceiptItem to update in case it exists.
     */
    where: ReceiptItemWhereUniqueInput
    /**
     * In case the ReceiptItem found by the `where` argument doesn't exist, create a new ReceiptItem with this data.
     */
    create: XOR<ReceiptItemCreateInput, ReceiptItemUncheckedCreateInput>
    /**
     * In case the ReceiptItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptItemUpdateInput, ReceiptItemUncheckedUpdateInput>
  }

  /**
   * ReceiptItem delete
   */
  export type ReceiptItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter which ReceiptItem to delete.
     */
    where: ReceiptItemWhereUniqueInput
  }

  /**
   * ReceiptItem deleteMany
   */
  export type ReceiptItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptItems to delete
     */
    where?: ReceiptItemWhereInput
    /**
     * Limit how many ReceiptItems to delete.
     */
    limit?: number
  }

  /**
   * ReceiptItem without action
   */
  export type ReceiptItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    emailVerified: 'emailVerified',
    emailVerifiedTime: 'emailVerifiedTime',
    passwordVerified: 'passwordVerified',
    postcode: 'postcode',
    city: 'city',
    stateId: 'stateId',
    phoneNumber: 'phoneNumber',
    password: 'password',
    image: 'image',
    role: 'role',
    totpKey: 'totpKey',
    recoveryCodes: 'recoveryCodes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    twoFactorVerified: 'twoFactorVerified',
    userId: 'userId',
    rememberMe: 'rememberMe'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const EmailVerificationRequestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    email: 'email',
    expiresAt: 'expiresAt',
    code: 'code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailVerificationRequestScalarFieldEnum = (typeof EmailVerificationRequestScalarFieldEnum)[keyof typeof EmailVerificationRequestScalarFieldEnum]


  export const PasswordResetSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    email: 'email',
    expiresAt: 'expiresAt',
    code: 'code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PasswordResetSessionScalarFieldEnum = (typeof PasswordResetSessionScalarFieldEnum)[keyof typeof PasswordResetSessionScalarFieldEnum]


  export const ConsumerScalarFieldEnum: {
    id: 'id',
    barcode: 'barcode',
    userId: 'userId',
    gender: 'gender',
    dateOfBirth: 'dateOfBirth',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConsumerScalarFieldEnum = (typeof ConsumerScalarFieldEnum)[keyof typeof ConsumerScalarFieldEnum]


  export const MerchantUserScalarFieldEnum: {
    id: 'id',
    jobTitle: 'jobTitle',
    merchantId: 'merchantId',
    merchantRole: 'merchantRole',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MerchantUserScalarFieldEnum = (typeof MerchantUserScalarFieldEnum)[keyof typeof MerchantUserScalarFieldEnum]


  export const AdminUserScalarFieldEnum: {
    id: 'id',
    jobTitle: 'jobTitle',
    adminRole: 'adminRole',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminUserScalarFieldEnum = (typeof AdminUserScalarFieldEnum)[keyof typeof AdminUserScalarFieldEnum]


  export const BrandUserScalarFieldEnum: {
    id: 'id',
    brandId: 'brandId',
    merchantUserId: 'merchantUserId',
    brandRole: 'brandRole',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BrandUserScalarFieldEnum = (typeof BrandUserScalarFieldEnum)[keyof typeof BrandUserScalarFieldEnum]


  export const CurrencyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    demonym: 'demonym',
    majorSingle: 'majorSingle',
    majorPlural: 'majorPlural',
    ISOnum: 'ISOnum',
    symbol: 'symbol',
    symbolNative: 'symbolNative',
    minorSingle: 'minorSingle',
    minorPlural: 'minorPlural',
    ISOdigits: 'ISOdigits',
    decimals: 'decimals',
    numToBasic: 'numToBasic'
  };

  export type CurrencyScalarFieldEnum = (typeof CurrencyScalarFieldEnum)[keyof typeof CurrencyScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    isoCode: 'isoCode',
    name: 'name',
    currency: 'currency',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const StateScalarFieldEnum: {
    id: 'id',
    isoCode: 'isoCode',
    name: 'name',
    countryId: 'countryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StateScalarFieldEnum = (typeof StateScalarFieldEnum)[keyof typeof StateScalarFieldEnum]


  export const MerchantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    status: 'status',
    phoneNumber: 'phoneNumber',
    genericEmail: 'genericEmail',
    invoiceEmail: 'invoiceEmail',
    address1: 'address1',
    address2: 'address2',
    suburb: 'suburb',
    postcode: 'postcode',
    stateId: 'stateId',
    countryId: 'countryId',
    abn: 'abn',
    acn: 'acn',
    logoUrl: 'logoUrl',
    primaryContactId: 'primaryContactId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MerchantScalarFieldEnum = (typeof MerchantScalarFieldEnum)[keyof typeof MerchantScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    status: 'status',
    merchantId: 'merchantId',
    name: 'name',
    slug: 'slug',
    genericEmail: 'genericEmail',
    invoiceEmail: 'invoiceEmail',
    tradingAsName: 'tradingAsName',
    logoUrl: 'logoUrl',
    address1: 'address1',
    address2: 'address2',
    suburb: 'suburb',
    postcode: 'postcode',
    stateId: 'stateId',
    countryId: 'countryId',
    abn: 'abn',
    acn: 'acn',
    phoneNumber: 'phoneNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    primaryContactId: 'primaryContactId'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const StoreScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    status: 'status',
    brandId: 'brandId',
    address1: 'address1',
    address2: 'address2',
    city: 'city',
    region: 'region',
    postalCode: 'postalCode',
    countryId: 'countryId',
    formattedAddress: 'formattedAddress',
    latitude: 'latitude',
    longitude: 'longitude',
    abn: 'abn',
    acn: 'acn',
    phoneNumber: 'phoneNumber',
    currencyId: 'currencyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


  export const ReceiptScalarFieldEnum: {
    id: 'id',
    receiptNumber: 'receiptNumber',
    consumerId: 'consumerId',
    storeId: 'storeId',
    subTotal: 'subTotal',
    tax: 'tax',
    cardSurcharge: 'cardSurcharge',
    otherInformation: 'otherInformation',
    receiptDateTime: 'receiptDateTime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReceiptScalarFieldEnum = (typeof ReceiptScalarFieldEnum)[keyof typeof ReceiptScalarFieldEnum]


  export const ReceiptPaymentScalarFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    paymentType: 'paymentType',
    amount: 'amount',
    terminal: 'terminal',
    reference: 'reference',
    cardNo: 'cardNo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReceiptPaymentScalarFieldEnum = (typeof ReceiptPaymentScalarFieldEnum)[keyof typeof ReceiptPaymentScalarFieldEnum]


  export const ReceiptItemScalarFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    name: 'name',
    sku: 'sku',
    description: 'description',
    modelNumber: 'modelNumber',
    quantity: 'quantity',
    itemCost: 'itemCost',
    itemTax: 'itemTax',
    subTotal: 'subTotal',
    tax: 'tax',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReceiptItemScalarFieldEnum = (typeof ReceiptItemScalarFieldEnum)[keyof typeof ReceiptItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    postcode: 'postcode',
    city: 'city',
    stateId: 'stateId',
    phoneNumber: 'phoneNumber',
    password: 'password',
    image: 'image',
    recoveryCodes: 'recoveryCodes'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const EmailVerificationRequestOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    email: 'email',
    code: 'code'
  };

  export type EmailVerificationRequestOrderByRelevanceFieldEnum = (typeof EmailVerificationRequestOrderByRelevanceFieldEnum)[keyof typeof EmailVerificationRequestOrderByRelevanceFieldEnum]


  export const PasswordResetSessionOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    email: 'email',
    code: 'code'
  };

  export type PasswordResetSessionOrderByRelevanceFieldEnum = (typeof PasswordResetSessionOrderByRelevanceFieldEnum)[keyof typeof PasswordResetSessionOrderByRelevanceFieldEnum]


  export const ConsumerOrderByRelevanceFieldEnum: {
    id: 'id',
    barcode: 'barcode',
    userId: 'userId'
  };

  export type ConsumerOrderByRelevanceFieldEnum = (typeof ConsumerOrderByRelevanceFieldEnum)[keyof typeof ConsumerOrderByRelevanceFieldEnum]


  export const MerchantUserOrderByRelevanceFieldEnum: {
    id: 'id',
    jobTitle: 'jobTitle',
    merchantId: 'merchantId',
    userId: 'userId'
  };

  export type MerchantUserOrderByRelevanceFieldEnum = (typeof MerchantUserOrderByRelevanceFieldEnum)[keyof typeof MerchantUserOrderByRelevanceFieldEnum]


  export const AdminUserOrderByRelevanceFieldEnum: {
    id: 'id',
    jobTitle: 'jobTitle',
    userId: 'userId'
  };

  export type AdminUserOrderByRelevanceFieldEnum = (typeof AdminUserOrderByRelevanceFieldEnum)[keyof typeof AdminUserOrderByRelevanceFieldEnum]


  export const BrandUserOrderByRelevanceFieldEnum: {
    id: 'id',
    brandId: 'brandId',
    merchantUserId: 'merchantUserId'
  };

  export type BrandUserOrderByRelevanceFieldEnum = (typeof BrandUserOrderByRelevanceFieldEnum)[keyof typeof BrandUserOrderByRelevanceFieldEnum]


  export const CurrencyOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    demonym: 'demonym',
    majorSingle: 'majorSingle',
    majorPlural: 'majorPlural',
    symbol: 'symbol',
    symbolNative: 'symbolNative',
    minorSingle: 'minorSingle',
    minorPlural: 'minorPlural'
  };

  export type CurrencyOrderByRelevanceFieldEnum = (typeof CurrencyOrderByRelevanceFieldEnum)[keyof typeof CurrencyOrderByRelevanceFieldEnum]


  export const CountryOrderByRelevanceFieldEnum: {
    id: 'id',
    isoCode: 'isoCode',
    name: 'name',
    currency: 'currency'
  };

  export type CountryOrderByRelevanceFieldEnum = (typeof CountryOrderByRelevanceFieldEnum)[keyof typeof CountryOrderByRelevanceFieldEnum]


  export const StateOrderByRelevanceFieldEnum: {
    id: 'id',
    isoCode: 'isoCode',
    name: 'name',
    countryId: 'countryId'
  };

  export type StateOrderByRelevanceFieldEnum = (typeof StateOrderByRelevanceFieldEnum)[keyof typeof StateOrderByRelevanceFieldEnum]


  export const MerchantOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    phoneNumber: 'phoneNumber',
    genericEmail: 'genericEmail',
    invoiceEmail: 'invoiceEmail',
    address1: 'address1',
    address2: 'address2',
    suburb: 'suburb',
    postcode: 'postcode',
    stateId: 'stateId',
    countryId: 'countryId',
    abn: 'abn',
    acn: 'acn',
    logoUrl: 'logoUrl',
    primaryContactId: 'primaryContactId'
  };

  export type MerchantOrderByRelevanceFieldEnum = (typeof MerchantOrderByRelevanceFieldEnum)[keyof typeof MerchantOrderByRelevanceFieldEnum]


  export const BrandOrderByRelevanceFieldEnum: {
    id: 'id',
    merchantId: 'merchantId',
    name: 'name',
    slug: 'slug',
    genericEmail: 'genericEmail',
    invoiceEmail: 'invoiceEmail',
    tradingAsName: 'tradingAsName',
    logoUrl: 'logoUrl',
    address1: 'address1',
    address2: 'address2',
    suburb: 'suburb',
    postcode: 'postcode',
    stateId: 'stateId',
    countryId: 'countryId',
    abn: 'abn',
    acn: 'acn',
    phoneNumber: 'phoneNumber',
    primaryContactId: 'primaryContactId'
  };

  export type BrandOrderByRelevanceFieldEnum = (typeof BrandOrderByRelevanceFieldEnum)[keyof typeof BrandOrderByRelevanceFieldEnum]


  export const StoreOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    brandId: 'brandId',
    address1: 'address1',
    address2: 'address2',
    city: 'city',
    region: 'region',
    postalCode: 'postalCode',
    countryId: 'countryId',
    formattedAddress: 'formattedAddress',
    abn: 'abn',
    acn: 'acn',
    phoneNumber: 'phoneNumber',
    currencyId: 'currencyId'
  };

  export type StoreOrderByRelevanceFieldEnum = (typeof StoreOrderByRelevanceFieldEnum)[keyof typeof StoreOrderByRelevanceFieldEnum]


  export const ReceiptOrderByRelevanceFieldEnum: {
    id: 'id',
    receiptNumber: 'receiptNumber',
    consumerId: 'consumerId',
    storeId: 'storeId',
    otherInformation: 'otherInformation'
  };

  export type ReceiptOrderByRelevanceFieldEnum = (typeof ReceiptOrderByRelevanceFieldEnum)[keyof typeof ReceiptOrderByRelevanceFieldEnum]


  export const ReceiptPaymentOrderByRelevanceFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    terminal: 'terminal',
    reference: 'reference',
    cardNo: 'cardNo'
  };

  export type ReceiptPaymentOrderByRelevanceFieldEnum = (typeof ReceiptPaymentOrderByRelevanceFieldEnum)[keyof typeof ReceiptPaymentOrderByRelevanceFieldEnum]


  export const ReceiptItemOrderByRelevanceFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    name: 'name',
    sku: 'sku',
    description: 'description',
    modelNumber: 'modelNumber'
  };

  export type ReceiptItemOrderByRelevanceFieldEnum = (typeof ReceiptItemOrderByRelevanceFieldEnum)[keyof typeof ReceiptItemOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'MerchantRole[]'
   */
  export type ListEnumMerchantRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MerchantRole[]'>
    


  /**
   * Reference to a field of type 'MerchantRole'
   */
  export type EnumMerchantRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MerchantRole'>
    


  /**
   * Reference to a field of type 'AdminRole[]'
   */
  export type ListEnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole[]'>
    


  /**
   * Reference to a field of type 'AdminRole'
   */
  export type EnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole'>
    


  /**
   * Reference to a field of type 'BrandRole[]'
   */
  export type ListEnumBrandRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BrandRole[]'>
    


  /**
   * Reference to a field of type 'BrandRole'
   */
  export type EnumBrandRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BrandRole'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedTime?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordVerified?: BoolFilter<"User"> | boolean
    postcode?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    stateId?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleNullableListFilter<"User">
    totpKey?: BytesNullableFilter<"User"> | Uint8Array | null
    recoveryCodes?: StringNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    status?: EnumStatusFilter<"User"> | $Enums.Status
    state?: XOR<StateNullableScalarRelationFilter, StateWhereInput> | null
    consumerUser?: XOR<ConsumerNullableScalarRelationFilter, ConsumerWhereInput> | null
    merchantUser?: XOR<MerchantUserNullableScalarRelationFilter, MerchantUserWhereInput> | null
    adminUser?: XOR<AdminUserNullableScalarRelationFilter, AdminUserWhereInput> | null
    session?: SessionListRelationFilter
    emailVerificationRequest?: EmailVerificationRequestListRelationFilter
    passwordResetSession?: PasswordResetSessionListRelationFilter
    primaryContactMerchant?: XOR<MerchantNullableScalarRelationFilter, MerchantWhereInput> | null
    primaryContactBrand?: BrandListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedTime?: SortOrderInput | SortOrder
    passwordVerified?: SortOrder
    postcode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    totpKey?: SortOrderInput | SortOrder
    recoveryCodes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    state?: StateOrderByWithRelationInput
    consumerUser?: ConsumerOrderByWithRelationInput
    merchantUser?: MerchantUserOrderByWithRelationInput
    adminUser?: AdminUserOrderByWithRelationInput
    session?: SessionOrderByRelationAggregateInput
    emailVerificationRequest?: EmailVerificationRequestOrderByRelationAggregateInput
    passwordResetSession?: PasswordResetSessionOrderByRelationAggregateInput
    primaryContactMerchant?: MerchantOrderByWithRelationInput
    primaryContactBrand?: BrandOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedTime?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordVerified?: BoolFilter<"User"> | boolean
    postcode?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    stateId?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleNullableListFilter<"User">
    totpKey?: BytesNullableFilter<"User"> | Uint8Array | null
    recoveryCodes?: StringNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    status?: EnumStatusFilter<"User"> | $Enums.Status
    state?: XOR<StateNullableScalarRelationFilter, StateWhereInput> | null
    consumerUser?: XOR<ConsumerNullableScalarRelationFilter, ConsumerWhereInput> | null
    merchantUser?: XOR<MerchantUserNullableScalarRelationFilter, MerchantUserWhereInput> | null
    adminUser?: XOR<AdminUserNullableScalarRelationFilter, AdminUserWhereInput> | null
    session?: SessionListRelationFilter
    emailVerificationRequest?: EmailVerificationRequestListRelationFilter
    passwordResetSession?: PasswordResetSessionListRelationFilter
    primaryContactMerchant?: XOR<MerchantNullableScalarRelationFilter, MerchantWhereInput> | null
    primaryContactBrand?: BrandListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedTime?: SortOrderInput | SortOrder
    passwordVerified?: SortOrder
    postcode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    totpKey?: SortOrderInput | SortOrder
    recoveryCodes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerifiedTime?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    passwordVerified?: BoolWithAggregatesFilter<"User"> | boolean
    postcode?: StringNullableWithAggregatesFilter<"User"> | string | null
    city?: StringNullableWithAggregatesFilter<"User"> | string | null
    stateId?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleNullableListFilter<"User">
    totpKey?: BytesNullableWithAggregatesFilter<"User"> | Uint8Array | null
    recoveryCodes?: StringNullableListFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    status?: EnumStatusWithAggregatesFilter<"User"> | $Enums.Status
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: IntFilter<"Session"> | number
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    twoFactorVerified?: BoolFilter<"Session"> | boolean
    userId?: StringFilter<"Session"> | string
    rememberMe?: BoolFilter<"Session"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    twoFactorVerified?: SortOrder
    userId?: SortOrder
    rememberMe?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: IntFilter<"Session"> | number
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    twoFactorVerified?: BoolFilter<"Session"> | boolean
    userId?: StringFilter<"Session"> | string
    rememberMe?: BoolFilter<"Session"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    twoFactorVerified?: SortOrder
    userId?: SortOrder
    rememberMe?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: IntWithAggregatesFilter<"Session"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    twoFactorVerified?: BoolWithAggregatesFilter<"Session"> | boolean
    userId?: StringWithAggregatesFilter<"Session"> | string
    rememberMe?: BoolWithAggregatesFilter<"Session"> | boolean
  }

  export type EmailVerificationRequestWhereInput = {
    AND?: EmailVerificationRequestWhereInput | EmailVerificationRequestWhereInput[]
    OR?: EmailVerificationRequestWhereInput[]
    NOT?: EmailVerificationRequestWhereInput | EmailVerificationRequestWhereInput[]
    id?: StringFilter<"EmailVerificationRequest"> | string
    userId?: StringFilter<"EmailVerificationRequest"> | string
    email?: StringFilter<"EmailVerificationRequest"> | string
    expiresAt?: IntFilter<"EmailVerificationRequest"> | number
    code?: StringFilter<"EmailVerificationRequest"> | string
    createdAt?: DateTimeFilter<"EmailVerificationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"EmailVerificationRequest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EmailVerificationRequestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: EmailVerificationRequestOrderByRelevanceInput
  }

  export type EmailVerificationRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailVerificationRequestWhereInput | EmailVerificationRequestWhereInput[]
    OR?: EmailVerificationRequestWhereInput[]
    NOT?: EmailVerificationRequestWhereInput | EmailVerificationRequestWhereInput[]
    userId?: StringFilter<"EmailVerificationRequest"> | string
    email?: StringFilter<"EmailVerificationRequest"> | string
    expiresAt?: IntFilter<"EmailVerificationRequest"> | number
    code?: StringFilter<"EmailVerificationRequest"> | string
    createdAt?: DateTimeFilter<"EmailVerificationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"EmailVerificationRequest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type EmailVerificationRequestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailVerificationRequestCountOrderByAggregateInput
    _avg?: EmailVerificationRequestAvgOrderByAggregateInput
    _max?: EmailVerificationRequestMaxOrderByAggregateInput
    _min?: EmailVerificationRequestMinOrderByAggregateInput
    _sum?: EmailVerificationRequestSumOrderByAggregateInput
  }

  export type EmailVerificationRequestScalarWhereWithAggregatesInput = {
    AND?: EmailVerificationRequestScalarWhereWithAggregatesInput | EmailVerificationRequestScalarWhereWithAggregatesInput[]
    OR?: EmailVerificationRequestScalarWhereWithAggregatesInput[]
    NOT?: EmailVerificationRequestScalarWhereWithAggregatesInput | EmailVerificationRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailVerificationRequest"> | string
    userId?: StringWithAggregatesFilter<"EmailVerificationRequest"> | string
    email?: StringWithAggregatesFilter<"EmailVerificationRequest"> | string
    expiresAt?: IntWithAggregatesFilter<"EmailVerificationRequest"> | number
    code?: StringWithAggregatesFilter<"EmailVerificationRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EmailVerificationRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailVerificationRequest"> | Date | string
  }

  export type PasswordResetSessionWhereInput = {
    AND?: PasswordResetSessionWhereInput | PasswordResetSessionWhereInput[]
    OR?: PasswordResetSessionWhereInput[]
    NOT?: PasswordResetSessionWhereInput | PasswordResetSessionWhereInput[]
    id?: StringFilter<"PasswordResetSession"> | string
    userId?: StringFilter<"PasswordResetSession"> | string
    email?: StringFilter<"PasswordResetSession"> | string
    expiresAt?: IntFilter<"PasswordResetSession"> | number
    code?: StringFilter<"PasswordResetSession"> | string
    createdAt?: DateTimeFilter<"PasswordResetSession"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordResetSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PasswordResetSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: PasswordResetSessionOrderByRelevanceInput
  }

  export type PasswordResetSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PasswordResetSessionWhereInput | PasswordResetSessionWhereInput[]
    OR?: PasswordResetSessionWhereInput[]
    NOT?: PasswordResetSessionWhereInput | PasswordResetSessionWhereInput[]
    userId?: StringFilter<"PasswordResetSession"> | string
    email?: StringFilter<"PasswordResetSession"> | string
    expiresAt?: IntFilter<"PasswordResetSession"> | number
    code?: StringFilter<"PasswordResetSession"> | string
    createdAt?: DateTimeFilter<"PasswordResetSession"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordResetSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PasswordResetSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PasswordResetSessionCountOrderByAggregateInput
    _avg?: PasswordResetSessionAvgOrderByAggregateInput
    _max?: PasswordResetSessionMaxOrderByAggregateInput
    _min?: PasswordResetSessionMinOrderByAggregateInput
    _sum?: PasswordResetSessionSumOrderByAggregateInput
  }

  export type PasswordResetSessionScalarWhereWithAggregatesInput = {
    AND?: PasswordResetSessionScalarWhereWithAggregatesInput | PasswordResetSessionScalarWhereWithAggregatesInput[]
    OR?: PasswordResetSessionScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetSessionScalarWhereWithAggregatesInput | PasswordResetSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetSession"> | string
    userId?: StringWithAggregatesFilter<"PasswordResetSession"> | string
    email?: StringWithAggregatesFilter<"PasswordResetSession"> | string
    expiresAt?: IntWithAggregatesFilter<"PasswordResetSession"> | number
    code?: StringWithAggregatesFilter<"PasswordResetSession"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PasswordResetSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PasswordResetSession"> | Date | string
  }

  export type ConsumerWhereInput = {
    AND?: ConsumerWhereInput | ConsumerWhereInput[]
    OR?: ConsumerWhereInput[]
    NOT?: ConsumerWhereInput | ConsumerWhereInput[]
    id?: StringFilter<"Consumer"> | string
    barcode?: StringFilter<"Consumer"> | string
    userId?: StringFilter<"Consumer"> | string
    gender?: EnumGenderNullableFilter<"Consumer"> | $Enums.Gender | null
    dateOfBirth?: DateTimeNullableFilter<"Consumer"> | Date | string | null
    createdAt?: DateTimeFilter<"Consumer"> | Date | string
    updatedAt?: DateTimeFilter<"Consumer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Receipts?: ReceiptListRelationFilter
  }

  export type ConsumerOrderByWithRelationInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    Receipts?: ReceiptOrderByRelationAggregateInput
    _relevance?: ConsumerOrderByRelevanceInput
  }

  export type ConsumerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ConsumerWhereInput | ConsumerWhereInput[]
    OR?: ConsumerWhereInput[]
    NOT?: ConsumerWhereInput | ConsumerWhereInput[]
    barcode?: StringFilter<"Consumer"> | string
    gender?: EnumGenderNullableFilter<"Consumer"> | $Enums.Gender | null
    dateOfBirth?: DateTimeNullableFilter<"Consumer"> | Date | string | null
    createdAt?: DateTimeFilter<"Consumer"> | Date | string
    updatedAt?: DateTimeFilter<"Consumer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    Receipts?: ReceiptListRelationFilter
  }, "id" | "userId">

  export type ConsumerOrderByWithAggregationInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConsumerCountOrderByAggregateInput
    _max?: ConsumerMaxOrderByAggregateInput
    _min?: ConsumerMinOrderByAggregateInput
  }

  export type ConsumerScalarWhereWithAggregatesInput = {
    AND?: ConsumerScalarWhereWithAggregatesInput | ConsumerScalarWhereWithAggregatesInput[]
    OR?: ConsumerScalarWhereWithAggregatesInput[]
    NOT?: ConsumerScalarWhereWithAggregatesInput | ConsumerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Consumer"> | string
    barcode?: StringWithAggregatesFilter<"Consumer"> | string
    userId?: StringWithAggregatesFilter<"Consumer"> | string
    gender?: EnumGenderNullableWithAggregatesFilter<"Consumer"> | $Enums.Gender | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Consumer"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Consumer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Consumer"> | Date | string
  }

  export type MerchantUserWhereInput = {
    AND?: MerchantUserWhereInput | MerchantUserWhereInput[]
    OR?: MerchantUserWhereInput[]
    NOT?: MerchantUserWhereInput | MerchantUserWhereInput[]
    id?: StringFilter<"MerchantUser"> | string
    jobTitle?: StringFilter<"MerchantUser"> | string
    merchantId?: StringFilter<"MerchantUser"> | string
    merchantRole?: EnumMerchantRoleNullableListFilter<"MerchantUser">
    userId?: StringFilter<"MerchantUser"> | string
    createdAt?: DateTimeFilter<"MerchantUser"> | Date | string
    updatedAt?: DateTimeFilter<"MerchantUser"> | Date | string
    merchant?: XOR<MerchantScalarRelationFilter, MerchantWhereInput>
    brandUsers?: BrandUserListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MerchantUserOrderByWithRelationInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    merchantId?: SortOrder
    merchantRole?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    merchant?: MerchantOrderByWithRelationInput
    brandUsers?: BrandUserOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    _relevance?: MerchantUserOrderByRelevanceInput
  }

  export type MerchantUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: MerchantUserWhereInput | MerchantUserWhereInput[]
    OR?: MerchantUserWhereInput[]
    NOT?: MerchantUserWhereInput | MerchantUserWhereInput[]
    jobTitle?: StringFilter<"MerchantUser"> | string
    merchantId?: StringFilter<"MerchantUser"> | string
    merchantRole?: EnumMerchantRoleNullableListFilter<"MerchantUser">
    createdAt?: DateTimeFilter<"MerchantUser"> | Date | string
    updatedAt?: DateTimeFilter<"MerchantUser"> | Date | string
    merchant?: XOR<MerchantScalarRelationFilter, MerchantWhereInput>
    brandUsers?: BrandUserListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type MerchantUserOrderByWithAggregationInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    merchantId?: SortOrder
    merchantRole?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MerchantUserCountOrderByAggregateInput
    _max?: MerchantUserMaxOrderByAggregateInput
    _min?: MerchantUserMinOrderByAggregateInput
  }

  export type MerchantUserScalarWhereWithAggregatesInput = {
    AND?: MerchantUserScalarWhereWithAggregatesInput | MerchantUserScalarWhereWithAggregatesInput[]
    OR?: MerchantUserScalarWhereWithAggregatesInput[]
    NOT?: MerchantUserScalarWhereWithAggregatesInput | MerchantUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MerchantUser"> | string
    jobTitle?: StringWithAggregatesFilter<"MerchantUser"> | string
    merchantId?: StringWithAggregatesFilter<"MerchantUser"> | string
    merchantRole?: EnumMerchantRoleNullableListFilter<"MerchantUser">
    userId?: StringWithAggregatesFilter<"MerchantUser"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MerchantUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MerchantUser"> | Date | string
  }

  export type AdminUserWhereInput = {
    AND?: AdminUserWhereInput | AdminUserWhereInput[]
    OR?: AdminUserWhereInput[]
    NOT?: AdminUserWhereInput | AdminUserWhereInput[]
    id?: StringFilter<"AdminUser"> | string
    jobTitle?: StringFilter<"AdminUser"> | string
    adminRole?: EnumAdminRoleNullableListFilter<"AdminUser">
    userId?: StringFilter<"AdminUser"> | string
    createdAt?: DateTimeFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeFilter<"AdminUser"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminUserOrderByWithRelationInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    adminRole?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AdminUserOrderByRelevanceInput
  }

  export type AdminUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: AdminUserWhereInput | AdminUserWhereInput[]
    OR?: AdminUserWhereInput[]
    NOT?: AdminUserWhereInput | AdminUserWhereInput[]
    jobTitle?: StringFilter<"AdminUser"> | string
    adminRole?: EnumAdminRoleNullableListFilter<"AdminUser">
    createdAt?: DateTimeFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeFilter<"AdminUser"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type AdminUserOrderByWithAggregationInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    adminRole?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminUserCountOrderByAggregateInput
    _max?: AdminUserMaxOrderByAggregateInput
    _min?: AdminUserMinOrderByAggregateInput
  }

  export type AdminUserScalarWhereWithAggregatesInput = {
    AND?: AdminUserScalarWhereWithAggregatesInput | AdminUserScalarWhereWithAggregatesInput[]
    OR?: AdminUserScalarWhereWithAggregatesInput[]
    NOT?: AdminUserScalarWhereWithAggregatesInput | AdminUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminUser"> | string
    jobTitle?: StringWithAggregatesFilter<"AdminUser"> | string
    adminRole?: EnumAdminRoleNullableListFilter<"AdminUser">
    userId?: StringWithAggregatesFilter<"AdminUser"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AdminUser"> | Date | string
  }

  export type BrandUserWhereInput = {
    AND?: BrandUserWhereInput | BrandUserWhereInput[]
    OR?: BrandUserWhereInput[]
    NOT?: BrandUserWhereInput | BrandUserWhereInput[]
    id?: StringFilter<"BrandUser"> | string
    brandId?: StringFilter<"BrandUser"> | string
    merchantUserId?: StringNullableFilter<"BrandUser"> | string | null
    brandRole?: EnumBrandRoleNullableListFilter<"BrandUser">
    createdAt?: DateTimeFilter<"BrandUser"> | Date | string
    updatedAt?: DateTimeFilter<"BrandUser"> | Date | string
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    MerchantUser?: XOR<MerchantUserNullableScalarRelationFilter, MerchantUserWhereInput> | null
  }

  export type BrandUserOrderByWithRelationInput = {
    id?: SortOrder
    brandId?: SortOrder
    merchantUserId?: SortOrderInput | SortOrder
    brandRole?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brand?: BrandOrderByWithRelationInput
    MerchantUser?: MerchantUserOrderByWithRelationInput
    _relevance?: BrandUserOrderByRelevanceInput
  }

  export type BrandUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    brandId?: string
    AND?: BrandUserWhereInput | BrandUserWhereInput[]
    OR?: BrandUserWhereInput[]
    NOT?: BrandUserWhereInput | BrandUserWhereInput[]
    merchantUserId?: StringNullableFilter<"BrandUser"> | string | null
    brandRole?: EnumBrandRoleNullableListFilter<"BrandUser">
    createdAt?: DateTimeFilter<"BrandUser"> | Date | string
    updatedAt?: DateTimeFilter<"BrandUser"> | Date | string
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    MerchantUser?: XOR<MerchantUserNullableScalarRelationFilter, MerchantUserWhereInput> | null
  }, "id" | "brandId">

  export type BrandUserOrderByWithAggregationInput = {
    id?: SortOrder
    brandId?: SortOrder
    merchantUserId?: SortOrderInput | SortOrder
    brandRole?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BrandUserCountOrderByAggregateInput
    _max?: BrandUserMaxOrderByAggregateInput
    _min?: BrandUserMinOrderByAggregateInput
  }

  export type BrandUserScalarWhereWithAggregatesInput = {
    AND?: BrandUserScalarWhereWithAggregatesInput | BrandUserScalarWhereWithAggregatesInput[]
    OR?: BrandUserScalarWhereWithAggregatesInput[]
    NOT?: BrandUserScalarWhereWithAggregatesInput | BrandUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BrandUser"> | string
    brandId?: StringWithAggregatesFilter<"BrandUser"> | string
    merchantUserId?: StringNullableWithAggregatesFilter<"BrandUser"> | string | null
    brandRole?: EnumBrandRoleNullableListFilter<"BrandUser">
    createdAt?: DateTimeWithAggregatesFilter<"BrandUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BrandUser"> | Date | string
  }

  export type CurrencyWhereInput = {
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    id?: StringFilter<"Currency"> | string
    name?: StringFilter<"Currency"> | string
    code?: StringFilter<"Currency"> | string
    demonym?: StringNullableFilter<"Currency"> | string | null
    majorSingle?: StringNullableFilter<"Currency"> | string | null
    majorPlural?: StringNullableFilter<"Currency"> | string | null
    ISOnum?: IntNullableFilter<"Currency"> | number | null
    symbol?: StringNullableFilter<"Currency"> | string | null
    symbolNative?: StringFilter<"Currency"> | string
    minorSingle?: StringNullableFilter<"Currency"> | string | null
    minorPlural?: StringNullableFilter<"Currency"> | string | null
    ISOdigits?: IntNullableFilter<"Currency"> | number | null
    decimals?: IntNullableFilter<"Currency"> | number | null
    numToBasic?: IntNullableFilter<"Currency"> | number | null
    Store?: StoreListRelationFilter
  }

  export type CurrencyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    demonym?: SortOrderInput | SortOrder
    majorSingle?: SortOrderInput | SortOrder
    majorPlural?: SortOrderInput | SortOrder
    ISOnum?: SortOrderInput | SortOrder
    symbol?: SortOrderInput | SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrderInput | SortOrder
    minorPlural?: SortOrderInput | SortOrder
    ISOdigits?: SortOrderInput | SortOrder
    decimals?: SortOrderInput | SortOrder
    numToBasic?: SortOrderInput | SortOrder
    Store?: StoreOrderByRelationAggregateInput
    _relevance?: CurrencyOrderByRelevanceInput
  }

  export type CurrencyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    demonym?: StringNullableFilter<"Currency"> | string | null
    majorSingle?: StringNullableFilter<"Currency"> | string | null
    majorPlural?: StringNullableFilter<"Currency"> | string | null
    ISOnum?: IntNullableFilter<"Currency"> | number | null
    symbol?: StringNullableFilter<"Currency"> | string | null
    symbolNative?: StringFilter<"Currency"> | string
    minorSingle?: StringNullableFilter<"Currency"> | string | null
    minorPlural?: StringNullableFilter<"Currency"> | string | null
    ISOdigits?: IntNullableFilter<"Currency"> | number | null
    decimals?: IntNullableFilter<"Currency"> | number | null
    numToBasic?: IntNullableFilter<"Currency"> | number | null
    Store?: StoreListRelationFilter
  }, "id" | "name" | "code">

  export type CurrencyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    demonym?: SortOrderInput | SortOrder
    majorSingle?: SortOrderInput | SortOrder
    majorPlural?: SortOrderInput | SortOrder
    ISOnum?: SortOrderInput | SortOrder
    symbol?: SortOrderInput | SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrderInput | SortOrder
    minorPlural?: SortOrderInput | SortOrder
    ISOdigits?: SortOrderInput | SortOrder
    decimals?: SortOrderInput | SortOrder
    numToBasic?: SortOrderInput | SortOrder
    _count?: CurrencyCountOrderByAggregateInput
    _avg?: CurrencyAvgOrderByAggregateInput
    _max?: CurrencyMaxOrderByAggregateInput
    _min?: CurrencyMinOrderByAggregateInput
    _sum?: CurrencySumOrderByAggregateInput
  }

  export type CurrencyScalarWhereWithAggregatesInput = {
    AND?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    OR?: CurrencyScalarWhereWithAggregatesInput[]
    NOT?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Currency"> | string
    name?: StringWithAggregatesFilter<"Currency"> | string
    code?: StringWithAggregatesFilter<"Currency"> | string
    demonym?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    majorSingle?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    majorPlural?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    ISOnum?: IntNullableWithAggregatesFilter<"Currency"> | number | null
    symbol?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    symbolNative?: StringWithAggregatesFilter<"Currency"> | string
    minorSingle?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    minorPlural?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    ISOdigits?: IntNullableWithAggregatesFilter<"Currency"> | number | null
    decimals?: IntNullableWithAggregatesFilter<"Currency"> | number | null
    numToBasic?: IntNullableWithAggregatesFilter<"Currency"> | number | null
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: StringFilter<"Country"> | string
    isoCode?: StringFilter<"Country"> | string
    name?: StringFilter<"Country"> | string
    currency?: StringFilter<"Country"> | string
    createdAt?: DateTimeFilter<"Country"> | Date | string
    updatedAt?: DateTimeFilter<"Country"> | Date | string
    states?: StateListRelationFilter
    Merchants?: MerchantListRelationFilter
    store?: StoreListRelationFilter
    brand?: BrandListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    states?: StateOrderByRelationAggregateInput
    Merchants?: MerchantOrderByRelationAggregateInput
    store?: StoreOrderByRelationAggregateInput
    brand?: BrandOrderByRelationAggregateInput
    _relevance?: CountryOrderByRelevanceInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    isoCode?: StringFilter<"Country"> | string
    name?: StringFilter<"Country"> | string
    currency?: StringFilter<"Country"> | string
    createdAt?: DateTimeFilter<"Country"> | Date | string
    updatedAt?: DateTimeFilter<"Country"> | Date | string
    states?: StateListRelationFilter
    Merchants?: MerchantListRelationFilter
    store?: StoreListRelationFilter
    brand?: BrandListRelationFilter
  }, "id">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Country"> | string
    isoCode?: StringWithAggregatesFilter<"Country"> | string
    name?: StringWithAggregatesFilter<"Country"> | string
    currency?: StringWithAggregatesFilter<"Country"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Country"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Country"> | Date | string
  }

  export type StateWhereInput = {
    AND?: StateWhereInput | StateWhereInput[]
    OR?: StateWhereInput[]
    NOT?: StateWhereInput | StateWhereInput[]
    id?: StringFilter<"State"> | string
    isoCode?: StringFilter<"State"> | string
    name?: StringFilter<"State"> | string
    countryId?: StringFilter<"State"> | string
    createdAt?: DateTimeFilter<"State"> | Date | string
    updatedAt?: DateTimeFilter<"State"> | Date | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    merchants?: MerchantListRelationFilter
    brands?: BrandListRelationFilter
    users?: UserListRelationFilter
  }

  export type StateOrderByWithRelationInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    country?: CountryOrderByWithRelationInput
    merchants?: MerchantOrderByRelationAggregateInput
    brands?: BrandOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    _relevance?: StateOrderByRelevanceInput
  }

  export type StateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StateWhereInput | StateWhereInput[]
    OR?: StateWhereInput[]
    NOT?: StateWhereInput | StateWhereInput[]
    isoCode?: StringFilter<"State"> | string
    name?: StringFilter<"State"> | string
    countryId?: StringFilter<"State"> | string
    createdAt?: DateTimeFilter<"State"> | Date | string
    updatedAt?: DateTimeFilter<"State"> | Date | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    merchants?: MerchantListRelationFilter
    brands?: BrandListRelationFilter
    users?: UserListRelationFilter
  }, "id">

  export type StateOrderByWithAggregationInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StateCountOrderByAggregateInput
    _max?: StateMaxOrderByAggregateInput
    _min?: StateMinOrderByAggregateInput
  }

  export type StateScalarWhereWithAggregatesInput = {
    AND?: StateScalarWhereWithAggregatesInput | StateScalarWhereWithAggregatesInput[]
    OR?: StateScalarWhereWithAggregatesInput[]
    NOT?: StateScalarWhereWithAggregatesInput | StateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"State"> | string
    isoCode?: StringWithAggregatesFilter<"State"> | string
    name?: StringWithAggregatesFilter<"State"> | string
    countryId?: StringWithAggregatesFilter<"State"> | string
    createdAt?: DateTimeWithAggregatesFilter<"State"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"State"> | Date | string
  }

  export type MerchantWhereInput = {
    AND?: MerchantWhereInput | MerchantWhereInput[]
    OR?: MerchantWhereInput[]
    NOT?: MerchantWhereInput | MerchantWhereInput[]
    id?: StringFilter<"Merchant"> | string
    name?: StringFilter<"Merchant"> | string
    slug?: StringFilter<"Merchant"> | string
    status?: EnumStatusFilter<"Merchant"> | $Enums.Status
    phoneNumber?: StringFilter<"Merchant"> | string
    genericEmail?: StringFilter<"Merchant"> | string
    invoiceEmail?: StringNullableFilter<"Merchant"> | string | null
    address1?: StringFilter<"Merchant"> | string
    address2?: StringNullableFilter<"Merchant"> | string | null
    suburb?: StringFilter<"Merchant"> | string
    postcode?: StringFilter<"Merchant"> | string
    stateId?: StringFilter<"Merchant"> | string
    countryId?: StringFilter<"Merchant"> | string
    abn?: StringFilter<"Merchant"> | string
    acn?: StringFilter<"Merchant"> | string
    logoUrl?: StringNullableFilter<"Merchant"> | string | null
    primaryContactId?: StringNullableFilter<"Merchant"> | string | null
    createdAt?: DateTimeFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeFilter<"Merchant"> | Date | string
    state?: XOR<StateScalarRelationFilter, StateWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    primaryContact?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    brands?: BrandListRelationFilter
    merchantUser?: MerchantUserListRelationFilter
  }

  export type MerchantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrderInput | SortOrder
    address1?: SortOrder
    address2?: SortOrderInput | SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    primaryContactId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: StateOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    primaryContact?: UserOrderByWithRelationInput
    brands?: BrandOrderByRelationAggregateInput
    merchantUser?: MerchantUserOrderByRelationAggregateInput
    _relevance?: MerchantOrderByRelevanceInput
  }

  export type MerchantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    primaryContactId?: string
    AND?: MerchantWhereInput | MerchantWhereInput[]
    OR?: MerchantWhereInput[]
    NOT?: MerchantWhereInput | MerchantWhereInput[]
    name?: StringFilter<"Merchant"> | string
    status?: EnumStatusFilter<"Merchant"> | $Enums.Status
    phoneNumber?: StringFilter<"Merchant"> | string
    genericEmail?: StringFilter<"Merchant"> | string
    invoiceEmail?: StringNullableFilter<"Merchant"> | string | null
    address1?: StringFilter<"Merchant"> | string
    address2?: StringNullableFilter<"Merchant"> | string | null
    suburb?: StringFilter<"Merchant"> | string
    postcode?: StringFilter<"Merchant"> | string
    stateId?: StringFilter<"Merchant"> | string
    countryId?: StringFilter<"Merchant"> | string
    abn?: StringFilter<"Merchant"> | string
    acn?: StringFilter<"Merchant"> | string
    logoUrl?: StringNullableFilter<"Merchant"> | string | null
    createdAt?: DateTimeFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeFilter<"Merchant"> | Date | string
    state?: XOR<StateScalarRelationFilter, StateWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    primaryContact?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    brands?: BrandListRelationFilter
    merchantUser?: MerchantUserListRelationFilter
  }, "id" | "slug" | "primaryContactId">

  export type MerchantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrderInput | SortOrder
    address1?: SortOrder
    address2?: SortOrderInput | SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    primaryContactId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MerchantCountOrderByAggregateInput
    _max?: MerchantMaxOrderByAggregateInput
    _min?: MerchantMinOrderByAggregateInput
  }

  export type MerchantScalarWhereWithAggregatesInput = {
    AND?: MerchantScalarWhereWithAggregatesInput | MerchantScalarWhereWithAggregatesInput[]
    OR?: MerchantScalarWhereWithAggregatesInput[]
    NOT?: MerchantScalarWhereWithAggregatesInput | MerchantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Merchant"> | string
    name?: StringWithAggregatesFilter<"Merchant"> | string
    slug?: StringWithAggregatesFilter<"Merchant"> | string
    status?: EnumStatusWithAggregatesFilter<"Merchant"> | $Enums.Status
    phoneNumber?: StringWithAggregatesFilter<"Merchant"> | string
    genericEmail?: StringWithAggregatesFilter<"Merchant"> | string
    invoiceEmail?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    address1?: StringWithAggregatesFilter<"Merchant"> | string
    address2?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    suburb?: StringWithAggregatesFilter<"Merchant"> | string
    postcode?: StringWithAggregatesFilter<"Merchant"> | string
    stateId?: StringWithAggregatesFilter<"Merchant"> | string
    countryId?: StringWithAggregatesFilter<"Merchant"> | string
    abn?: StringWithAggregatesFilter<"Merchant"> | string
    acn?: StringWithAggregatesFilter<"Merchant"> | string
    logoUrl?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    primaryContactId?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Merchant"> | Date | string
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: StringFilter<"Brand"> | string
    status?: EnumStatusFilter<"Brand"> | $Enums.Status
    merchantId?: StringFilter<"Brand"> | string
    name?: StringFilter<"Brand"> | string
    slug?: StringFilter<"Brand"> | string
    genericEmail?: StringFilter<"Brand"> | string
    invoiceEmail?: StringNullableFilter<"Brand"> | string | null
    tradingAsName?: StringFilter<"Brand"> | string
    logoUrl?: StringFilter<"Brand"> | string
    address1?: StringFilter<"Brand"> | string
    address2?: StringNullableFilter<"Brand"> | string | null
    suburb?: StringFilter<"Brand"> | string
    postcode?: StringFilter<"Brand"> | string
    stateId?: StringFilter<"Brand"> | string
    countryId?: StringFilter<"Brand"> | string
    abn?: StringNullableFilter<"Brand"> | string | null
    acn?: StringNullableFilter<"Brand"> | string | null
    phoneNumber?: StringFilter<"Brand"> | string
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    primaryContactId?: StringNullableFilter<"Brand"> | string | null
    merchant?: XOR<MerchantScalarRelationFilter, MerchantWhereInput>
    state?: XOR<StateScalarRelationFilter, StateWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    primaryContact?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    stores?: StoreListRelationFilter
    BrandUser?: XOR<BrandUserNullableScalarRelationFilter, BrandUserWhereInput> | null
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrderInput | SortOrder
    tradingAsName?: SortOrder
    logoUrl?: SortOrder
    address1?: SortOrder
    address2?: SortOrderInput | SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrderInput | SortOrder
    acn?: SortOrderInput | SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    primaryContactId?: SortOrderInput | SortOrder
    merchant?: MerchantOrderByWithRelationInput
    state?: StateOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    primaryContact?: UserOrderByWithRelationInput
    stores?: StoreOrderByRelationAggregateInput
    BrandUser?: BrandUserOrderByWithRelationInput
    _relevance?: BrandOrderByRelevanceInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    primaryContactId?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    status?: EnumStatusFilter<"Brand"> | $Enums.Status
    merchantId?: StringFilter<"Brand"> | string
    name?: StringFilter<"Brand"> | string
    genericEmail?: StringFilter<"Brand"> | string
    invoiceEmail?: StringNullableFilter<"Brand"> | string | null
    tradingAsName?: StringFilter<"Brand"> | string
    logoUrl?: StringFilter<"Brand"> | string
    address1?: StringFilter<"Brand"> | string
    address2?: StringNullableFilter<"Brand"> | string | null
    suburb?: StringFilter<"Brand"> | string
    postcode?: StringFilter<"Brand"> | string
    stateId?: StringFilter<"Brand"> | string
    countryId?: StringFilter<"Brand"> | string
    abn?: StringNullableFilter<"Brand"> | string | null
    acn?: StringNullableFilter<"Brand"> | string | null
    phoneNumber?: StringFilter<"Brand"> | string
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    merchant?: XOR<MerchantScalarRelationFilter, MerchantWhereInput>
    state?: XOR<StateScalarRelationFilter, StateWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    primaryContact?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    stores?: StoreListRelationFilter
    BrandUser?: XOR<BrandUserNullableScalarRelationFilter, BrandUserWhereInput> | null
  }, "id" | "slug" | "primaryContactId">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrderInput | SortOrder
    tradingAsName?: SortOrder
    logoUrl?: SortOrder
    address1?: SortOrder
    address2?: SortOrderInput | SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrderInput | SortOrder
    acn?: SortOrderInput | SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    primaryContactId?: SortOrderInput | SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Brand"> | string
    status?: EnumStatusWithAggregatesFilter<"Brand"> | $Enums.Status
    merchantId?: StringWithAggregatesFilter<"Brand"> | string
    name?: StringWithAggregatesFilter<"Brand"> | string
    slug?: StringWithAggregatesFilter<"Brand"> | string
    genericEmail?: StringWithAggregatesFilter<"Brand"> | string
    invoiceEmail?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    tradingAsName?: StringWithAggregatesFilter<"Brand"> | string
    logoUrl?: StringWithAggregatesFilter<"Brand"> | string
    address1?: StringWithAggregatesFilter<"Brand"> | string
    address2?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    suburb?: StringWithAggregatesFilter<"Brand"> | string
    postcode?: StringWithAggregatesFilter<"Brand"> | string
    stateId?: StringWithAggregatesFilter<"Brand"> | string
    countryId?: StringWithAggregatesFilter<"Brand"> | string
    abn?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    acn?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    phoneNumber?: StringWithAggregatesFilter<"Brand"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    primaryContactId?: StringNullableWithAggregatesFilter<"Brand"> | string | null
  }

  export type StoreWhereInput = {
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    id?: StringFilter<"Store"> | string
    name?: StringFilter<"Store"> | string
    slug?: StringFilter<"Store"> | string
    status?: EnumStatusFilter<"Store"> | $Enums.Status
    brandId?: StringFilter<"Store"> | string
    address1?: StringFilter<"Store"> | string
    address2?: StringNullableFilter<"Store"> | string | null
    city?: StringFilter<"Store"> | string
    region?: StringFilter<"Store"> | string
    postalCode?: StringFilter<"Store"> | string
    countryId?: StringFilter<"Store"> | string
    formattedAddress?: StringFilter<"Store"> | string
    latitude?: FloatFilter<"Store"> | number
    longitude?: FloatFilter<"Store"> | number
    abn?: StringNullableFilter<"Store"> | string | null
    acn?: StringNullableFilter<"Store"> | string | null
    phoneNumber?: StringFilter<"Store"> | string
    currencyId?: StringFilter<"Store"> | string
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    receipts?: ReceiptListRelationFilter
  }

  export type StoreOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    address1?: SortOrder
    address2?: SortOrderInput | SortOrder
    city?: SortOrder
    region?: SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    abn?: SortOrderInput | SortOrder
    acn?: SortOrderInput | SortOrder
    phoneNumber?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brand?: BrandOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    currency?: CurrencyOrderByWithRelationInput
    receipts?: ReceiptOrderByRelationAggregateInput
    _relevance?: StoreOrderByRelevanceInput
  }

  export type StoreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    name?: StringFilter<"Store"> | string
    status?: EnumStatusFilter<"Store"> | $Enums.Status
    brandId?: StringFilter<"Store"> | string
    address1?: StringFilter<"Store"> | string
    address2?: StringNullableFilter<"Store"> | string | null
    city?: StringFilter<"Store"> | string
    region?: StringFilter<"Store"> | string
    postalCode?: StringFilter<"Store"> | string
    countryId?: StringFilter<"Store"> | string
    formattedAddress?: StringFilter<"Store"> | string
    latitude?: FloatFilter<"Store"> | number
    longitude?: FloatFilter<"Store"> | number
    abn?: StringNullableFilter<"Store"> | string | null
    acn?: StringNullableFilter<"Store"> | string | null
    phoneNumber?: StringFilter<"Store"> | string
    currencyId?: StringFilter<"Store"> | string
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    receipts?: ReceiptListRelationFilter
  }, "id" | "slug">

  export type StoreOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    address1?: SortOrder
    address2?: SortOrderInput | SortOrder
    city?: SortOrder
    region?: SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    abn?: SortOrderInput | SortOrder
    acn?: SortOrderInput | SortOrder
    phoneNumber?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StoreCountOrderByAggregateInput
    _avg?: StoreAvgOrderByAggregateInput
    _max?: StoreMaxOrderByAggregateInput
    _min?: StoreMinOrderByAggregateInput
    _sum?: StoreSumOrderByAggregateInput
  }

  export type StoreScalarWhereWithAggregatesInput = {
    AND?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    OR?: StoreScalarWhereWithAggregatesInput[]
    NOT?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Store"> | string
    name?: StringWithAggregatesFilter<"Store"> | string
    slug?: StringWithAggregatesFilter<"Store"> | string
    status?: EnumStatusWithAggregatesFilter<"Store"> | $Enums.Status
    brandId?: StringWithAggregatesFilter<"Store"> | string
    address1?: StringWithAggregatesFilter<"Store"> | string
    address2?: StringNullableWithAggregatesFilter<"Store"> | string | null
    city?: StringWithAggregatesFilter<"Store"> | string
    region?: StringWithAggregatesFilter<"Store"> | string
    postalCode?: StringWithAggregatesFilter<"Store"> | string
    countryId?: StringWithAggregatesFilter<"Store"> | string
    formattedAddress?: StringWithAggregatesFilter<"Store"> | string
    latitude?: FloatWithAggregatesFilter<"Store"> | number
    longitude?: FloatWithAggregatesFilter<"Store"> | number
    abn?: StringNullableWithAggregatesFilter<"Store"> | string | null
    acn?: StringNullableWithAggregatesFilter<"Store"> | string | null
    phoneNumber?: StringWithAggregatesFilter<"Store"> | string
    currencyId?: StringWithAggregatesFilter<"Store"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Store"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Store"> | Date | string
  }

  export type ReceiptWhereInput = {
    AND?: ReceiptWhereInput | ReceiptWhereInput[]
    OR?: ReceiptWhereInput[]
    NOT?: ReceiptWhereInput | ReceiptWhereInput[]
    id?: StringFilter<"Receipt"> | string
    receiptNumber?: StringFilter<"Receipt"> | string
    consumerId?: StringFilter<"Receipt"> | string
    storeId?: StringFilter<"Receipt"> | string
    subTotal?: FloatFilter<"Receipt"> | number
    tax?: FloatFilter<"Receipt"> | number
    cardSurcharge?: FloatFilter<"Receipt"> | number
    otherInformation?: StringNullableListFilter<"Receipt">
    receiptDateTime?: DateTimeFilter<"Receipt"> | Date | string
    createdAt?: DateTimeFilter<"Receipt"> | Date | string
    updatedAt?: DateTimeFilter<"Receipt"> | Date | string
    consumer?: XOR<ConsumerScalarRelationFilter, ConsumerWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    receiptItems?: ReceiptItemListRelationFilter
    receiptPayments?: ReceiptPaymentListRelationFilter
  }

  export type ReceiptOrderByWithRelationInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    cardSurcharge?: SortOrder
    otherInformation?: SortOrder
    receiptDateTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consumer?: ConsumerOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    receiptItems?: ReceiptItemOrderByRelationAggregateInput
    receiptPayments?: ReceiptPaymentOrderByRelationAggregateInput
    _relevance?: ReceiptOrderByRelevanceInput
  }

  export type ReceiptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptWhereInput | ReceiptWhereInput[]
    OR?: ReceiptWhereInput[]
    NOT?: ReceiptWhereInput | ReceiptWhereInput[]
    receiptNumber?: StringFilter<"Receipt"> | string
    consumerId?: StringFilter<"Receipt"> | string
    storeId?: StringFilter<"Receipt"> | string
    subTotal?: FloatFilter<"Receipt"> | number
    tax?: FloatFilter<"Receipt"> | number
    cardSurcharge?: FloatFilter<"Receipt"> | number
    otherInformation?: StringNullableListFilter<"Receipt">
    receiptDateTime?: DateTimeFilter<"Receipt"> | Date | string
    createdAt?: DateTimeFilter<"Receipt"> | Date | string
    updatedAt?: DateTimeFilter<"Receipt"> | Date | string
    consumer?: XOR<ConsumerScalarRelationFilter, ConsumerWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    receiptItems?: ReceiptItemListRelationFilter
    receiptPayments?: ReceiptPaymentListRelationFilter
  }, "id">

  export type ReceiptOrderByWithAggregationInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    cardSurcharge?: SortOrder
    otherInformation?: SortOrder
    receiptDateTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReceiptCountOrderByAggregateInput
    _avg?: ReceiptAvgOrderByAggregateInput
    _max?: ReceiptMaxOrderByAggregateInput
    _min?: ReceiptMinOrderByAggregateInput
    _sum?: ReceiptSumOrderByAggregateInput
  }

  export type ReceiptScalarWhereWithAggregatesInput = {
    AND?: ReceiptScalarWhereWithAggregatesInput | ReceiptScalarWhereWithAggregatesInput[]
    OR?: ReceiptScalarWhereWithAggregatesInput[]
    NOT?: ReceiptScalarWhereWithAggregatesInput | ReceiptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Receipt"> | string
    receiptNumber?: StringWithAggregatesFilter<"Receipt"> | string
    consumerId?: StringWithAggregatesFilter<"Receipt"> | string
    storeId?: StringWithAggregatesFilter<"Receipt"> | string
    subTotal?: FloatWithAggregatesFilter<"Receipt"> | number
    tax?: FloatWithAggregatesFilter<"Receipt"> | number
    cardSurcharge?: FloatWithAggregatesFilter<"Receipt"> | number
    otherInformation?: StringNullableListFilter<"Receipt">
    receiptDateTime?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
  }

  export type ReceiptPaymentWhereInput = {
    AND?: ReceiptPaymentWhereInput | ReceiptPaymentWhereInput[]
    OR?: ReceiptPaymentWhereInput[]
    NOT?: ReceiptPaymentWhereInput | ReceiptPaymentWhereInput[]
    id?: StringFilter<"ReceiptPayment"> | string
    receiptId?: StringFilter<"ReceiptPayment"> | string
    paymentType?: EnumPaymentTypeFilter<"ReceiptPayment"> | $Enums.PaymentType
    amount?: FloatFilter<"ReceiptPayment"> | number
    terminal?: StringNullableFilter<"ReceiptPayment"> | string | null
    reference?: StringNullableFilter<"ReceiptPayment"> | string | null
    cardNo?: StringNullableFilter<"ReceiptPayment"> | string | null
    createdAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }

  export type ReceiptPaymentOrderByWithRelationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    cardNo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    receipt?: ReceiptOrderByWithRelationInput
    _relevance?: ReceiptPaymentOrderByRelevanceInput
  }

  export type ReceiptPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptPaymentWhereInput | ReceiptPaymentWhereInput[]
    OR?: ReceiptPaymentWhereInput[]
    NOT?: ReceiptPaymentWhereInput | ReceiptPaymentWhereInput[]
    receiptId?: StringFilter<"ReceiptPayment"> | string
    paymentType?: EnumPaymentTypeFilter<"ReceiptPayment"> | $Enums.PaymentType
    amount?: FloatFilter<"ReceiptPayment"> | number
    terminal?: StringNullableFilter<"ReceiptPayment"> | string | null
    reference?: StringNullableFilter<"ReceiptPayment"> | string | null
    cardNo?: StringNullableFilter<"ReceiptPayment"> | string | null
    createdAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }, "id">

  export type ReceiptPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    cardNo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReceiptPaymentCountOrderByAggregateInput
    _avg?: ReceiptPaymentAvgOrderByAggregateInput
    _max?: ReceiptPaymentMaxOrderByAggregateInput
    _min?: ReceiptPaymentMinOrderByAggregateInput
    _sum?: ReceiptPaymentSumOrderByAggregateInput
  }

  export type ReceiptPaymentScalarWhereWithAggregatesInput = {
    AND?: ReceiptPaymentScalarWhereWithAggregatesInput | ReceiptPaymentScalarWhereWithAggregatesInput[]
    OR?: ReceiptPaymentScalarWhereWithAggregatesInput[]
    NOT?: ReceiptPaymentScalarWhereWithAggregatesInput | ReceiptPaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReceiptPayment"> | string
    receiptId?: StringWithAggregatesFilter<"ReceiptPayment"> | string
    paymentType?: EnumPaymentTypeWithAggregatesFilter<"ReceiptPayment"> | $Enums.PaymentType
    amount?: FloatWithAggregatesFilter<"ReceiptPayment"> | number
    terminal?: StringNullableWithAggregatesFilter<"ReceiptPayment"> | string | null
    reference?: StringNullableWithAggregatesFilter<"ReceiptPayment"> | string | null
    cardNo?: StringNullableWithAggregatesFilter<"ReceiptPayment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ReceiptPayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReceiptPayment"> | Date | string
  }

  export type ReceiptItemWhereInput = {
    AND?: ReceiptItemWhereInput | ReceiptItemWhereInput[]
    OR?: ReceiptItemWhereInput[]
    NOT?: ReceiptItemWhereInput | ReceiptItemWhereInput[]
    id?: StringFilter<"ReceiptItem"> | string
    receiptId?: StringFilter<"ReceiptItem"> | string
    name?: StringFilter<"ReceiptItem"> | string
    sku?: StringNullableFilter<"ReceiptItem"> | string | null
    description?: StringNullableFilter<"ReceiptItem"> | string | null
    modelNumber?: StringNullableFilter<"ReceiptItem"> | string | null
    quantity?: IntFilter<"ReceiptItem"> | number
    itemCost?: FloatFilter<"ReceiptItem"> | number
    itemTax?: FloatFilter<"ReceiptItem"> | number
    subTotal?: FloatFilter<"ReceiptItem"> | number
    tax?: FloatFilter<"ReceiptItem"> | number
    createdAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }

  export type ReceiptItemOrderByWithRelationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    modelNumber?: SortOrderInput | SortOrder
    quantity?: SortOrder
    itemCost?: SortOrder
    itemTax?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    receipt?: ReceiptOrderByWithRelationInput
    _relevance?: ReceiptItemOrderByRelevanceInput
  }

  export type ReceiptItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptItemWhereInput | ReceiptItemWhereInput[]
    OR?: ReceiptItemWhereInput[]
    NOT?: ReceiptItemWhereInput | ReceiptItemWhereInput[]
    receiptId?: StringFilter<"ReceiptItem"> | string
    name?: StringFilter<"ReceiptItem"> | string
    sku?: StringNullableFilter<"ReceiptItem"> | string | null
    description?: StringNullableFilter<"ReceiptItem"> | string | null
    modelNumber?: StringNullableFilter<"ReceiptItem"> | string | null
    quantity?: IntFilter<"ReceiptItem"> | number
    itemCost?: FloatFilter<"ReceiptItem"> | number
    itemTax?: FloatFilter<"ReceiptItem"> | number
    subTotal?: FloatFilter<"ReceiptItem"> | number
    tax?: FloatFilter<"ReceiptItem"> | number
    createdAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }, "id">

  export type ReceiptItemOrderByWithAggregationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    modelNumber?: SortOrderInput | SortOrder
    quantity?: SortOrder
    itemCost?: SortOrder
    itemTax?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReceiptItemCountOrderByAggregateInput
    _avg?: ReceiptItemAvgOrderByAggregateInput
    _max?: ReceiptItemMaxOrderByAggregateInput
    _min?: ReceiptItemMinOrderByAggregateInput
    _sum?: ReceiptItemSumOrderByAggregateInput
  }

  export type ReceiptItemScalarWhereWithAggregatesInput = {
    AND?: ReceiptItemScalarWhereWithAggregatesInput | ReceiptItemScalarWhereWithAggregatesInput[]
    OR?: ReceiptItemScalarWhereWithAggregatesInput[]
    NOT?: ReceiptItemScalarWhereWithAggregatesInput | ReceiptItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReceiptItem"> | string
    receiptId?: StringWithAggregatesFilter<"ReceiptItem"> | string
    name?: StringWithAggregatesFilter<"ReceiptItem"> | string
    sku?: StringNullableWithAggregatesFilter<"ReceiptItem"> | string | null
    description?: StringNullableWithAggregatesFilter<"ReceiptItem"> | string | null
    modelNumber?: StringNullableWithAggregatesFilter<"ReceiptItem"> | string | null
    quantity?: IntWithAggregatesFilter<"ReceiptItem"> | number
    itemCost?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    itemTax?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    subTotal?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    tax?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ReceiptItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReceiptItem"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type SessionCreateInput = {
    id?: string
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    twoFactorVerified?: boolean
    rememberMe: boolean
    user: UserCreateNestedOneWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    twoFactorVerified?: boolean
    userId: string
    rememberMe: boolean
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    rememberMe?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    rememberMe?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionCreateManyInput = {
    id?: string
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    twoFactorVerified?: boolean
    userId: string
    rememberMe: boolean
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    rememberMe?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    rememberMe?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailVerificationRequestCreateInput = {
    id: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEmailVerificationRequestInput
  }

  export type EmailVerificationRequestUncheckedCreateInput = {
    id: string
    userId: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailVerificationRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmailVerificationRequestNestedInput
  }

  export type EmailVerificationRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationRequestCreateManyInput = {
    id: string
    userId: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailVerificationRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetSessionCreateInput = {
    id: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPasswordResetSessionInput
  }

  export type PasswordResetSessionUncheckedCreateInput = {
    id: string
    userId: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPasswordResetSessionNestedInput
  }

  export type PasswordResetSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetSessionCreateManyInput = {
    id: string
    userId: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumerCreateInput = {
    id?: string
    barcode: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConsumerUserInput
    Receipts?: ReceiptCreateNestedManyWithoutConsumerInput
  }

  export type ConsumerUncheckedCreateInput = {
    id?: string
    barcode: string
    userId: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Receipts?: ReceiptUncheckedCreateNestedManyWithoutConsumerInput
  }

  export type ConsumerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConsumerUserNestedInput
    Receipts?: ReceiptUpdateManyWithoutConsumerNestedInput
  }

  export type ConsumerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Receipts?: ReceiptUncheckedUpdateManyWithoutConsumerNestedInput
  }

  export type ConsumerCreateManyInput = {
    id?: string
    barcode: string
    userId: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantUserCreateInput = {
    id?: string
    jobTitle: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutMerchantUserInput
    brandUsers?: BrandUserCreateNestedManyWithoutMerchantUserInput
    user: UserCreateNestedOneWithoutMerchantUserInput
  }

  export type MerchantUserUncheckedCreateInput = {
    id?: string
    jobTitle: string
    merchantId: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    brandUsers?: BrandUserUncheckedCreateNestedManyWithoutMerchantUserInput
  }

  export type MerchantUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutMerchantUserNestedInput
    brandUsers?: BrandUserUpdateManyWithoutMerchantUserNestedInput
    user?: UserUpdateOneRequiredWithoutMerchantUserNestedInput
  }

  export type MerchantUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantId?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandUsers?: BrandUserUncheckedUpdateManyWithoutMerchantUserNestedInput
  }

  export type MerchantUserCreateManyInput = {
    id?: string
    jobTitle: string
    merchantId: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MerchantUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantId?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserCreateInput = {
    id?: string
    jobTitle: string
    adminRole?: AdminUserCreateadminRoleInput | $Enums.AdminRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAdminUserInput
  }

  export type AdminUserUncheckedCreateInput = {
    id?: string
    jobTitle: string
    adminRole?: AdminUserCreateadminRoleInput | $Enums.AdminRole[]
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminRole?: AdminUserUpdateadminRoleInput | $Enums.AdminRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAdminUserNestedInput
  }

  export type AdminUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminRole?: AdminUserUpdateadminRoleInput | $Enums.AdminRole[]
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserCreateManyInput = {
    id?: string
    jobTitle: string
    adminRole?: AdminUserCreateadminRoleInput | $Enums.AdminRole[]
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminRole?: AdminUserUpdateadminRoleInput | $Enums.AdminRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminRole?: AdminUserUpdateadminRoleInput | $Enums.AdminRole[]
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUserCreateInput = {
    id?: string
    brandRole?: BrandUserCreatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutBrandUserInput
    MerchantUser?: MerchantUserCreateNestedOneWithoutBrandUsersInput
  }

  export type BrandUserUncheckedCreateInput = {
    id?: string
    brandId: string
    merchantUserId?: string | null
    brandRole?: BrandUserCreatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutBrandUserNestedInput
    MerchantUser?: MerchantUserUpdateOneWithoutBrandUsersNestedInput
  }

  export type BrandUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    merchantUserId?: NullableStringFieldUpdateOperationsInput | string | null
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUserCreateManyInput = {
    id?: string
    brandId: string
    merchantUserId?: string | null
    brandRole?: BrandUserCreatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    merchantUserId?: NullableStringFieldUpdateOperationsInput | string | null
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyCreateInput = {
    id?: string
    name: string
    code: string
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbol?: string | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    decimals?: number | null
    numToBasic?: number | null
    Store?: StoreCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbol?: string | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    decimals?: number | null
    numToBasic?: number | null
    Store?: StoreUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
    Store?: StoreUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
    Store?: StoreUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyCreateManyInput = {
    id?: string
    name: string
    code: string
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbol?: string | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    decimals?: number | null
    numToBasic?: number | null
  }

  export type CurrencyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CurrencyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CountryCreateInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    states?: StateCreateNestedManyWithoutCountryInput
    Merchants?: MerchantCreateNestedManyWithoutCountryInput
    store?: StoreCreateNestedManyWithoutCountryInput
    brand?: BrandCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    states?: StateUncheckedCreateNestedManyWithoutCountryInput
    Merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    store?: StoreUncheckedCreateNestedManyWithoutCountryInput
    brand?: BrandUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    states?: StateUpdateManyWithoutCountryNestedInput
    Merchants?: MerchantUpdateManyWithoutCountryNestedInput
    store?: StoreUpdateManyWithoutCountryNestedInput
    brand?: BrandUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    states?: StateUncheckedUpdateManyWithoutCountryNestedInput
    Merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    store?: StoreUncheckedUpdateManyWithoutCountryNestedInput
    brand?: BrandUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CountryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateCreateInput = {
    id?: string
    isoCode: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutStatesInput
    merchants?: MerchantCreateNestedManyWithoutStateInput
    brands?: BrandCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateInput = {
    id?: string
    isoCode: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutStateInput
    brands?: BrandUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutStatesNestedInput
    merchants?: MerchantUpdateManyWithoutStateNestedInput
    brands?: BrandUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutStateNestedInput
    brands?: BrandUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
  }

  export type StateCreateManyInput = {
    id?: string
    isoCode: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantCreateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn: string
    acn: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutMerchantsInput
    country: CountryCreateNestedOneWithoutMerchantsInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactMerchantInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
    merchantUser?: MerchantUserCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn: string
    acn: string
    logoUrl?: string | null
    primaryContactId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
    merchantUser?: MerchantUserUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutMerchantsNestedInput
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactMerchantNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
    merchantUser?: MerchantUserUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
    merchantUser?: MerchantUserUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantCreateManyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn: string
    acn: string
    logoUrl?: string | null
    primaryContactId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MerchantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandCreateInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    state: StateCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserCreateNestedOneWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserUncheckedCreateNestedOneWithoutBrandInput
  }

  export type BrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    state?: StateUpdateOneRequiredWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUncheckedUpdateOneWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
  }

  export type BrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StoreCreateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoreInput
    currency: CurrencyCreateNestedOneWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    countryId: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoreNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreCreateManyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    countryId: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptCreateInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptCreateManyInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentCreateInput = {
    id?: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receipt: ReceiptCreateNestedOneWithoutReceiptPaymentsInput
  }

  export type ReceiptPaymentUncheckedCreateInput = {
    id?: string
    receiptId: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipt?: ReceiptUpdateOneRequiredWithoutReceiptPaymentsNestedInput
  }

  export type ReceiptPaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentCreateManyInput = {
    id?: string
    receiptId: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemCreateInput = {
    id?: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    quantity: number
    itemCost: number
    itemTax: number
    subTotal: number
    tax: number
    createdAt?: Date | string
    updatedAt?: Date | string
    receipt: ReceiptCreateNestedOneWithoutReceiptItemsInput
  }

  export type ReceiptItemUncheckedCreateInput = {
    id?: string
    receiptId: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    quantity: number
    itemCost: number
    itemTax: number
    subTotal: number
    tax: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    itemTax?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipt?: ReceiptUpdateOneRequiredWithoutReceiptItemsNestedInput
  }

  export type ReceiptItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    itemTax?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemCreateManyInput = {
    id?: string
    receiptId: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    quantity: number
    itemCost: number
    itemTax: number
    subTotal: number
    tax: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    itemTax?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    itemTax?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type StateNullableScalarRelationFilter = {
    is?: StateWhereInput | null
    isNot?: StateWhereInput | null
  }

  export type ConsumerNullableScalarRelationFilter = {
    is?: ConsumerWhereInput | null
    isNot?: ConsumerWhereInput | null
  }

  export type MerchantUserNullableScalarRelationFilter = {
    is?: MerchantUserWhereInput | null
    isNot?: MerchantUserWhereInput | null
  }

  export type AdminUserNullableScalarRelationFilter = {
    is?: AdminUserWhereInput | null
    isNot?: AdminUserWhereInput | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type EmailVerificationRequestListRelationFilter = {
    every?: EmailVerificationRequestWhereInput
    some?: EmailVerificationRequestWhereInput
    none?: EmailVerificationRequestWhereInput
  }

  export type PasswordResetSessionListRelationFilter = {
    every?: PasswordResetSessionWhereInput
    some?: PasswordResetSessionWhereInput
    none?: PasswordResetSessionWhereInput
  }

  export type MerchantNullableScalarRelationFilter = {
    is?: MerchantWhereInput | null
    isNot?: MerchantWhereInput | null
  }

  export type BrandListRelationFilter = {
    every?: BrandWhereInput
    some?: BrandWhereInput
    none?: BrandWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailVerificationRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PasswordResetSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedTime?: SortOrder
    passwordVerified?: SortOrder
    postcode?: SortOrder
    city?: SortOrder
    stateId?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    image?: SortOrder
    role?: SortOrder
    totpKey?: SortOrder
    recoveryCodes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedTime?: SortOrder
    passwordVerified?: SortOrder
    postcode?: SortOrder
    city?: SortOrder
    stateId?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    image?: SortOrder
    totpKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedTime?: SortOrder
    passwordVerified?: SortOrder
    postcode?: SortOrder
    city?: SortOrder
    stateId?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    image?: SortOrder
    totpKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    twoFactorVerified?: SortOrder
    userId?: SortOrder
    rememberMe?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    twoFactorVerified?: SortOrder
    userId?: SortOrder
    rememberMe?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    twoFactorVerified?: SortOrder
    userId?: SortOrder
    rememberMe?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EmailVerificationRequestOrderByRelevanceInput = {
    fields: EmailVerificationRequestOrderByRelevanceFieldEnum | EmailVerificationRequestOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmailVerificationRequestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailVerificationRequestAvgOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type EmailVerificationRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailVerificationRequestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailVerificationRequestSumOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type PasswordResetSessionOrderByRelevanceInput = {
    fields: PasswordResetSessionOrderByRelevanceFieldEnum | PasswordResetSessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PasswordResetSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordResetSessionAvgOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type PasswordResetSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordResetSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordResetSessionSumOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type ReceiptListRelationFilter = {
    every?: ReceiptWhereInput
    some?: ReceiptWhereInput
    none?: ReceiptWhereInput
  }

  export type ReceiptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsumerOrderByRelevanceInput = {
    fields: ConsumerOrderByRelevanceFieldEnum | ConsumerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ConsumerCountOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsumerMaxOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsumerMinOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type EnumMerchantRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.MerchantRole[] | ListEnumMerchantRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.MerchantRole | EnumMerchantRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.MerchantRole[] | ListEnumMerchantRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.MerchantRole[] | ListEnumMerchantRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type MerchantScalarRelationFilter = {
    is?: MerchantWhereInput
    isNot?: MerchantWhereInput
  }

  export type BrandUserListRelationFilter = {
    every?: BrandUserWhereInput
    some?: BrandUserWhereInput
    none?: BrandUserWhereInput
  }

  export type BrandUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MerchantUserOrderByRelevanceInput = {
    fields: MerchantUserOrderByRelevanceFieldEnum | MerchantUserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MerchantUserCountOrderByAggregateInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    merchantId?: SortOrder
    merchantRole?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantUserMaxOrderByAggregateInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    merchantId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantUserMinOrderByAggregateInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    merchantId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAdminRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AdminUserOrderByRelevanceInput = {
    fields: AdminUserOrderByRelevanceFieldEnum | AdminUserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AdminUserCountOrderByAggregateInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    adminRole?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminUserMaxOrderByAggregateInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminUserMinOrderByAggregateInput = {
    id?: SortOrder
    jobTitle?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBrandRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.BrandRole[] | ListEnumBrandRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.BrandRole | EnumBrandRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.BrandRole[] | ListEnumBrandRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.BrandRole[] | ListEnumBrandRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BrandScalarRelationFilter = {
    is?: BrandWhereInput
    isNot?: BrandWhereInput
  }

  export type BrandUserOrderByRelevanceInput = {
    fields: BrandUserOrderByRelevanceFieldEnum | BrandUserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BrandUserCountOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    merchantUserId?: SortOrder
    brandRole?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandUserMaxOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    merchantUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandUserMinOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    merchantUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StoreListRelationFilter = {
    every?: StoreWhereInput
    some?: StoreWhereInput
    none?: StoreWhereInput
  }

  export type StoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CurrencyOrderByRelevanceInput = {
    fields: CurrencyOrderByRelevanceFieldEnum | CurrencyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CurrencyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    demonym?: SortOrder
    majorSingle?: SortOrder
    majorPlural?: SortOrder
    ISOnum?: SortOrder
    symbol?: SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrder
    minorPlural?: SortOrder
    ISOdigits?: SortOrder
    decimals?: SortOrder
    numToBasic?: SortOrder
  }

  export type CurrencyAvgOrderByAggregateInput = {
    ISOnum?: SortOrder
    ISOdigits?: SortOrder
    decimals?: SortOrder
    numToBasic?: SortOrder
  }

  export type CurrencyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    demonym?: SortOrder
    majorSingle?: SortOrder
    majorPlural?: SortOrder
    ISOnum?: SortOrder
    symbol?: SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrder
    minorPlural?: SortOrder
    ISOdigits?: SortOrder
    decimals?: SortOrder
    numToBasic?: SortOrder
  }

  export type CurrencyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    demonym?: SortOrder
    majorSingle?: SortOrder
    majorPlural?: SortOrder
    ISOnum?: SortOrder
    symbol?: SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrder
    minorPlural?: SortOrder
    ISOdigits?: SortOrder
    decimals?: SortOrder
    numToBasic?: SortOrder
  }

  export type CurrencySumOrderByAggregateInput = {
    ISOnum?: SortOrder
    ISOdigits?: SortOrder
    decimals?: SortOrder
    numToBasic?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StateListRelationFilter = {
    every?: StateWhereInput
    some?: StateWhereInput
    none?: StateWhereInput
  }

  export type MerchantListRelationFilter = {
    every?: MerchantWhereInput
    some?: MerchantWhereInput
    none?: MerchantWhereInput
  }

  export type StateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MerchantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryOrderByRelevanceInput = {
    fields: CountryOrderByRelevanceFieldEnum | CountryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountryScalarRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StateOrderByRelevanceInput = {
    fields: StateOrderByRelevanceFieldEnum | StateOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StateCountOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateMaxOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateMinOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateScalarRelationFilter = {
    is?: StateWhereInput
    isNot?: StateWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type MerchantUserListRelationFilter = {
    every?: MerchantUserWhereInput
    some?: MerchantUserWhereInput
    none?: MerchantUserWhereInput
  }

  export type MerchantUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MerchantOrderByRelevanceInput = {
    fields: MerchantOrderByRelevanceFieldEnum | MerchantOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MerchantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    logoUrl?: SortOrder
    primaryContactId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    logoUrl?: SortOrder
    primaryContactId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    logoUrl?: SortOrder
    primaryContactId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandUserNullableScalarRelationFilter = {
    is?: BrandUserWhereInput | null
    isNot?: BrandUserWhereInput | null
  }

  export type BrandOrderByRelevanceInput = {
    fields: BrandOrderByRelevanceFieldEnum | BrandOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    tradingAsName?: SortOrder
    logoUrl?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    primaryContactId?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    tradingAsName?: SortOrder
    logoUrl?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    primaryContactId?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    tradingAsName?: SortOrder
    logoUrl?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    suburb?: SortOrder
    postcode?: SortOrder
    stateId?: SortOrder
    countryId?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    primaryContactId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CurrencyScalarRelationFilter = {
    is?: CurrencyWhereInput
    isNot?: CurrencyWhereInput
  }

  export type StoreOrderByRelevanceInput = {
    fields: StoreOrderByRelevanceFieldEnum | StoreOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StoreCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    region?: SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    phoneNumber?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type StoreMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    region?: SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    phoneNumber?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    region?: SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    abn?: SortOrder
    acn?: SortOrder
    phoneNumber?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ConsumerScalarRelationFilter = {
    is?: ConsumerWhereInput
    isNot?: ConsumerWhereInput
  }

  export type StoreScalarRelationFilter = {
    is?: StoreWhereInput
    isNot?: StoreWhereInput
  }

  export type ReceiptItemListRelationFilter = {
    every?: ReceiptItemWhereInput
    some?: ReceiptItemWhereInput
    none?: ReceiptItemWhereInput
  }

  export type ReceiptPaymentListRelationFilter = {
    every?: ReceiptPaymentWhereInput
    some?: ReceiptPaymentWhereInput
    none?: ReceiptPaymentWhereInput
  }

  export type ReceiptItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiptPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiptOrderByRelevanceInput = {
    fields: ReceiptOrderByRelevanceFieldEnum | ReceiptOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReceiptCountOrderByAggregateInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    cardSurcharge?: SortOrder
    otherInformation?: SortOrder
    receiptDateTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptAvgOrderByAggregateInput = {
    subTotal?: SortOrder
    tax?: SortOrder
    cardSurcharge?: SortOrder
  }

  export type ReceiptMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    cardSurcharge?: SortOrder
    receiptDateTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptMinOrderByAggregateInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    cardSurcharge?: SortOrder
    receiptDateTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptSumOrderByAggregateInput = {
    subTotal?: SortOrder
    tax?: SortOrder
    cardSurcharge?: SortOrder
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type ReceiptScalarRelationFilter = {
    is?: ReceiptWhereInput
    isNot?: ReceiptWhereInput
  }

  export type ReceiptPaymentOrderByRelevanceInput = {
    fields: ReceiptPaymentOrderByRelevanceFieldEnum | ReceiptPaymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReceiptPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrder
    reference?: SortOrder
    cardNo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptPaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ReceiptPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrder
    reference?: SortOrder
    cardNo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrder
    reference?: SortOrder
    cardNo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptPaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type ReceiptItemOrderByRelevanceInput = {
    fields: ReceiptItemOrderByRelevanceFieldEnum | ReceiptItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReceiptItemCountOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    modelNumber?: SortOrder
    quantity?: SortOrder
    itemCost?: SortOrder
    itemTax?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    itemCost?: SortOrder
    itemTax?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
  }

  export type ReceiptItemMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    modelNumber?: SortOrder
    quantity?: SortOrder
    itemCost?: SortOrder
    itemTax?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptItemMinOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    modelNumber?: SortOrder
    quantity?: SortOrder
    itemCost?: SortOrder
    itemTax?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    itemCost?: SortOrder
    itemTax?: SortOrder
    subTotal?: SortOrder
    tax?: SortOrder
  }

  export type UserCreateroleInput = {
    set: $Enums.Role[]
  }

  export type UserCreaterecoveryCodesInput = {
    set: string[]
  }

  export type StateCreateNestedOneWithoutUsersInput = {
    create?: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StateCreateOrConnectWithoutUsersInput
    connect?: StateWhereUniqueInput
  }

  export type ConsumerCreateNestedOneWithoutUserInput = {
    create?: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutUserInput
    connect?: ConsumerWhereUniqueInput
  }

  export type MerchantUserCreateNestedOneWithoutUserInput = {
    create?: XOR<MerchantUserCreateWithoutUserInput, MerchantUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: MerchantUserCreateOrConnectWithoutUserInput
    connect?: MerchantUserWhereUniqueInput
  }

  export type AdminUserCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminUserCreateWithoutUserInput, AdminUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutUserInput
    connect?: AdminUserWhereUniqueInput
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type EmailVerificationRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailVerificationRequestCreateWithoutUserInput, EmailVerificationRequestUncheckedCreateWithoutUserInput> | EmailVerificationRequestCreateWithoutUserInput[] | EmailVerificationRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationRequestCreateOrConnectWithoutUserInput | EmailVerificationRequestCreateOrConnectWithoutUserInput[]
    createMany?: EmailVerificationRequestCreateManyUserInputEnvelope
    connect?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
  }

  export type PasswordResetSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetSessionCreateWithoutUserInput, PasswordResetSessionUncheckedCreateWithoutUserInput> | PasswordResetSessionCreateWithoutUserInput[] | PasswordResetSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetSessionCreateOrConnectWithoutUserInput | PasswordResetSessionCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetSessionCreateManyUserInputEnvelope
    connect?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
  }

  export type MerchantCreateNestedOneWithoutPrimaryContactInput = {
    create?: XOR<MerchantCreateWithoutPrimaryContactInput, MerchantUncheckedCreateWithoutPrimaryContactInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutPrimaryContactInput
    connect?: MerchantWhereUniqueInput
  }

  export type BrandCreateNestedManyWithoutPrimaryContactInput = {
    create?: XOR<BrandCreateWithoutPrimaryContactInput, BrandUncheckedCreateWithoutPrimaryContactInput> | BrandCreateWithoutPrimaryContactInput[] | BrandUncheckedCreateWithoutPrimaryContactInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutPrimaryContactInput | BrandCreateOrConnectWithoutPrimaryContactInput[]
    createMany?: BrandCreateManyPrimaryContactInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type ConsumerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutUserInput
    connect?: ConsumerWhereUniqueInput
  }

  export type MerchantUserUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<MerchantUserCreateWithoutUserInput, MerchantUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: MerchantUserCreateOrConnectWithoutUserInput
    connect?: MerchantUserWhereUniqueInput
  }

  export type AdminUserUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminUserCreateWithoutUserInput, AdminUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutUserInput
    connect?: AdminUserWhereUniqueInput
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailVerificationRequestCreateWithoutUserInput, EmailVerificationRequestUncheckedCreateWithoutUserInput> | EmailVerificationRequestCreateWithoutUserInput[] | EmailVerificationRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationRequestCreateOrConnectWithoutUserInput | EmailVerificationRequestCreateOrConnectWithoutUserInput[]
    createMany?: EmailVerificationRequestCreateManyUserInputEnvelope
    connect?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
  }

  export type PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetSessionCreateWithoutUserInput, PasswordResetSessionUncheckedCreateWithoutUserInput> | PasswordResetSessionCreateWithoutUserInput[] | PasswordResetSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetSessionCreateOrConnectWithoutUserInput | PasswordResetSessionCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetSessionCreateManyUserInputEnvelope
    connect?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput = {
    create?: XOR<MerchantCreateWithoutPrimaryContactInput, MerchantUncheckedCreateWithoutPrimaryContactInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutPrimaryContactInput
    connect?: MerchantWhereUniqueInput
  }

  export type BrandUncheckedCreateNestedManyWithoutPrimaryContactInput = {
    create?: XOR<BrandCreateWithoutPrimaryContactInput, BrandUncheckedCreateWithoutPrimaryContactInput> | BrandCreateWithoutPrimaryContactInput[] | BrandUncheckedCreateWithoutPrimaryContactInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutPrimaryContactInput | BrandCreateOrConnectWithoutPrimaryContactInput[]
    createMany?: BrandCreateManyPrimaryContactInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateroleInput = {
    set?: $Enums.Role[]
    push?: $Enums.Role | $Enums.Role[]
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type UserUpdaterecoveryCodesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type StateUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StateCreateOrConnectWithoutUsersInput
    upsert?: StateUpsertWithoutUsersInput
    disconnect?: StateWhereInput | boolean
    delete?: StateWhereInput | boolean
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutUsersInput, StateUpdateWithoutUsersInput>, StateUncheckedUpdateWithoutUsersInput>
  }

  export type ConsumerUpdateOneWithoutUserNestedInput = {
    create?: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutUserInput
    upsert?: ConsumerUpsertWithoutUserInput
    disconnect?: ConsumerWhereInput | boolean
    delete?: ConsumerWhereInput | boolean
    connect?: ConsumerWhereUniqueInput
    update?: XOR<XOR<ConsumerUpdateToOneWithWhereWithoutUserInput, ConsumerUpdateWithoutUserInput>, ConsumerUncheckedUpdateWithoutUserInput>
  }

  export type MerchantUserUpdateOneWithoutUserNestedInput = {
    create?: XOR<MerchantUserCreateWithoutUserInput, MerchantUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: MerchantUserCreateOrConnectWithoutUserInput
    upsert?: MerchantUserUpsertWithoutUserInput
    disconnect?: MerchantUserWhereInput | boolean
    delete?: MerchantUserWhereInput | boolean
    connect?: MerchantUserWhereUniqueInput
    update?: XOR<XOR<MerchantUserUpdateToOneWithWhereWithoutUserInput, MerchantUserUpdateWithoutUserInput>, MerchantUserUncheckedUpdateWithoutUserInput>
  }

  export type AdminUserUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminUserCreateWithoutUserInput, AdminUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutUserInput
    upsert?: AdminUserUpsertWithoutUserInput
    disconnect?: AdminUserWhereInput | boolean
    delete?: AdminUserWhereInput | boolean
    connect?: AdminUserWhereUniqueInput
    update?: XOR<XOR<AdminUserUpdateToOneWithWhereWithoutUserInput, AdminUserUpdateWithoutUserInput>, AdminUserUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type EmailVerificationRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailVerificationRequestCreateWithoutUserInput, EmailVerificationRequestUncheckedCreateWithoutUserInput> | EmailVerificationRequestCreateWithoutUserInput[] | EmailVerificationRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationRequestCreateOrConnectWithoutUserInput | EmailVerificationRequestCreateOrConnectWithoutUserInput[]
    upsert?: EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput | EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailVerificationRequestCreateManyUserInputEnvelope
    set?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
    disconnect?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
    delete?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
    connect?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
    update?: EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput | EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailVerificationRequestUpdateManyWithWhereWithoutUserInput | EmailVerificationRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailVerificationRequestScalarWhereInput | EmailVerificationRequestScalarWhereInput[]
  }

  export type PasswordResetSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetSessionCreateWithoutUserInput, PasswordResetSessionUncheckedCreateWithoutUserInput> | PasswordResetSessionCreateWithoutUserInput[] | PasswordResetSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetSessionCreateOrConnectWithoutUserInput | PasswordResetSessionCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput | PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetSessionCreateManyUserInputEnvelope
    set?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
    disconnect?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
    delete?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
    connect?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
    update?: PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput | PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetSessionUpdateManyWithWhereWithoutUserInput | PasswordResetSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetSessionScalarWhereInput | PasswordResetSessionScalarWhereInput[]
  }

  export type MerchantUpdateOneWithoutPrimaryContactNestedInput = {
    create?: XOR<MerchantCreateWithoutPrimaryContactInput, MerchantUncheckedCreateWithoutPrimaryContactInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutPrimaryContactInput
    upsert?: MerchantUpsertWithoutPrimaryContactInput
    disconnect?: MerchantWhereInput | boolean
    delete?: MerchantWhereInput | boolean
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutPrimaryContactInput, MerchantUpdateWithoutPrimaryContactInput>, MerchantUncheckedUpdateWithoutPrimaryContactInput>
  }

  export type BrandUpdateManyWithoutPrimaryContactNestedInput = {
    create?: XOR<BrandCreateWithoutPrimaryContactInput, BrandUncheckedCreateWithoutPrimaryContactInput> | BrandCreateWithoutPrimaryContactInput[] | BrandUncheckedCreateWithoutPrimaryContactInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutPrimaryContactInput | BrandCreateOrConnectWithoutPrimaryContactInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutPrimaryContactInput | BrandUpsertWithWhereUniqueWithoutPrimaryContactInput[]
    createMany?: BrandCreateManyPrimaryContactInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutPrimaryContactInput | BrandUpdateWithWhereUniqueWithoutPrimaryContactInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutPrimaryContactInput | BrandUpdateManyWithWhereWithoutPrimaryContactInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type ConsumerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutUserInput
    upsert?: ConsumerUpsertWithoutUserInput
    disconnect?: ConsumerWhereInput | boolean
    delete?: ConsumerWhereInput | boolean
    connect?: ConsumerWhereUniqueInput
    update?: XOR<XOR<ConsumerUpdateToOneWithWhereWithoutUserInput, ConsumerUpdateWithoutUserInput>, ConsumerUncheckedUpdateWithoutUserInput>
  }

  export type MerchantUserUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<MerchantUserCreateWithoutUserInput, MerchantUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: MerchantUserCreateOrConnectWithoutUserInput
    upsert?: MerchantUserUpsertWithoutUserInput
    disconnect?: MerchantUserWhereInput | boolean
    delete?: MerchantUserWhereInput | boolean
    connect?: MerchantUserWhereUniqueInput
    update?: XOR<XOR<MerchantUserUpdateToOneWithWhereWithoutUserInput, MerchantUserUpdateWithoutUserInput>, MerchantUserUncheckedUpdateWithoutUserInput>
  }

  export type AdminUserUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminUserCreateWithoutUserInput, AdminUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutUserInput
    upsert?: AdminUserUpsertWithoutUserInput
    disconnect?: AdminUserWhereInput | boolean
    delete?: AdminUserWhereInput | boolean
    connect?: AdminUserWhereUniqueInput
    update?: XOR<XOR<AdminUserUpdateToOneWithWhereWithoutUserInput, AdminUserUpdateWithoutUserInput>, AdminUserUncheckedUpdateWithoutUserInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailVerificationRequestCreateWithoutUserInput, EmailVerificationRequestUncheckedCreateWithoutUserInput> | EmailVerificationRequestCreateWithoutUserInput[] | EmailVerificationRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationRequestCreateOrConnectWithoutUserInput | EmailVerificationRequestCreateOrConnectWithoutUserInput[]
    upsert?: EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput | EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailVerificationRequestCreateManyUserInputEnvelope
    set?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
    disconnect?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
    delete?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
    connect?: EmailVerificationRequestWhereUniqueInput | EmailVerificationRequestWhereUniqueInput[]
    update?: EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput | EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailVerificationRequestUpdateManyWithWhereWithoutUserInput | EmailVerificationRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailVerificationRequestScalarWhereInput | EmailVerificationRequestScalarWhereInput[]
  }

  export type PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetSessionCreateWithoutUserInput, PasswordResetSessionUncheckedCreateWithoutUserInput> | PasswordResetSessionCreateWithoutUserInput[] | PasswordResetSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetSessionCreateOrConnectWithoutUserInput | PasswordResetSessionCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput | PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetSessionCreateManyUserInputEnvelope
    set?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
    disconnect?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
    delete?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
    connect?: PasswordResetSessionWhereUniqueInput | PasswordResetSessionWhereUniqueInput[]
    update?: PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput | PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetSessionUpdateManyWithWhereWithoutUserInput | PasswordResetSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetSessionScalarWhereInput | PasswordResetSessionScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput = {
    create?: XOR<MerchantCreateWithoutPrimaryContactInput, MerchantUncheckedCreateWithoutPrimaryContactInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutPrimaryContactInput
    upsert?: MerchantUpsertWithoutPrimaryContactInput
    disconnect?: MerchantWhereInput | boolean
    delete?: MerchantWhereInput | boolean
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutPrimaryContactInput, MerchantUpdateWithoutPrimaryContactInput>, MerchantUncheckedUpdateWithoutPrimaryContactInput>
  }

  export type BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput = {
    create?: XOR<BrandCreateWithoutPrimaryContactInput, BrandUncheckedCreateWithoutPrimaryContactInput> | BrandCreateWithoutPrimaryContactInput[] | BrandUncheckedCreateWithoutPrimaryContactInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutPrimaryContactInput | BrandCreateOrConnectWithoutPrimaryContactInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutPrimaryContactInput | BrandUpsertWithWhereUniqueWithoutPrimaryContactInput[]
    createMany?: BrandCreateManyPrimaryContactInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutPrimaryContactInput | BrandUpdateWithWhereUniqueWithoutPrimaryContactInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutPrimaryContactInput | BrandUpdateManyWithWhereWithoutPrimaryContactInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSessionNestedInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionInput, UserUpdateWithoutSessionInput>, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserCreateNestedOneWithoutEmailVerificationRequestInput = {
    create?: XOR<UserCreateWithoutEmailVerificationRequestInput, UserUncheckedCreateWithoutEmailVerificationRequestInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailVerificationRequestInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEmailVerificationRequestNestedInput = {
    create?: XOR<UserCreateWithoutEmailVerificationRequestInput, UserUncheckedCreateWithoutEmailVerificationRequestInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailVerificationRequestInput
    upsert?: UserUpsertWithoutEmailVerificationRequestInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmailVerificationRequestInput, UserUpdateWithoutEmailVerificationRequestInput>, UserUncheckedUpdateWithoutEmailVerificationRequestInput>
  }

  export type UserCreateNestedOneWithoutPasswordResetSessionInput = {
    create?: XOR<UserCreateWithoutPasswordResetSessionInput, UserUncheckedCreateWithoutPasswordResetSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetSessionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordResetSessionNestedInput = {
    create?: XOR<UserCreateWithoutPasswordResetSessionInput, UserUncheckedCreateWithoutPasswordResetSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetSessionInput
    upsert?: UserUpsertWithoutPasswordResetSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordResetSessionInput, UserUpdateWithoutPasswordResetSessionInput>, UserUncheckedUpdateWithoutPasswordResetSessionInput>
  }

  export type UserCreateNestedOneWithoutConsumerUserInput = {
    create?: XOR<UserCreateWithoutConsumerUserInput, UserUncheckedCreateWithoutConsumerUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsumerUserInput
    connect?: UserWhereUniqueInput
  }

  export type ReceiptCreateNestedManyWithoutConsumerInput = {
    create?: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput> | ReceiptCreateWithoutConsumerInput[] | ReceiptUncheckedCreateWithoutConsumerInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutConsumerInput | ReceiptCreateOrConnectWithoutConsumerInput[]
    createMany?: ReceiptCreateManyConsumerInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type ReceiptUncheckedCreateNestedManyWithoutConsumerInput = {
    create?: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput> | ReceiptCreateWithoutConsumerInput[] | ReceiptUncheckedCreateWithoutConsumerInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutConsumerInput | ReceiptCreateOrConnectWithoutConsumerInput[]
    createMany?: ReceiptCreateManyConsumerInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type UserUpdateOneRequiredWithoutConsumerUserNestedInput = {
    create?: XOR<UserCreateWithoutConsumerUserInput, UserUncheckedCreateWithoutConsumerUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsumerUserInput
    upsert?: UserUpsertWithoutConsumerUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConsumerUserInput, UserUpdateWithoutConsumerUserInput>, UserUncheckedUpdateWithoutConsumerUserInput>
  }

  export type ReceiptUpdateManyWithoutConsumerNestedInput = {
    create?: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput> | ReceiptCreateWithoutConsumerInput[] | ReceiptUncheckedCreateWithoutConsumerInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutConsumerInput | ReceiptCreateOrConnectWithoutConsumerInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutConsumerInput | ReceiptUpsertWithWhereUniqueWithoutConsumerInput[]
    createMany?: ReceiptCreateManyConsumerInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutConsumerInput | ReceiptUpdateWithWhereUniqueWithoutConsumerInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutConsumerInput | ReceiptUpdateManyWithWhereWithoutConsumerInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type ReceiptUncheckedUpdateManyWithoutConsumerNestedInput = {
    create?: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput> | ReceiptCreateWithoutConsumerInput[] | ReceiptUncheckedCreateWithoutConsumerInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutConsumerInput | ReceiptCreateOrConnectWithoutConsumerInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutConsumerInput | ReceiptUpsertWithWhereUniqueWithoutConsumerInput[]
    createMany?: ReceiptCreateManyConsumerInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutConsumerInput | ReceiptUpdateWithWhereUniqueWithoutConsumerInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutConsumerInput | ReceiptUpdateManyWithWhereWithoutConsumerInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type MerchantUserCreatemerchantRoleInput = {
    set: $Enums.MerchantRole[]
  }

  export type MerchantCreateNestedOneWithoutMerchantUserInput = {
    create?: XOR<MerchantCreateWithoutMerchantUserInput, MerchantUncheckedCreateWithoutMerchantUserInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutMerchantUserInput
    connect?: MerchantWhereUniqueInput
  }

  export type BrandUserCreateNestedManyWithoutMerchantUserInput = {
    create?: XOR<BrandUserCreateWithoutMerchantUserInput, BrandUserUncheckedCreateWithoutMerchantUserInput> | BrandUserCreateWithoutMerchantUserInput[] | BrandUserUncheckedCreateWithoutMerchantUserInput[]
    connectOrCreate?: BrandUserCreateOrConnectWithoutMerchantUserInput | BrandUserCreateOrConnectWithoutMerchantUserInput[]
    createMany?: BrandUserCreateManyMerchantUserInputEnvelope
    connect?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutMerchantUserInput = {
    create?: XOR<UserCreateWithoutMerchantUserInput, UserUncheckedCreateWithoutMerchantUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutMerchantUserInput
    connect?: UserWhereUniqueInput
  }

  export type BrandUserUncheckedCreateNestedManyWithoutMerchantUserInput = {
    create?: XOR<BrandUserCreateWithoutMerchantUserInput, BrandUserUncheckedCreateWithoutMerchantUserInput> | BrandUserCreateWithoutMerchantUserInput[] | BrandUserUncheckedCreateWithoutMerchantUserInput[]
    connectOrCreate?: BrandUserCreateOrConnectWithoutMerchantUserInput | BrandUserCreateOrConnectWithoutMerchantUserInput[]
    createMany?: BrandUserCreateManyMerchantUserInputEnvelope
    connect?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
  }

  export type MerchantUserUpdatemerchantRoleInput = {
    set?: $Enums.MerchantRole[]
    push?: $Enums.MerchantRole | $Enums.MerchantRole[]
  }

  export type MerchantUpdateOneRequiredWithoutMerchantUserNestedInput = {
    create?: XOR<MerchantCreateWithoutMerchantUserInput, MerchantUncheckedCreateWithoutMerchantUserInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutMerchantUserInput
    upsert?: MerchantUpsertWithoutMerchantUserInput
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutMerchantUserInput, MerchantUpdateWithoutMerchantUserInput>, MerchantUncheckedUpdateWithoutMerchantUserInput>
  }

  export type BrandUserUpdateManyWithoutMerchantUserNestedInput = {
    create?: XOR<BrandUserCreateWithoutMerchantUserInput, BrandUserUncheckedCreateWithoutMerchantUserInput> | BrandUserCreateWithoutMerchantUserInput[] | BrandUserUncheckedCreateWithoutMerchantUserInput[]
    connectOrCreate?: BrandUserCreateOrConnectWithoutMerchantUserInput | BrandUserCreateOrConnectWithoutMerchantUserInput[]
    upsert?: BrandUserUpsertWithWhereUniqueWithoutMerchantUserInput | BrandUserUpsertWithWhereUniqueWithoutMerchantUserInput[]
    createMany?: BrandUserCreateManyMerchantUserInputEnvelope
    set?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
    disconnect?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
    delete?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
    connect?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
    update?: BrandUserUpdateWithWhereUniqueWithoutMerchantUserInput | BrandUserUpdateWithWhereUniqueWithoutMerchantUserInput[]
    updateMany?: BrandUserUpdateManyWithWhereWithoutMerchantUserInput | BrandUserUpdateManyWithWhereWithoutMerchantUserInput[]
    deleteMany?: BrandUserScalarWhereInput | BrandUserScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutMerchantUserNestedInput = {
    create?: XOR<UserCreateWithoutMerchantUserInput, UserUncheckedCreateWithoutMerchantUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutMerchantUserInput
    upsert?: UserUpsertWithoutMerchantUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMerchantUserInput, UserUpdateWithoutMerchantUserInput>, UserUncheckedUpdateWithoutMerchantUserInput>
  }

  export type BrandUserUncheckedUpdateManyWithoutMerchantUserNestedInput = {
    create?: XOR<BrandUserCreateWithoutMerchantUserInput, BrandUserUncheckedCreateWithoutMerchantUserInput> | BrandUserCreateWithoutMerchantUserInput[] | BrandUserUncheckedCreateWithoutMerchantUserInput[]
    connectOrCreate?: BrandUserCreateOrConnectWithoutMerchantUserInput | BrandUserCreateOrConnectWithoutMerchantUserInput[]
    upsert?: BrandUserUpsertWithWhereUniqueWithoutMerchantUserInput | BrandUserUpsertWithWhereUniqueWithoutMerchantUserInput[]
    createMany?: BrandUserCreateManyMerchantUserInputEnvelope
    set?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
    disconnect?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
    delete?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
    connect?: BrandUserWhereUniqueInput | BrandUserWhereUniqueInput[]
    update?: BrandUserUpdateWithWhereUniqueWithoutMerchantUserInput | BrandUserUpdateWithWhereUniqueWithoutMerchantUserInput[]
    updateMany?: BrandUserUpdateManyWithWhereWithoutMerchantUserInput | BrandUserUpdateManyWithWhereWithoutMerchantUserInput[]
    deleteMany?: BrandUserScalarWhereInput | BrandUserScalarWhereInput[]
  }

  export type AdminUserCreateadminRoleInput = {
    set: $Enums.AdminRole[]
  }

  export type UserCreateNestedOneWithoutAdminUserInput = {
    create?: XOR<UserCreateWithoutAdminUserInput, UserUncheckedCreateWithoutAdminUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminUserInput
    connect?: UserWhereUniqueInput
  }

  export type AdminUserUpdateadminRoleInput = {
    set?: $Enums.AdminRole[]
    push?: $Enums.AdminRole | $Enums.AdminRole[]
  }

  export type UserUpdateOneRequiredWithoutAdminUserNestedInput = {
    create?: XOR<UserCreateWithoutAdminUserInput, UserUncheckedCreateWithoutAdminUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminUserInput
    upsert?: UserUpsertWithoutAdminUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminUserInput, UserUpdateWithoutAdminUserInput>, UserUncheckedUpdateWithoutAdminUserInput>
  }

  export type BrandUserCreatebrandRoleInput = {
    set: $Enums.BrandRole[]
  }

  export type BrandCreateNestedOneWithoutBrandUserInput = {
    create?: XOR<BrandCreateWithoutBrandUserInput, BrandUncheckedCreateWithoutBrandUserInput>
    connectOrCreate?: BrandCreateOrConnectWithoutBrandUserInput
    connect?: BrandWhereUniqueInput
  }

  export type MerchantUserCreateNestedOneWithoutBrandUsersInput = {
    create?: XOR<MerchantUserCreateWithoutBrandUsersInput, MerchantUserUncheckedCreateWithoutBrandUsersInput>
    connectOrCreate?: MerchantUserCreateOrConnectWithoutBrandUsersInput
    connect?: MerchantUserWhereUniqueInput
  }

  export type BrandUserUpdatebrandRoleInput = {
    set?: $Enums.BrandRole[]
    push?: $Enums.BrandRole | $Enums.BrandRole[]
  }

  export type BrandUpdateOneRequiredWithoutBrandUserNestedInput = {
    create?: XOR<BrandCreateWithoutBrandUserInput, BrandUncheckedCreateWithoutBrandUserInput>
    connectOrCreate?: BrandCreateOrConnectWithoutBrandUserInput
    upsert?: BrandUpsertWithoutBrandUserInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutBrandUserInput, BrandUpdateWithoutBrandUserInput>, BrandUncheckedUpdateWithoutBrandUserInput>
  }

  export type MerchantUserUpdateOneWithoutBrandUsersNestedInput = {
    create?: XOR<MerchantUserCreateWithoutBrandUsersInput, MerchantUserUncheckedCreateWithoutBrandUsersInput>
    connectOrCreate?: MerchantUserCreateOrConnectWithoutBrandUsersInput
    upsert?: MerchantUserUpsertWithoutBrandUsersInput
    disconnect?: MerchantUserWhereInput | boolean
    delete?: MerchantUserWhereInput | boolean
    connect?: MerchantUserWhereUniqueInput
    update?: XOR<XOR<MerchantUserUpdateToOneWithWhereWithoutBrandUsersInput, MerchantUserUpdateWithoutBrandUsersInput>, MerchantUserUncheckedUpdateWithoutBrandUsersInput>
  }

  export type StoreCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput> | StoreCreateWithoutCurrencyInput[] | StoreUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCurrencyInput | StoreCreateOrConnectWithoutCurrencyInput[]
    createMany?: StoreCreateManyCurrencyInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type StoreUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput> | StoreCreateWithoutCurrencyInput[] | StoreUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCurrencyInput | StoreCreateOrConnectWithoutCurrencyInput[]
    createMany?: StoreCreateManyCurrencyInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StoreUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput> | StoreCreateWithoutCurrencyInput[] | StoreUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCurrencyInput | StoreCreateOrConnectWithoutCurrencyInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutCurrencyInput | StoreUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: StoreCreateManyCurrencyInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutCurrencyInput | StoreUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutCurrencyInput | StoreUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type StoreUncheckedUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput> | StoreCreateWithoutCurrencyInput[] | StoreUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCurrencyInput | StoreCreateOrConnectWithoutCurrencyInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutCurrencyInput | StoreUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: StoreCreateManyCurrencyInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutCurrencyInput | StoreUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutCurrencyInput | StoreUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type StateCreateNestedManyWithoutCountryInput = {
    create?: XOR<StateCreateWithoutCountryInput, StateUncheckedCreateWithoutCountryInput> | StateCreateWithoutCountryInput[] | StateUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StateCreateOrConnectWithoutCountryInput | StateCreateOrConnectWithoutCountryInput[]
    createMany?: StateCreateManyCountryInputEnvelope
    connect?: StateWhereUniqueInput | StateWhereUniqueInput[]
  }

  export type MerchantCreateNestedManyWithoutCountryInput = {
    create?: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput> | MerchantCreateWithoutCountryInput[] | MerchantUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutCountryInput | MerchantCreateOrConnectWithoutCountryInput[]
    createMany?: MerchantCreateManyCountryInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type StoreCreateNestedManyWithoutCountryInput = {
    create?: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput> | StoreCreateWithoutCountryInput[] | StoreUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCountryInput | StoreCreateOrConnectWithoutCountryInput[]
    createMany?: StoreCreateManyCountryInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type BrandCreateNestedManyWithoutCountryInput = {
    create?: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput> | BrandCreateWithoutCountryInput[] | BrandUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCountryInput | BrandCreateOrConnectWithoutCountryInput[]
    createMany?: BrandCreateManyCountryInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type StateUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<StateCreateWithoutCountryInput, StateUncheckedCreateWithoutCountryInput> | StateCreateWithoutCountryInput[] | StateUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StateCreateOrConnectWithoutCountryInput | StateCreateOrConnectWithoutCountryInput[]
    createMany?: StateCreateManyCountryInputEnvelope
    connect?: StateWhereUniqueInput | StateWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput> | MerchantCreateWithoutCountryInput[] | MerchantUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutCountryInput | MerchantCreateOrConnectWithoutCountryInput[]
    createMany?: MerchantCreateManyCountryInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type StoreUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput> | StoreCreateWithoutCountryInput[] | StoreUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCountryInput | StoreCreateOrConnectWithoutCountryInput[]
    createMany?: StoreCreateManyCountryInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type BrandUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput> | BrandCreateWithoutCountryInput[] | BrandUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCountryInput | BrandCreateOrConnectWithoutCountryInput[]
    createMany?: BrandCreateManyCountryInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type StateUpdateManyWithoutCountryNestedInput = {
    create?: XOR<StateCreateWithoutCountryInput, StateUncheckedCreateWithoutCountryInput> | StateCreateWithoutCountryInput[] | StateUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StateCreateOrConnectWithoutCountryInput | StateCreateOrConnectWithoutCountryInput[]
    upsert?: StateUpsertWithWhereUniqueWithoutCountryInput | StateUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: StateCreateManyCountryInputEnvelope
    set?: StateWhereUniqueInput | StateWhereUniqueInput[]
    disconnect?: StateWhereUniqueInput | StateWhereUniqueInput[]
    delete?: StateWhereUniqueInput | StateWhereUniqueInput[]
    connect?: StateWhereUniqueInput | StateWhereUniqueInput[]
    update?: StateUpdateWithWhereUniqueWithoutCountryInput | StateUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: StateUpdateManyWithWhereWithoutCountryInput | StateUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: StateScalarWhereInput | StateScalarWhereInput[]
  }

  export type MerchantUpdateManyWithoutCountryNestedInput = {
    create?: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput> | MerchantCreateWithoutCountryInput[] | MerchantUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutCountryInput | MerchantCreateOrConnectWithoutCountryInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutCountryInput | MerchantUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: MerchantCreateManyCountryInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutCountryInput | MerchantUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutCountryInput | MerchantUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type StoreUpdateManyWithoutCountryNestedInput = {
    create?: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput> | StoreCreateWithoutCountryInput[] | StoreUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCountryInput | StoreCreateOrConnectWithoutCountryInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutCountryInput | StoreUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: StoreCreateManyCountryInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutCountryInput | StoreUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutCountryInput | StoreUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type BrandUpdateManyWithoutCountryNestedInput = {
    create?: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput> | BrandCreateWithoutCountryInput[] | BrandUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCountryInput | BrandCreateOrConnectWithoutCountryInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutCountryInput | BrandUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: BrandCreateManyCountryInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutCountryInput | BrandUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutCountryInput | BrandUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type StateUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<StateCreateWithoutCountryInput, StateUncheckedCreateWithoutCountryInput> | StateCreateWithoutCountryInput[] | StateUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StateCreateOrConnectWithoutCountryInput | StateCreateOrConnectWithoutCountryInput[]
    upsert?: StateUpsertWithWhereUniqueWithoutCountryInput | StateUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: StateCreateManyCountryInputEnvelope
    set?: StateWhereUniqueInput | StateWhereUniqueInput[]
    disconnect?: StateWhereUniqueInput | StateWhereUniqueInput[]
    delete?: StateWhereUniqueInput | StateWhereUniqueInput[]
    connect?: StateWhereUniqueInput | StateWhereUniqueInput[]
    update?: StateUpdateWithWhereUniqueWithoutCountryInput | StateUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: StateUpdateManyWithWhereWithoutCountryInput | StateUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: StateScalarWhereInput | StateScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput> | MerchantCreateWithoutCountryInput[] | MerchantUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutCountryInput | MerchantCreateOrConnectWithoutCountryInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutCountryInput | MerchantUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: MerchantCreateManyCountryInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutCountryInput | MerchantUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutCountryInput | MerchantUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type StoreUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput> | StoreCreateWithoutCountryInput[] | StoreUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCountryInput | StoreCreateOrConnectWithoutCountryInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutCountryInput | StoreUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: StoreCreateManyCountryInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutCountryInput | StoreUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutCountryInput | StoreUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type BrandUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput> | BrandCreateWithoutCountryInput[] | BrandUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCountryInput | BrandCreateOrConnectWithoutCountryInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutCountryInput | BrandUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: BrandCreateManyCountryInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutCountryInput | BrandUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutCountryInput | BrandUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutStatesInput = {
    create?: XOR<CountryCreateWithoutStatesInput, CountryUncheckedCreateWithoutStatesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutStatesInput
    connect?: CountryWhereUniqueInput
  }

  export type MerchantCreateNestedManyWithoutStateInput = {
    create?: XOR<MerchantCreateWithoutStateInput, MerchantUncheckedCreateWithoutStateInput> | MerchantCreateWithoutStateInput[] | MerchantUncheckedCreateWithoutStateInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutStateInput | MerchantCreateOrConnectWithoutStateInput[]
    createMany?: MerchantCreateManyStateInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type BrandCreateNestedManyWithoutStateInput = {
    create?: XOR<BrandCreateWithoutStateInput, BrandUncheckedCreateWithoutStateInput> | BrandCreateWithoutStateInput[] | BrandUncheckedCreateWithoutStateInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutStateInput | BrandCreateOrConnectWithoutStateInput[]
    createMany?: BrandCreateManyStateInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStateInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<MerchantCreateWithoutStateInput, MerchantUncheckedCreateWithoutStateInput> | MerchantCreateWithoutStateInput[] | MerchantUncheckedCreateWithoutStateInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutStateInput | MerchantCreateOrConnectWithoutStateInput[]
    createMany?: MerchantCreateManyStateInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type BrandUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<BrandCreateWithoutStateInput, BrandUncheckedCreateWithoutStateInput> | BrandCreateWithoutStateInput[] | BrandUncheckedCreateWithoutStateInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutStateInput | BrandCreateOrConnectWithoutStateInput[]
    createMany?: BrandCreateManyStateInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CountryUpdateOneRequiredWithoutStatesNestedInput = {
    create?: XOR<CountryCreateWithoutStatesInput, CountryUncheckedCreateWithoutStatesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutStatesInput
    upsert?: CountryUpsertWithoutStatesInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutStatesInput, CountryUpdateWithoutStatesInput>, CountryUncheckedUpdateWithoutStatesInput>
  }

  export type MerchantUpdateManyWithoutStateNestedInput = {
    create?: XOR<MerchantCreateWithoutStateInput, MerchantUncheckedCreateWithoutStateInput> | MerchantCreateWithoutStateInput[] | MerchantUncheckedCreateWithoutStateInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutStateInput | MerchantCreateOrConnectWithoutStateInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutStateInput | MerchantUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: MerchantCreateManyStateInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutStateInput | MerchantUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutStateInput | MerchantUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type BrandUpdateManyWithoutStateNestedInput = {
    create?: XOR<BrandCreateWithoutStateInput, BrandUncheckedCreateWithoutStateInput> | BrandCreateWithoutStateInput[] | BrandUncheckedCreateWithoutStateInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutStateInput | BrandCreateOrConnectWithoutStateInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutStateInput | BrandUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: BrandCreateManyStateInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutStateInput | BrandUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutStateInput | BrandUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStateNestedInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStateInput | UserUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStateInput | UserUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStateInput | UserUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<MerchantCreateWithoutStateInput, MerchantUncheckedCreateWithoutStateInput> | MerchantCreateWithoutStateInput[] | MerchantUncheckedCreateWithoutStateInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutStateInput | MerchantCreateOrConnectWithoutStateInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutStateInput | MerchantUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: MerchantCreateManyStateInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutStateInput | MerchantUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutStateInput | MerchantUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type BrandUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<BrandCreateWithoutStateInput, BrandUncheckedCreateWithoutStateInput> | BrandCreateWithoutStateInput[] | BrandUncheckedCreateWithoutStateInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutStateInput | BrandCreateOrConnectWithoutStateInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutStateInput | BrandUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: BrandCreateManyStateInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutStateInput | BrandUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutStateInput | BrandUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStateInput | UserUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStateInput | UserUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStateInput | UserUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type StateCreateNestedOneWithoutMerchantsInput = {
    create?: XOR<StateCreateWithoutMerchantsInput, StateUncheckedCreateWithoutMerchantsInput>
    connectOrCreate?: StateCreateOrConnectWithoutMerchantsInput
    connect?: StateWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutMerchantsInput = {
    create?: XOR<CountryCreateWithoutMerchantsInput, CountryUncheckedCreateWithoutMerchantsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutMerchantsInput
    connect?: CountryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPrimaryContactMerchantInput = {
    create?: XOR<UserCreateWithoutPrimaryContactMerchantInput, UserUncheckedCreateWithoutPrimaryContactMerchantInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrimaryContactMerchantInput
    connect?: UserWhereUniqueInput
  }

  export type BrandCreateNestedManyWithoutMerchantInput = {
    create?: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput> | BrandCreateWithoutMerchantInput[] | BrandUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutMerchantInput | BrandCreateOrConnectWithoutMerchantInput[]
    createMany?: BrandCreateManyMerchantInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type MerchantUserCreateNestedManyWithoutMerchantInput = {
    create?: XOR<MerchantUserCreateWithoutMerchantInput, MerchantUserUncheckedCreateWithoutMerchantInput> | MerchantUserCreateWithoutMerchantInput[] | MerchantUserUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: MerchantUserCreateOrConnectWithoutMerchantInput | MerchantUserCreateOrConnectWithoutMerchantInput[]
    createMany?: MerchantUserCreateManyMerchantInputEnvelope
    connect?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
  }

  export type BrandUncheckedCreateNestedManyWithoutMerchantInput = {
    create?: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput> | BrandCreateWithoutMerchantInput[] | BrandUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutMerchantInput | BrandCreateOrConnectWithoutMerchantInput[]
    createMany?: BrandCreateManyMerchantInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type MerchantUserUncheckedCreateNestedManyWithoutMerchantInput = {
    create?: XOR<MerchantUserCreateWithoutMerchantInput, MerchantUserUncheckedCreateWithoutMerchantInput> | MerchantUserCreateWithoutMerchantInput[] | MerchantUserUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: MerchantUserCreateOrConnectWithoutMerchantInput | MerchantUserCreateOrConnectWithoutMerchantInput[]
    createMany?: MerchantUserCreateManyMerchantInputEnvelope
    connect?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
  }

  export type StateUpdateOneRequiredWithoutMerchantsNestedInput = {
    create?: XOR<StateCreateWithoutMerchantsInput, StateUncheckedCreateWithoutMerchantsInput>
    connectOrCreate?: StateCreateOrConnectWithoutMerchantsInput
    upsert?: StateUpsertWithoutMerchantsInput
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutMerchantsInput, StateUpdateWithoutMerchantsInput>, StateUncheckedUpdateWithoutMerchantsInput>
  }

  export type CountryUpdateOneRequiredWithoutMerchantsNestedInput = {
    create?: XOR<CountryCreateWithoutMerchantsInput, CountryUncheckedCreateWithoutMerchantsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutMerchantsInput
    upsert?: CountryUpsertWithoutMerchantsInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutMerchantsInput, CountryUpdateWithoutMerchantsInput>, CountryUncheckedUpdateWithoutMerchantsInput>
  }

  export type UserUpdateOneWithoutPrimaryContactMerchantNestedInput = {
    create?: XOR<UserCreateWithoutPrimaryContactMerchantInput, UserUncheckedCreateWithoutPrimaryContactMerchantInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrimaryContactMerchantInput
    upsert?: UserUpsertWithoutPrimaryContactMerchantInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPrimaryContactMerchantInput, UserUpdateWithoutPrimaryContactMerchantInput>, UserUncheckedUpdateWithoutPrimaryContactMerchantInput>
  }

  export type BrandUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput> | BrandCreateWithoutMerchantInput[] | BrandUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutMerchantInput | BrandCreateOrConnectWithoutMerchantInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutMerchantInput | BrandUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: BrandCreateManyMerchantInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutMerchantInput | BrandUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutMerchantInput | BrandUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type MerchantUserUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<MerchantUserCreateWithoutMerchantInput, MerchantUserUncheckedCreateWithoutMerchantInput> | MerchantUserCreateWithoutMerchantInput[] | MerchantUserUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: MerchantUserCreateOrConnectWithoutMerchantInput | MerchantUserCreateOrConnectWithoutMerchantInput[]
    upsert?: MerchantUserUpsertWithWhereUniqueWithoutMerchantInput | MerchantUserUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: MerchantUserCreateManyMerchantInputEnvelope
    set?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
    disconnect?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
    delete?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
    connect?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
    update?: MerchantUserUpdateWithWhereUniqueWithoutMerchantInput | MerchantUserUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: MerchantUserUpdateManyWithWhereWithoutMerchantInput | MerchantUserUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: MerchantUserScalarWhereInput | MerchantUserScalarWhereInput[]
  }

  export type BrandUncheckedUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput> | BrandCreateWithoutMerchantInput[] | BrandUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutMerchantInput | BrandCreateOrConnectWithoutMerchantInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutMerchantInput | BrandUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: BrandCreateManyMerchantInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutMerchantInput | BrandUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutMerchantInput | BrandUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type MerchantUserUncheckedUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<MerchantUserCreateWithoutMerchantInput, MerchantUserUncheckedCreateWithoutMerchantInput> | MerchantUserCreateWithoutMerchantInput[] | MerchantUserUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: MerchantUserCreateOrConnectWithoutMerchantInput | MerchantUserCreateOrConnectWithoutMerchantInput[]
    upsert?: MerchantUserUpsertWithWhereUniqueWithoutMerchantInput | MerchantUserUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: MerchantUserCreateManyMerchantInputEnvelope
    set?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
    disconnect?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
    delete?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
    connect?: MerchantUserWhereUniqueInput | MerchantUserWhereUniqueInput[]
    update?: MerchantUserUpdateWithWhereUniqueWithoutMerchantInput | MerchantUserUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: MerchantUserUpdateManyWithWhereWithoutMerchantInput | MerchantUserUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: MerchantUserScalarWhereInput | MerchantUserScalarWhereInput[]
  }

  export type MerchantCreateNestedOneWithoutBrandsInput = {
    create?: XOR<MerchantCreateWithoutBrandsInput, MerchantUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutBrandsInput
    connect?: MerchantWhereUniqueInput
  }

  export type StateCreateNestedOneWithoutBrandsInput = {
    create?: XOR<StateCreateWithoutBrandsInput, StateUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: StateCreateOrConnectWithoutBrandsInput
    connect?: StateWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutBrandInput = {
    create?: XOR<CountryCreateWithoutBrandInput, CountryUncheckedCreateWithoutBrandInput>
    connectOrCreate?: CountryCreateOrConnectWithoutBrandInput
    connect?: CountryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPrimaryContactBrandInput = {
    create?: XOR<UserCreateWithoutPrimaryContactBrandInput, UserUncheckedCreateWithoutPrimaryContactBrandInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrimaryContactBrandInput
    connect?: UserWhereUniqueInput
  }

  export type StoreCreateNestedManyWithoutBrandInput = {
    create?: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput> | StoreCreateWithoutBrandInput[] | StoreUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutBrandInput | StoreCreateOrConnectWithoutBrandInput[]
    createMany?: StoreCreateManyBrandInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type BrandUserCreateNestedOneWithoutBrandInput = {
    create?: XOR<BrandUserCreateWithoutBrandInput, BrandUserUncheckedCreateWithoutBrandInput>
    connectOrCreate?: BrandUserCreateOrConnectWithoutBrandInput
    connect?: BrandUserWhereUniqueInput
  }

  export type StoreUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput> | StoreCreateWithoutBrandInput[] | StoreUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutBrandInput | StoreCreateOrConnectWithoutBrandInput[]
    createMany?: StoreCreateManyBrandInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type BrandUserUncheckedCreateNestedOneWithoutBrandInput = {
    create?: XOR<BrandUserCreateWithoutBrandInput, BrandUserUncheckedCreateWithoutBrandInput>
    connectOrCreate?: BrandUserCreateOrConnectWithoutBrandInput
    connect?: BrandUserWhereUniqueInput
  }

  export type MerchantUpdateOneRequiredWithoutBrandsNestedInput = {
    create?: XOR<MerchantCreateWithoutBrandsInput, MerchantUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutBrandsInput
    upsert?: MerchantUpsertWithoutBrandsInput
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutBrandsInput, MerchantUpdateWithoutBrandsInput>, MerchantUncheckedUpdateWithoutBrandsInput>
  }

  export type StateUpdateOneRequiredWithoutBrandsNestedInput = {
    create?: XOR<StateCreateWithoutBrandsInput, StateUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: StateCreateOrConnectWithoutBrandsInput
    upsert?: StateUpsertWithoutBrandsInput
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutBrandsInput, StateUpdateWithoutBrandsInput>, StateUncheckedUpdateWithoutBrandsInput>
  }

  export type CountryUpdateOneRequiredWithoutBrandNestedInput = {
    create?: XOR<CountryCreateWithoutBrandInput, CountryUncheckedCreateWithoutBrandInput>
    connectOrCreate?: CountryCreateOrConnectWithoutBrandInput
    upsert?: CountryUpsertWithoutBrandInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutBrandInput, CountryUpdateWithoutBrandInput>, CountryUncheckedUpdateWithoutBrandInput>
  }

  export type UserUpdateOneWithoutPrimaryContactBrandNestedInput = {
    create?: XOR<UserCreateWithoutPrimaryContactBrandInput, UserUncheckedCreateWithoutPrimaryContactBrandInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrimaryContactBrandInput
    upsert?: UserUpsertWithoutPrimaryContactBrandInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPrimaryContactBrandInput, UserUpdateWithoutPrimaryContactBrandInput>, UserUncheckedUpdateWithoutPrimaryContactBrandInput>
  }

  export type StoreUpdateManyWithoutBrandNestedInput = {
    create?: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput> | StoreCreateWithoutBrandInput[] | StoreUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutBrandInput | StoreCreateOrConnectWithoutBrandInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutBrandInput | StoreUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: StoreCreateManyBrandInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutBrandInput | StoreUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutBrandInput | StoreUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type BrandUserUpdateOneWithoutBrandNestedInput = {
    create?: XOR<BrandUserCreateWithoutBrandInput, BrandUserUncheckedCreateWithoutBrandInput>
    connectOrCreate?: BrandUserCreateOrConnectWithoutBrandInput
    upsert?: BrandUserUpsertWithoutBrandInput
    disconnect?: BrandUserWhereInput | boolean
    delete?: BrandUserWhereInput | boolean
    connect?: BrandUserWhereUniqueInput
    update?: XOR<XOR<BrandUserUpdateToOneWithWhereWithoutBrandInput, BrandUserUpdateWithoutBrandInput>, BrandUserUncheckedUpdateWithoutBrandInput>
  }

  export type StoreUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput> | StoreCreateWithoutBrandInput[] | StoreUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutBrandInput | StoreCreateOrConnectWithoutBrandInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutBrandInput | StoreUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: StoreCreateManyBrandInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutBrandInput | StoreUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutBrandInput | StoreUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type BrandUserUncheckedUpdateOneWithoutBrandNestedInput = {
    create?: XOR<BrandUserCreateWithoutBrandInput, BrandUserUncheckedCreateWithoutBrandInput>
    connectOrCreate?: BrandUserCreateOrConnectWithoutBrandInput
    upsert?: BrandUserUpsertWithoutBrandInput
    disconnect?: BrandUserWhereInput | boolean
    delete?: BrandUserWhereInput | boolean
    connect?: BrandUserWhereUniqueInput
    update?: XOR<XOR<BrandUserUpdateToOneWithWhereWithoutBrandInput, BrandUserUpdateWithoutBrandInput>, BrandUserUncheckedUpdateWithoutBrandInput>
  }

  export type BrandCreateNestedOneWithoutStoresInput = {
    create?: XOR<BrandCreateWithoutStoresInput, BrandUncheckedCreateWithoutStoresInput>
    connectOrCreate?: BrandCreateOrConnectWithoutStoresInput
    connect?: BrandWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutStoreInput = {
    create?: XOR<CountryCreateWithoutStoreInput, CountryUncheckedCreateWithoutStoreInput>
    connectOrCreate?: CountryCreateOrConnectWithoutStoreInput
    connect?: CountryWhereUniqueInput
  }

  export type CurrencyCreateNestedOneWithoutStoreInput = {
    create?: XOR<CurrencyCreateWithoutStoreInput, CurrencyUncheckedCreateWithoutStoreInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutStoreInput
    connect?: CurrencyWhereUniqueInput
  }

  export type ReceiptCreateNestedManyWithoutStoreInput = {
    create?: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput> | ReceiptCreateWithoutStoreInput[] | ReceiptUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutStoreInput | ReceiptCreateOrConnectWithoutStoreInput[]
    createMany?: ReceiptCreateManyStoreInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type ReceiptUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput> | ReceiptCreateWithoutStoreInput[] | ReceiptUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutStoreInput | ReceiptCreateOrConnectWithoutStoreInput[]
    createMany?: ReceiptCreateManyStoreInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BrandUpdateOneRequiredWithoutStoresNestedInput = {
    create?: XOR<BrandCreateWithoutStoresInput, BrandUncheckedCreateWithoutStoresInput>
    connectOrCreate?: BrandCreateOrConnectWithoutStoresInput
    upsert?: BrandUpsertWithoutStoresInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutStoresInput, BrandUpdateWithoutStoresInput>, BrandUncheckedUpdateWithoutStoresInput>
  }

  export type CountryUpdateOneRequiredWithoutStoreNestedInput = {
    create?: XOR<CountryCreateWithoutStoreInput, CountryUncheckedCreateWithoutStoreInput>
    connectOrCreate?: CountryCreateOrConnectWithoutStoreInput
    upsert?: CountryUpsertWithoutStoreInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutStoreInput, CountryUpdateWithoutStoreInput>, CountryUncheckedUpdateWithoutStoreInput>
  }

  export type CurrencyUpdateOneRequiredWithoutStoreNestedInput = {
    create?: XOR<CurrencyCreateWithoutStoreInput, CurrencyUncheckedCreateWithoutStoreInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutStoreInput
    upsert?: CurrencyUpsertWithoutStoreInput
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutStoreInput, CurrencyUpdateWithoutStoreInput>, CurrencyUncheckedUpdateWithoutStoreInput>
  }

  export type ReceiptUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput> | ReceiptCreateWithoutStoreInput[] | ReceiptUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutStoreInput | ReceiptCreateOrConnectWithoutStoreInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutStoreInput | ReceiptUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ReceiptCreateManyStoreInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutStoreInput | ReceiptUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutStoreInput | ReceiptUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type ReceiptUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput> | ReceiptCreateWithoutStoreInput[] | ReceiptUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutStoreInput | ReceiptCreateOrConnectWithoutStoreInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutStoreInput | ReceiptUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ReceiptCreateManyStoreInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutStoreInput | ReceiptUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutStoreInput | ReceiptUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type ReceiptCreateotherInformationInput = {
    set: string[]
  }

  export type ConsumerCreateNestedOneWithoutReceiptsInput = {
    create?: XOR<ConsumerCreateWithoutReceiptsInput, ConsumerUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutReceiptsInput
    connect?: ConsumerWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutReceiptsInput = {
    create?: XOR<StoreCreateWithoutReceiptsInput, StoreUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutReceiptsInput
    connect?: StoreWhereUniqueInput
  }

  export type ReceiptItemCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput> | ReceiptItemCreateWithoutReceiptInput[] | ReceiptItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptItemCreateOrConnectWithoutReceiptInput | ReceiptItemCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptItemCreateManyReceiptInputEnvelope
    connect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
  }

  export type ReceiptPaymentCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput> | ReceiptPaymentCreateWithoutReceiptInput[] | ReceiptPaymentUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptPaymentCreateOrConnectWithoutReceiptInput | ReceiptPaymentCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptPaymentCreateManyReceiptInputEnvelope
    connect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
  }

  export type ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput> | ReceiptItemCreateWithoutReceiptInput[] | ReceiptItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptItemCreateOrConnectWithoutReceiptInput | ReceiptItemCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptItemCreateManyReceiptInputEnvelope
    connect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
  }

  export type ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput> | ReceiptPaymentCreateWithoutReceiptInput[] | ReceiptPaymentUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptPaymentCreateOrConnectWithoutReceiptInput | ReceiptPaymentCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptPaymentCreateManyReceiptInputEnvelope
    connect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
  }

  export type ReceiptUpdateotherInformationInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ConsumerUpdateOneRequiredWithoutReceiptsNestedInput = {
    create?: XOR<ConsumerCreateWithoutReceiptsInput, ConsumerUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutReceiptsInput
    upsert?: ConsumerUpsertWithoutReceiptsInput
    connect?: ConsumerWhereUniqueInput
    update?: XOR<XOR<ConsumerUpdateToOneWithWhereWithoutReceiptsInput, ConsumerUpdateWithoutReceiptsInput>, ConsumerUncheckedUpdateWithoutReceiptsInput>
  }

  export type StoreUpdateOneRequiredWithoutReceiptsNestedInput = {
    create?: XOR<StoreCreateWithoutReceiptsInput, StoreUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutReceiptsInput
    upsert?: StoreUpsertWithoutReceiptsInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutReceiptsInput, StoreUpdateWithoutReceiptsInput>, StoreUncheckedUpdateWithoutReceiptsInput>
  }

  export type ReceiptItemUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput> | ReceiptItemCreateWithoutReceiptInput[] | ReceiptItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptItemCreateOrConnectWithoutReceiptInput | ReceiptItemCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput | ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptItemCreateManyReceiptInputEnvelope
    set?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    disconnect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    delete?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    connect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    update?: ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput | ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptItemUpdateManyWithWhereWithoutReceiptInput | ReceiptItemUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptItemScalarWhereInput | ReceiptItemScalarWhereInput[]
  }

  export type ReceiptPaymentUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput> | ReceiptPaymentCreateWithoutReceiptInput[] | ReceiptPaymentUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptPaymentCreateOrConnectWithoutReceiptInput | ReceiptPaymentCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput | ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptPaymentCreateManyReceiptInputEnvelope
    set?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    disconnect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    delete?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    connect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    update?: ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput | ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput | ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptPaymentScalarWhereInput | ReceiptPaymentScalarWhereInput[]
  }

  export type ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput> | ReceiptItemCreateWithoutReceiptInput[] | ReceiptItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptItemCreateOrConnectWithoutReceiptInput | ReceiptItemCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput | ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptItemCreateManyReceiptInputEnvelope
    set?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    disconnect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    delete?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    connect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    update?: ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput | ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptItemUpdateManyWithWhereWithoutReceiptInput | ReceiptItemUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptItemScalarWhereInput | ReceiptItemScalarWhereInput[]
  }

  export type ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput> | ReceiptPaymentCreateWithoutReceiptInput[] | ReceiptPaymentUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptPaymentCreateOrConnectWithoutReceiptInput | ReceiptPaymentCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput | ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptPaymentCreateManyReceiptInputEnvelope
    set?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    disconnect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    delete?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    connect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    update?: ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput | ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput | ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptPaymentScalarWhereInput | ReceiptPaymentScalarWhereInput[]
  }

  export type ReceiptCreateNestedOneWithoutReceiptPaymentsInput = {
    create?: XOR<ReceiptCreateWithoutReceiptPaymentsInput, ReceiptUncheckedCreateWithoutReceiptPaymentsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptPaymentsInput
    connect?: ReceiptWhereUniqueInput
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type ReceiptUpdateOneRequiredWithoutReceiptPaymentsNestedInput = {
    create?: XOR<ReceiptCreateWithoutReceiptPaymentsInput, ReceiptUncheckedCreateWithoutReceiptPaymentsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptPaymentsInput
    upsert?: ReceiptUpsertWithoutReceiptPaymentsInput
    connect?: ReceiptWhereUniqueInput
    update?: XOR<XOR<ReceiptUpdateToOneWithWhereWithoutReceiptPaymentsInput, ReceiptUpdateWithoutReceiptPaymentsInput>, ReceiptUncheckedUpdateWithoutReceiptPaymentsInput>
  }

  export type ReceiptCreateNestedOneWithoutReceiptItemsInput = {
    create?: XOR<ReceiptCreateWithoutReceiptItemsInput, ReceiptUncheckedCreateWithoutReceiptItemsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptItemsInput
    connect?: ReceiptWhereUniqueInput
  }

  export type ReceiptUpdateOneRequiredWithoutReceiptItemsNestedInput = {
    create?: XOR<ReceiptCreateWithoutReceiptItemsInput, ReceiptUncheckedCreateWithoutReceiptItemsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptItemsInput
    upsert?: ReceiptUpsertWithoutReceiptItemsInput
    connect?: ReceiptWhereUniqueInput
    update?: XOR<XOR<ReceiptUpdateToOneWithWhereWithoutReceiptItemsInput, ReceiptUpdateWithoutReceiptItemsInput>, ReceiptUncheckedUpdateWithoutReceiptItemsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type StateCreateWithoutUsersInput = {
    id?: string
    isoCode: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutStatesInput
    merchants?: MerchantCreateNestedManyWithoutStateInput
    brands?: BrandCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutUsersInput = {
    id?: string
    isoCode: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutStateInput
    brands?: BrandUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutUsersInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
  }

  export type ConsumerCreateWithoutUserInput = {
    id?: string
    barcode: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Receipts?: ReceiptCreateNestedManyWithoutConsumerInput
  }

  export type ConsumerUncheckedCreateWithoutUserInput = {
    id?: string
    barcode: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Receipts?: ReceiptUncheckedCreateNestedManyWithoutConsumerInput
  }

  export type ConsumerCreateOrConnectWithoutUserInput = {
    where: ConsumerWhereUniqueInput
    create: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
  }

  export type MerchantUserCreateWithoutUserInput = {
    id?: string
    jobTitle: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutMerchantUserInput
    brandUsers?: BrandUserCreateNestedManyWithoutMerchantUserInput
  }

  export type MerchantUserUncheckedCreateWithoutUserInput = {
    id?: string
    jobTitle: string
    merchantId: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    brandUsers?: BrandUserUncheckedCreateNestedManyWithoutMerchantUserInput
  }

  export type MerchantUserCreateOrConnectWithoutUserInput = {
    where: MerchantUserWhereUniqueInput
    create: XOR<MerchantUserCreateWithoutUserInput, MerchantUserUncheckedCreateWithoutUserInput>
  }

  export type AdminUserCreateWithoutUserInput = {
    id?: string
    jobTitle: string
    adminRole?: AdminUserCreateadminRoleInput | $Enums.AdminRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUserUncheckedCreateWithoutUserInput = {
    id?: string
    jobTitle: string
    adminRole?: AdminUserCreateadminRoleInput | $Enums.AdminRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUserCreateOrConnectWithoutUserInput = {
    where: AdminUserWhereUniqueInput
    create: XOR<AdminUserCreateWithoutUserInput, AdminUserUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    twoFactorVerified?: boolean
    rememberMe: boolean
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    twoFactorVerified?: boolean
    rememberMe: boolean
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmailVerificationRequestCreateWithoutUserInput = {
    id: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailVerificationRequestUncheckedCreateWithoutUserInput = {
    id: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailVerificationRequestCreateOrConnectWithoutUserInput = {
    where: EmailVerificationRequestWhereUniqueInput
    create: XOR<EmailVerificationRequestCreateWithoutUserInput, EmailVerificationRequestUncheckedCreateWithoutUserInput>
  }

  export type EmailVerificationRequestCreateManyUserInputEnvelope = {
    data: EmailVerificationRequestCreateManyUserInput | EmailVerificationRequestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetSessionCreateWithoutUserInput = {
    id: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetSessionUncheckedCreateWithoutUserInput = {
    id: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetSessionCreateOrConnectWithoutUserInput = {
    where: PasswordResetSessionWhereUniqueInput
    create: XOR<PasswordResetSessionCreateWithoutUserInput, PasswordResetSessionUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetSessionCreateManyUserInputEnvelope = {
    data: PasswordResetSessionCreateManyUserInput | PasswordResetSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MerchantCreateWithoutPrimaryContactInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn: string
    acn: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutMerchantsInput
    country: CountryCreateNestedOneWithoutMerchantsInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
    merchantUser?: MerchantUserCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutPrimaryContactInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn: string
    acn: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
    merchantUser?: MerchantUserUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutPrimaryContactInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutPrimaryContactInput, MerchantUncheckedCreateWithoutPrimaryContactInput>
  }

  export type BrandCreateWithoutPrimaryContactInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    state: StateCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserCreateNestedOneWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutPrimaryContactInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserUncheckedCreateNestedOneWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutPrimaryContactInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutPrimaryContactInput, BrandUncheckedCreateWithoutPrimaryContactInput>
  }

  export type BrandCreateManyPrimaryContactInputEnvelope = {
    data: BrandCreateManyPrimaryContactInput | BrandCreateManyPrimaryContactInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutUsersInput = {
    update: XOR<StateUpdateWithoutUsersInput, StateUncheckedUpdateWithoutUsersInput>
    create: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutUsersInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutUsersInput, StateUncheckedUpdateWithoutUsersInput>
  }

  export type StateUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutStatesNestedInput
    merchants?: MerchantUpdateManyWithoutStateNestedInput
    brands?: BrandUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutStateNestedInput
    brands?: BrandUncheckedUpdateManyWithoutStateNestedInput
  }

  export type ConsumerUpsertWithoutUserInput = {
    update: XOR<ConsumerUpdateWithoutUserInput, ConsumerUncheckedUpdateWithoutUserInput>
    create: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    where?: ConsumerWhereInput
  }

  export type ConsumerUpdateToOneWithWhereWithoutUserInput = {
    where?: ConsumerWhereInput
    data: XOR<ConsumerUpdateWithoutUserInput, ConsumerUncheckedUpdateWithoutUserInput>
  }

  export type ConsumerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Receipts?: ReceiptUpdateManyWithoutConsumerNestedInput
  }

  export type ConsumerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Receipts?: ReceiptUncheckedUpdateManyWithoutConsumerNestedInput
  }

  export type MerchantUserUpsertWithoutUserInput = {
    update: XOR<MerchantUserUpdateWithoutUserInput, MerchantUserUncheckedUpdateWithoutUserInput>
    create: XOR<MerchantUserCreateWithoutUserInput, MerchantUserUncheckedCreateWithoutUserInput>
    where?: MerchantUserWhereInput
  }

  export type MerchantUserUpdateToOneWithWhereWithoutUserInput = {
    where?: MerchantUserWhereInput
    data: XOR<MerchantUserUpdateWithoutUserInput, MerchantUserUncheckedUpdateWithoutUserInput>
  }

  export type MerchantUserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutMerchantUserNestedInput
    brandUsers?: BrandUserUpdateManyWithoutMerchantUserNestedInput
  }

  export type MerchantUserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantId?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandUsers?: BrandUserUncheckedUpdateManyWithoutMerchantUserNestedInput
  }

  export type AdminUserUpsertWithoutUserInput = {
    update: XOR<AdminUserUpdateWithoutUserInput, AdminUserUncheckedUpdateWithoutUserInput>
    create: XOR<AdminUserCreateWithoutUserInput, AdminUserUncheckedCreateWithoutUserInput>
    where?: AdminUserWhereInput
  }

  export type AdminUserUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminUserWhereInput
    data: XOR<AdminUserUpdateWithoutUserInput, AdminUserUncheckedUpdateWithoutUserInput>
  }

  export type AdminUserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminRole?: AdminUserUpdateadminRoleInput | $Enums.AdminRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminRole?: AdminUserUpdateadminRoleInput | $Enums.AdminRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: IntFilter<"Session"> | number
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    twoFactorVerified?: BoolFilter<"Session"> | boolean
    userId?: StringFilter<"Session"> | string
    rememberMe?: BoolFilter<"Session"> | boolean
  }

  export type EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: EmailVerificationRequestWhereUniqueInput
    update: XOR<EmailVerificationRequestUpdateWithoutUserInput, EmailVerificationRequestUncheckedUpdateWithoutUserInput>
    create: XOR<EmailVerificationRequestCreateWithoutUserInput, EmailVerificationRequestUncheckedCreateWithoutUserInput>
  }

  export type EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: EmailVerificationRequestWhereUniqueInput
    data: XOR<EmailVerificationRequestUpdateWithoutUserInput, EmailVerificationRequestUncheckedUpdateWithoutUserInput>
  }

  export type EmailVerificationRequestUpdateManyWithWhereWithoutUserInput = {
    where: EmailVerificationRequestScalarWhereInput
    data: XOR<EmailVerificationRequestUpdateManyMutationInput, EmailVerificationRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type EmailVerificationRequestScalarWhereInput = {
    AND?: EmailVerificationRequestScalarWhereInput | EmailVerificationRequestScalarWhereInput[]
    OR?: EmailVerificationRequestScalarWhereInput[]
    NOT?: EmailVerificationRequestScalarWhereInput | EmailVerificationRequestScalarWhereInput[]
    id?: StringFilter<"EmailVerificationRequest"> | string
    userId?: StringFilter<"EmailVerificationRequest"> | string
    email?: StringFilter<"EmailVerificationRequest"> | string
    expiresAt?: IntFilter<"EmailVerificationRequest"> | number
    code?: StringFilter<"EmailVerificationRequest"> | string
    createdAt?: DateTimeFilter<"EmailVerificationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"EmailVerificationRequest"> | Date | string
  }

  export type PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordResetSessionWhereUniqueInput
    update: XOR<PasswordResetSessionUpdateWithoutUserInput, PasswordResetSessionUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordResetSessionCreateWithoutUserInput, PasswordResetSessionUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordResetSessionWhereUniqueInput
    data: XOR<PasswordResetSessionUpdateWithoutUserInput, PasswordResetSessionUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetSessionUpdateManyWithWhereWithoutUserInput = {
    where: PasswordResetSessionScalarWhereInput
    data: XOR<PasswordResetSessionUpdateManyMutationInput, PasswordResetSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type PasswordResetSessionScalarWhereInput = {
    AND?: PasswordResetSessionScalarWhereInput | PasswordResetSessionScalarWhereInput[]
    OR?: PasswordResetSessionScalarWhereInput[]
    NOT?: PasswordResetSessionScalarWhereInput | PasswordResetSessionScalarWhereInput[]
    id?: StringFilter<"PasswordResetSession"> | string
    userId?: StringFilter<"PasswordResetSession"> | string
    email?: StringFilter<"PasswordResetSession"> | string
    expiresAt?: IntFilter<"PasswordResetSession"> | number
    code?: StringFilter<"PasswordResetSession"> | string
    createdAt?: DateTimeFilter<"PasswordResetSession"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordResetSession"> | Date | string
  }

  export type MerchantUpsertWithoutPrimaryContactInput = {
    update: XOR<MerchantUpdateWithoutPrimaryContactInput, MerchantUncheckedUpdateWithoutPrimaryContactInput>
    create: XOR<MerchantCreateWithoutPrimaryContactInput, MerchantUncheckedCreateWithoutPrimaryContactInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutPrimaryContactInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutPrimaryContactInput, MerchantUncheckedUpdateWithoutPrimaryContactInput>
  }

  export type MerchantUpdateWithoutPrimaryContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutMerchantsNestedInput
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
    merchantUser?: MerchantUserUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutPrimaryContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
    merchantUser?: MerchantUserUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type BrandUpsertWithWhereUniqueWithoutPrimaryContactInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutPrimaryContactInput, BrandUncheckedUpdateWithoutPrimaryContactInput>
    create: XOR<BrandCreateWithoutPrimaryContactInput, BrandUncheckedCreateWithoutPrimaryContactInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutPrimaryContactInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutPrimaryContactInput, BrandUncheckedUpdateWithoutPrimaryContactInput>
  }

  export type BrandUpdateManyWithWhereWithoutPrimaryContactInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutPrimaryContactInput>
  }

  export type BrandScalarWhereInput = {
    AND?: BrandScalarWhereInput | BrandScalarWhereInput[]
    OR?: BrandScalarWhereInput[]
    NOT?: BrandScalarWhereInput | BrandScalarWhereInput[]
    id?: StringFilter<"Brand"> | string
    status?: EnumStatusFilter<"Brand"> | $Enums.Status
    merchantId?: StringFilter<"Brand"> | string
    name?: StringFilter<"Brand"> | string
    slug?: StringFilter<"Brand"> | string
    genericEmail?: StringFilter<"Brand"> | string
    invoiceEmail?: StringNullableFilter<"Brand"> | string | null
    tradingAsName?: StringFilter<"Brand"> | string
    logoUrl?: StringFilter<"Brand"> | string
    address1?: StringFilter<"Brand"> | string
    address2?: StringNullableFilter<"Brand"> | string | null
    suburb?: StringFilter<"Brand"> | string
    postcode?: StringFilter<"Brand"> | string
    stateId?: StringFilter<"Brand"> | string
    countryId?: StringFilter<"Brand"> | string
    abn?: StringNullableFilter<"Brand"> | string | null
    acn?: StringNullableFilter<"Brand"> | string | null
    phoneNumber?: StringFilter<"Brand"> | string
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    primaryContactId?: StringNullableFilter<"Brand"> | string | null
  }

  export type UserCreateWithoutSessionInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserCreateWithoutEmailVerificationRequestInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutEmailVerificationRequestInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutEmailVerificationRequestInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmailVerificationRequestInput, UserUncheckedCreateWithoutEmailVerificationRequestInput>
  }

  export type UserUpsertWithoutEmailVerificationRequestInput = {
    update: XOR<UserUpdateWithoutEmailVerificationRequestInput, UserUncheckedUpdateWithoutEmailVerificationRequestInput>
    create: XOR<UserCreateWithoutEmailVerificationRequestInput, UserUncheckedCreateWithoutEmailVerificationRequestInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmailVerificationRequestInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmailVerificationRequestInput, UserUncheckedUpdateWithoutEmailVerificationRequestInput>
  }

  export type UserUpdateWithoutEmailVerificationRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutEmailVerificationRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserCreateWithoutPasswordResetSessionInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutPasswordResetSessionInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutPasswordResetSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordResetSessionInput, UserUncheckedCreateWithoutPasswordResetSessionInput>
  }

  export type UserUpsertWithoutPasswordResetSessionInput = {
    update: XOR<UserUpdateWithoutPasswordResetSessionInput, UserUncheckedUpdateWithoutPasswordResetSessionInput>
    create: XOR<UserCreateWithoutPasswordResetSessionInput, UserUncheckedCreateWithoutPasswordResetSessionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordResetSessionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordResetSessionInput, UserUncheckedUpdateWithoutPasswordResetSessionInput>
  }

  export type UserUpdateWithoutPasswordResetSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordResetSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserCreateWithoutConsumerUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutConsumerUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutConsumerUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConsumerUserInput, UserUncheckedCreateWithoutConsumerUserInput>
  }

  export type ReceiptCreateWithoutConsumerInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutConsumerInput = {
    id?: string
    receiptNumber: string
    storeId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutConsumerInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput>
  }

  export type ReceiptCreateManyConsumerInputEnvelope = {
    data: ReceiptCreateManyConsumerInput | ReceiptCreateManyConsumerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutConsumerUserInput = {
    update: XOR<UserUpdateWithoutConsumerUserInput, UserUncheckedUpdateWithoutConsumerUserInput>
    create: XOR<UserCreateWithoutConsumerUserInput, UserUncheckedCreateWithoutConsumerUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConsumerUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConsumerUserInput, UserUncheckedUpdateWithoutConsumerUserInput>
  }

  export type UserUpdateWithoutConsumerUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutConsumerUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type ReceiptUpsertWithWhereUniqueWithoutConsumerInput = {
    where: ReceiptWhereUniqueInput
    update: XOR<ReceiptUpdateWithoutConsumerInput, ReceiptUncheckedUpdateWithoutConsumerInput>
    create: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput>
  }

  export type ReceiptUpdateWithWhereUniqueWithoutConsumerInput = {
    where: ReceiptWhereUniqueInput
    data: XOR<ReceiptUpdateWithoutConsumerInput, ReceiptUncheckedUpdateWithoutConsumerInput>
  }

  export type ReceiptUpdateManyWithWhereWithoutConsumerInput = {
    where: ReceiptScalarWhereInput
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyWithoutConsumerInput>
  }

  export type ReceiptScalarWhereInput = {
    AND?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
    OR?: ReceiptScalarWhereInput[]
    NOT?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
    id?: StringFilter<"Receipt"> | string
    receiptNumber?: StringFilter<"Receipt"> | string
    consumerId?: StringFilter<"Receipt"> | string
    storeId?: StringFilter<"Receipt"> | string
    subTotal?: FloatFilter<"Receipt"> | number
    tax?: FloatFilter<"Receipt"> | number
    cardSurcharge?: FloatFilter<"Receipt"> | number
    otherInformation?: StringNullableListFilter<"Receipt">
    receiptDateTime?: DateTimeFilter<"Receipt"> | Date | string
    createdAt?: DateTimeFilter<"Receipt"> | Date | string
    updatedAt?: DateTimeFilter<"Receipt"> | Date | string
  }

  export type MerchantCreateWithoutMerchantUserInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn: string
    acn: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutMerchantsInput
    country: CountryCreateNestedOneWithoutMerchantsInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactMerchantInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutMerchantUserInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn: string
    acn: string
    logoUrl?: string | null
    primaryContactId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutMerchantUserInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutMerchantUserInput, MerchantUncheckedCreateWithoutMerchantUserInput>
  }

  export type BrandUserCreateWithoutMerchantUserInput = {
    id?: string
    brandRole?: BrandUserCreatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutBrandUserInput
  }

  export type BrandUserUncheckedCreateWithoutMerchantUserInput = {
    id?: string
    brandId: string
    brandRole?: BrandUserCreatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUserCreateOrConnectWithoutMerchantUserInput = {
    where: BrandUserWhereUniqueInput
    create: XOR<BrandUserCreateWithoutMerchantUserInput, BrandUserUncheckedCreateWithoutMerchantUserInput>
  }

  export type BrandUserCreateManyMerchantUserInputEnvelope = {
    data: BrandUserCreateManyMerchantUserInput | BrandUserCreateManyMerchantUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutMerchantUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutMerchantUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutMerchantUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMerchantUserInput, UserUncheckedCreateWithoutMerchantUserInput>
  }

  export type MerchantUpsertWithoutMerchantUserInput = {
    update: XOR<MerchantUpdateWithoutMerchantUserInput, MerchantUncheckedUpdateWithoutMerchantUserInput>
    create: XOR<MerchantCreateWithoutMerchantUserInput, MerchantUncheckedCreateWithoutMerchantUserInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutMerchantUserInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutMerchantUserInput, MerchantUncheckedUpdateWithoutMerchantUserInput>
  }

  export type MerchantUpdateWithoutMerchantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutMerchantsNestedInput
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactMerchantNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutMerchantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type BrandUserUpsertWithWhereUniqueWithoutMerchantUserInput = {
    where: BrandUserWhereUniqueInput
    update: XOR<BrandUserUpdateWithoutMerchantUserInput, BrandUserUncheckedUpdateWithoutMerchantUserInput>
    create: XOR<BrandUserCreateWithoutMerchantUserInput, BrandUserUncheckedCreateWithoutMerchantUserInput>
  }

  export type BrandUserUpdateWithWhereUniqueWithoutMerchantUserInput = {
    where: BrandUserWhereUniqueInput
    data: XOR<BrandUserUpdateWithoutMerchantUserInput, BrandUserUncheckedUpdateWithoutMerchantUserInput>
  }

  export type BrandUserUpdateManyWithWhereWithoutMerchantUserInput = {
    where: BrandUserScalarWhereInput
    data: XOR<BrandUserUpdateManyMutationInput, BrandUserUncheckedUpdateManyWithoutMerchantUserInput>
  }

  export type BrandUserScalarWhereInput = {
    AND?: BrandUserScalarWhereInput | BrandUserScalarWhereInput[]
    OR?: BrandUserScalarWhereInput[]
    NOT?: BrandUserScalarWhereInput | BrandUserScalarWhereInput[]
    id?: StringFilter<"BrandUser"> | string
    brandId?: StringFilter<"BrandUser"> | string
    merchantUserId?: StringNullableFilter<"BrandUser"> | string | null
    brandRole?: EnumBrandRoleNullableListFilter<"BrandUser">
    createdAt?: DateTimeFilter<"BrandUser"> | Date | string
    updatedAt?: DateTimeFilter<"BrandUser"> | Date | string
  }

  export type UserUpsertWithoutMerchantUserInput = {
    update: XOR<UserUpdateWithoutMerchantUserInput, UserUncheckedUpdateWithoutMerchantUserInput>
    create: XOR<UserCreateWithoutMerchantUserInput, UserUncheckedCreateWithoutMerchantUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMerchantUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMerchantUserInput, UserUncheckedUpdateWithoutMerchantUserInput>
  }

  export type UserUpdateWithoutMerchantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutMerchantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserCreateWithoutAdminUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutAdminUserInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutAdminUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminUserInput, UserUncheckedCreateWithoutAdminUserInput>
  }

  export type UserUpsertWithoutAdminUserInput = {
    update: XOR<UserUpdateWithoutAdminUserInput, UserUncheckedUpdateWithoutAdminUserInput>
    create: XOR<UserCreateWithoutAdminUserInput, UserUncheckedCreateWithoutAdminUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminUserInput, UserUncheckedUpdateWithoutAdminUserInput>
  }

  export type UserUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type BrandCreateWithoutBrandUserInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    state: StateCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutBrandUserInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutBrandUserInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutBrandUserInput, BrandUncheckedCreateWithoutBrandUserInput>
  }

  export type MerchantUserCreateWithoutBrandUsersInput = {
    id?: string
    jobTitle: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutMerchantUserInput
    user: UserCreateNestedOneWithoutMerchantUserInput
  }

  export type MerchantUserUncheckedCreateWithoutBrandUsersInput = {
    id?: string
    jobTitle: string
    merchantId: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MerchantUserCreateOrConnectWithoutBrandUsersInput = {
    where: MerchantUserWhereUniqueInput
    create: XOR<MerchantUserCreateWithoutBrandUsersInput, MerchantUserUncheckedCreateWithoutBrandUsersInput>
  }

  export type BrandUpsertWithoutBrandUserInput = {
    update: XOR<BrandUpdateWithoutBrandUserInput, BrandUncheckedUpdateWithoutBrandUserInput>
    create: XOR<BrandCreateWithoutBrandUserInput, BrandUncheckedCreateWithoutBrandUserInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutBrandUserInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutBrandUserInput, BrandUncheckedUpdateWithoutBrandUserInput>
  }

  export type BrandUpdateWithoutBrandUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    state?: StateUpdateOneRequiredWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutBrandUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type MerchantUserUpsertWithoutBrandUsersInput = {
    update: XOR<MerchantUserUpdateWithoutBrandUsersInput, MerchantUserUncheckedUpdateWithoutBrandUsersInput>
    create: XOR<MerchantUserCreateWithoutBrandUsersInput, MerchantUserUncheckedCreateWithoutBrandUsersInput>
    where?: MerchantUserWhereInput
  }

  export type MerchantUserUpdateToOneWithWhereWithoutBrandUsersInput = {
    where?: MerchantUserWhereInput
    data: XOR<MerchantUserUpdateWithoutBrandUsersInput, MerchantUserUncheckedUpdateWithoutBrandUsersInput>
  }

  export type MerchantUserUpdateWithoutBrandUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutMerchantUserNestedInput
    user?: UserUpdateOneRequiredWithoutMerchantUserNestedInput
  }

  export type MerchantUserUncheckedUpdateWithoutBrandUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantId?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreCreateWithoutCurrencyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutCurrencyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    countryId: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutCurrencyInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput>
  }

  export type StoreCreateManyCurrencyInputEnvelope = {
    data: StoreCreateManyCurrencyInput | StoreCreateManyCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type StoreUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: StoreWhereUniqueInput
    update: XOR<StoreUpdateWithoutCurrencyInput, StoreUncheckedUpdateWithoutCurrencyInput>
    create: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput>
  }

  export type StoreUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: StoreWhereUniqueInput
    data: XOR<StoreUpdateWithoutCurrencyInput, StoreUncheckedUpdateWithoutCurrencyInput>
  }

  export type StoreUpdateManyWithWhereWithoutCurrencyInput = {
    where: StoreScalarWhereInput
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyWithoutCurrencyInput>
  }

  export type StoreScalarWhereInput = {
    AND?: StoreScalarWhereInput | StoreScalarWhereInput[]
    OR?: StoreScalarWhereInput[]
    NOT?: StoreScalarWhereInput | StoreScalarWhereInput[]
    id?: StringFilter<"Store"> | string
    name?: StringFilter<"Store"> | string
    slug?: StringFilter<"Store"> | string
    status?: EnumStatusFilter<"Store"> | $Enums.Status
    brandId?: StringFilter<"Store"> | string
    address1?: StringFilter<"Store"> | string
    address2?: StringNullableFilter<"Store"> | string | null
    city?: StringFilter<"Store"> | string
    region?: StringFilter<"Store"> | string
    postalCode?: StringFilter<"Store"> | string
    countryId?: StringFilter<"Store"> | string
    formattedAddress?: StringFilter<"Store"> | string
    latitude?: FloatFilter<"Store"> | number
    longitude?: FloatFilter<"Store"> | number
    abn?: StringNullableFilter<"Store"> | string | null
    acn?: StringNullableFilter<"Store"> | string | null
    phoneNumber?: StringFilter<"Store"> | string
    currencyId?: StringFilter<"Store"> | string
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
  }

  export type StateCreateWithoutCountryInput = {
    id?: string
    isoCode: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantCreateNestedManyWithoutStateInput
    brands?: BrandCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutCountryInput = {
    id?: string
    isoCode: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutStateInput
    brands?: BrandUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutCountryInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutCountryInput, StateUncheckedCreateWithoutCountryInput>
  }

  export type StateCreateManyCountryInputEnvelope = {
    data: StateCreateManyCountryInput | StateCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type MerchantCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn: string
    acn: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutMerchantsInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactMerchantInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
    merchantUser?: MerchantUserCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    abn: string
    acn: string
    logoUrl?: string | null
    primaryContactId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
    merchantUser?: MerchantUserUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutCountryInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput>
  }

  export type MerchantCreateManyCountryInputEnvelope = {
    data: MerchantCreateManyCountryInput | MerchantCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type StoreCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    currency: CurrencyCreateNestedOneWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutCountryInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput>
  }

  export type StoreCreateManyCountryInputEnvelope = {
    data: StoreCreateManyCountryInput | StoreCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type BrandCreateWithoutCountryInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    state: StateCreateNestedOneWithoutBrandsInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserCreateNestedOneWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutCountryInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserUncheckedCreateNestedOneWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutCountryInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput>
  }

  export type BrandCreateManyCountryInputEnvelope = {
    data: BrandCreateManyCountryInput | BrandCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithWhereUniqueWithoutCountryInput = {
    where: StateWhereUniqueInput
    update: XOR<StateUpdateWithoutCountryInput, StateUncheckedUpdateWithoutCountryInput>
    create: XOR<StateCreateWithoutCountryInput, StateUncheckedCreateWithoutCountryInput>
  }

  export type StateUpdateWithWhereUniqueWithoutCountryInput = {
    where: StateWhereUniqueInput
    data: XOR<StateUpdateWithoutCountryInput, StateUncheckedUpdateWithoutCountryInput>
  }

  export type StateUpdateManyWithWhereWithoutCountryInput = {
    where: StateScalarWhereInput
    data: XOR<StateUpdateManyMutationInput, StateUncheckedUpdateManyWithoutCountryInput>
  }

  export type StateScalarWhereInput = {
    AND?: StateScalarWhereInput | StateScalarWhereInput[]
    OR?: StateScalarWhereInput[]
    NOT?: StateScalarWhereInput | StateScalarWhereInput[]
    id?: StringFilter<"State"> | string
    isoCode?: StringFilter<"State"> | string
    name?: StringFilter<"State"> | string
    countryId?: StringFilter<"State"> | string
    createdAt?: DateTimeFilter<"State"> | Date | string
    updatedAt?: DateTimeFilter<"State"> | Date | string
  }

  export type MerchantUpsertWithWhereUniqueWithoutCountryInput = {
    where: MerchantWhereUniqueInput
    update: XOR<MerchantUpdateWithoutCountryInput, MerchantUncheckedUpdateWithoutCountryInput>
    create: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput>
  }

  export type MerchantUpdateWithWhereUniqueWithoutCountryInput = {
    where: MerchantWhereUniqueInput
    data: XOR<MerchantUpdateWithoutCountryInput, MerchantUncheckedUpdateWithoutCountryInput>
  }

  export type MerchantUpdateManyWithWhereWithoutCountryInput = {
    where: MerchantScalarWhereInput
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyWithoutCountryInput>
  }

  export type MerchantScalarWhereInput = {
    AND?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
    OR?: MerchantScalarWhereInput[]
    NOT?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
    id?: StringFilter<"Merchant"> | string
    name?: StringFilter<"Merchant"> | string
    slug?: StringFilter<"Merchant"> | string
    status?: EnumStatusFilter<"Merchant"> | $Enums.Status
    phoneNumber?: StringFilter<"Merchant"> | string
    genericEmail?: StringFilter<"Merchant"> | string
    invoiceEmail?: StringNullableFilter<"Merchant"> | string | null
    address1?: StringFilter<"Merchant"> | string
    address2?: StringNullableFilter<"Merchant"> | string | null
    suburb?: StringFilter<"Merchant"> | string
    postcode?: StringFilter<"Merchant"> | string
    stateId?: StringFilter<"Merchant"> | string
    countryId?: StringFilter<"Merchant"> | string
    abn?: StringFilter<"Merchant"> | string
    acn?: StringFilter<"Merchant"> | string
    logoUrl?: StringNullableFilter<"Merchant"> | string | null
    primaryContactId?: StringNullableFilter<"Merchant"> | string | null
    createdAt?: DateTimeFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeFilter<"Merchant"> | Date | string
  }

  export type StoreUpsertWithWhereUniqueWithoutCountryInput = {
    where: StoreWhereUniqueInput
    update: XOR<StoreUpdateWithoutCountryInput, StoreUncheckedUpdateWithoutCountryInput>
    create: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput>
  }

  export type StoreUpdateWithWhereUniqueWithoutCountryInput = {
    where: StoreWhereUniqueInput
    data: XOR<StoreUpdateWithoutCountryInput, StoreUncheckedUpdateWithoutCountryInput>
  }

  export type StoreUpdateManyWithWhereWithoutCountryInput = {
    where: StoreScalarWhereInput
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyWithoutCountryInput>
  }

  export type BrandUpsertWithWhereUniqueWithoutCountryInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutCountryInput, BrandUncheckedUpdateWithoutCountryInput>
    create: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutCountryInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutCountryInput, BrandUncheckedUpdateWithoutCountryInput>
  }

  export type BrandUpdateManyWithWhereWithoutCountryInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutCountryInput>
  }

  export type CountryCreateWithoutStatesInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Merchants?: MerchantCreateNestedManyWithoutCountryInput
    store?: StoreCreateNestedManyWithoutCountryInput
    brand?: BrandCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutStatesInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    store?: StoreUncheckedCreateNestedManyWithoutCountryInput
    brand?: BrandUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutStatesInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutStatesInput, CountryUncheckedCreateWithoutStatesInput>
  }

  export type MerchantCreateWithoutStateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn: string
    acn: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutMerchantsInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactMerchantInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
    merchantUser?: MerchantUserCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutStateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    countryId: string
    abn: string
    acn: string
    logoUrl?: string | null
    primaryContactId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
    merchantUser?: MerchantUserUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutStateInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutStateInput, MerchantUncheckedCreateWithoutStateInput>
  }

  export type MerchantCreateManyStateInputEnvelope = {
    data: MerchantCreateManyStateInput | MerchantCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type BrandCreateWithoutStateInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserCreateNestedOneWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutStateInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserUncheckedCreateNestedOneWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutStateInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutStateInput, BrandUncheckedCreateWithoutStateInput>
  }

  export type BrandCreateManyStateInputEnvelope = {
    data: BrandCreateManyStateInput | BrandCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutStateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutStateInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput>
  }

  export type UserCreateManyStateInputEnvelope = {
    data: UserCreateManyStateInput | UserCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutStatesInput = {
    update: XOR<CountryUpdateWithoutStatesInput, CountryUncheckedUpdateWithoutStatesInput>
    create: XOR<CountryCreateWithoutStatesInput, CountryUncheckedCreateWithoutStatesInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutStatesInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutStatesInput, CountryUncheckedUpdateWithoutStatesInput>
  }

  export type CountryUpdateWithoutStatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Merchants?: MerchantUpdateManyWithoutCountryNestedInput
    store?: StoreUpdateManyWithoutCountryNestedInput
    brand?: BrandUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutStatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    store?: StoreUncheckedUpdateManyWithoutCountryNestedInput
    brand?: BrandUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type MerchantUpsertWithWhereUniqueWithoutStateInput = {
    where: MerchantWhereUniqueInput
    update: XOR<MerchantUpdateWithoutStateInput, MerchantUncheckedUpdateWithoutStateInput>
    create: XOR<MerchantCreateWithoutStateInput, MerchantUncheckedCreateWithoutStateInput>
  }

  export type MerchantUpdateWithWhereUniqueWithoutStateInput = {
    where: MerchantWhereUniqueInput
    data: XOR<MerchantUpdateWithoutStateInput, MerchantUncheckedUpdateWithoutStateInput>
  }

  export type MerchantUpdateManyWithWhereWithoutStateInput = {
    where: MerchantScalarWhereInput
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyWithoutStateInput>
  }

  export type BrandUpsertWithWhereUniqueWithoutStateInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutStateInput, BrandUncheckedUpdateWithoutStateInput>
    create: XOR<BrandCreateWithoutStateInput, BrandUncheckedCreateWithoutStateInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutStateInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutStateInput, BrandUncheckedUpdateWithoutStateInput>
  }

  export type BrandUpdateManyWithWhereWithoutStateInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutStateInput>
  }

  export type UserUpsertWithWhereUniqueWithoutStateInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStateInput, UserUncheckedUpdateWithoutStateInput>
    create: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStateInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStateInput, UserUncheckedUpdateWithoutStateInput>
  }

  export type UserUpdateManyWithWhereWithoutStateInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStateInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedTime?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordVerified?: BoolFilter<"User"> | boolean
    postcode?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    stateId?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleNullableListFilter<"User">
    totpKey?: BytesNullableFilter<"User"> | Uint8Array | null
    recoveryCodes?: StringNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    status?: EnumStatusFilter<"User"> | $Enums.Status
  }

  export type StateCreateWithoutMerchantsInput = {
    id?: string
    isoCode: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutStatesInput
    brands?: BrandCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutMerchantsInput = {
    id?: string
    isoCode: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    brands?: BrandUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutMerchantsInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutMerchantsInput, StateUncheckedCreateWithoutMerchantsInput>
  }

  export type CountryCreateWithoutMerchantsInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    states?: StateCreateNestedManyWithoutCountryInput
    store?: StoreCreateNestedManyWithoutCountryInput
    brand?: BrandCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutMerchantsInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    states?: StateUncheckedCreateNestedManyWithoutCountryInput
    store?: StoreUncheckedCreateNestedManyWithoutCountryInput
    brand?: BrandUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutMerchantsInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutMerchantsInput, CountryUncheckedCreateWithoutMerchantsInput>
  }

  export type UserCreateWithoutPrimaryContactMerchantInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactBrand?: BrandCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutPrimaryContactMerchantInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactBrand?: BrandUncheckedCreateNestedManyWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutPrimaryContactMerchantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrimaryContactMerchantInput, UserUncheckedCreateWithoutPrimaryContactMerchantInput>
  }

  export type BrandCreateWithoutMerchantInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserCreateNestedOneWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutMerchantInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    BrandUser?: BrandUserUncheckedCreateNestedOneWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutMerchantInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput>
  }

  export type BrandCreateManyMerchantInputEnvelope = {
    data: BrandCreateManyMerchantInput | BrandCreateManyMerchantInput[]
    skipDuplicates?: boolean
  }

  export type MerchantUserCreateWithoutMerchantInput = {
    id?: string
    jobTitle: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    brandUsers?: BrandUserCreateNestedManyWithoutMerchantUserInput
    user: UserCreateNestedOneWithoutMerchantUserInput
  }

  export type MerchantUserUncheckedCreateWithoutMerchantInput = {
    id?: string
    jobTitle: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    brandUsers?: BrandUserUncheckedCreateNestedManyWithoutMerchantUserInput
  }

  export type MerchantUserCreateOrConnectWithoutMerchantInput = {
    where: MerchantUserWhereUniqueInput
    create: XOR<MerchantUserCreateWithoutMerchantInput, MerchantUserUncheckedCreateWithoutMerchantInput>
  }

  export type MerchantUserCreateManyMerchantInputEnvelope = {
    data: MerchantUserCreateManyMerchantInput | MerchantUserCreateManyMerchantInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutMerchantsInput = {
    update: XOR<StateUpdateWithoutMerchantsInput, StateUncheckedUpdateWithoutMerchantsInput>
    create: XOR<StateCreateWithoutMerchantsInput, StateUncheckedCreateWithoutMerchantsInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutMerchantsInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutMerchantsInput, StateUncheckedUpdateWithoutMerchantsInput>
  }

  export type StateUpdateWithoutMerchantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutStatesNestedInput
    brands?: BrandUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutMerchantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brands?: BrandUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
  }

  export type CountryUpsertWithoutMerchantsInput = {
    update: XOR<CountryUpdateWithoutMerchantsInput, CountryUncheckedUpdateWithoutMerchantsInput>
    create: XOR<CountryCreateWithoutMerchantsInput, CountryUncheckedCreateWithoutMerchantsInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutMerchantsInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutMerchantsInput, CountryUncheckedUpdateWithoutMerchantsInput>
  }

  export type CountryUpdateWithoutMerchantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    states?: StateUpdateManyWithoutCountryNestedInput
    store?: StoreUpdateManyWithoutCountryNestedInput
    brand?: BrandUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutMerchantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    states?: StateUncheckedUpdateManyWithoutCountryNestedInput
    store?: StoreUncheckedUpdateManyWithoutCountryNestedInput
    brand?: BrandUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type UserUpsertWithoutPrimaryContactMerchantInput = {
    update: XOR<UserUpdateWithoutPrimaryContactMerchantInput, UserUncheckedUpdateWithoutPrimaryContactMerchantInput>
    create: XOR<UserCreateWithoutPrimaryContactMerchantInput, UserUncheckedCreateWithoutPrimaryContactMerchantInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPrimaryContactMerchantInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPrimaryContactMerchantInput, UserUncheckedUpdateWithoutPrimaryContactMerchantInput>
  }

  export type UserUpdateWithoutPrimaryContactMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutPrimaryContactMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type BrandUpsertWithWhereUniqueWithoutMerchantInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutMerchantInput, BrandUncheckedUpdateWithoutMerchantInput>
    create: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutMerchantInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutMerchantInput, BrandUncheckedUpdateWithoutMerchantInput>
  }

  export type BrandUpdateManyWithWhereWithoutMerchantInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutMerchantInput>
  }

  export type MerchantUserUpsertWithWhereUniqueWithoutMerchantInput = {
    where: MerchantUserWhereUniqueInput
    update: XOR<MerchantUserUpdateWithoutMerchantInput, MerchantUserUncheckedUpdateWithoutMerchantInput>
    create: XOR<MerchantUserCreateWithoutMerchantInput, MerchantUserUncheckedCreateWithoutMerchantInput>
  }

  export type MerchantUserUpdateWithWhereUniqueWithoutMerchantInput = {
    where: MerchantUserWhereUniqueInput
    data: XOR<MerchantUserUpdateWithoutMerchantInput, MerchantUserUncheckedUpdateWithoutMerchantInput>
  }

  export type MerchantUserUpdateManyWithWhereWithoutMerchantInput = {
    where: MerchantUserScalarWhereInput
    data: XOR<MerchantUserUpdateManyMutationInput, MerchantUserUncheckedUpdateManyWithoutMerchantInput>
  }

  export type MerchantUserScalarWhereInput = {
    AND?: MerchantUserScalarWhereInput | MerchantUserScalarWhereInput[]
    OR?: MerchantUserScalarWhereInput[]
    NOT?: MerchantUserScalarWhereInput | MerchantUserScalarWhereInput[]
    id?: StringFilter<"MerchantUser"> | string
    jobTitle?: StringFilter<"MerchantUser"> | string
    merchantId?: StringFilter<"MerchantUser"> | string
    merchantRole?: EnumMerchantRoleNullableListFilter<"MerchantUser">
    userId?: StringFilter<"MerchantUser"> | string
    createdAt?: DateTimeFilter<"MerchantUser"> | Date | string
    updatedAt?: DateTimeFilter<"MerchantUser"> | Date | string
  }

  export type MerchantCreateWithoutBrandsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn: string
    acn: string
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutMerchantsInput
    country: CountryCreateNestedOneWithoutMerchantsInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactMerchantInput
    merchantUser?: MerchantUserCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutBrandsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn: string
    acn: string
    logoUrl?: string | null
    primaryContactId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchantUser?: MerchantUserUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutBrandsInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutBrandsInput, MerchantUncheckedCreateWithoutBrandsInput>
  }

  export type StateCreateWithoutBrandsInput = {
    id?: string
    isoCode: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutStatesInput
    merchants?: MerchantCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutBrandsInput = {
    id?: string
    isoCode: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutBrandsInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutBrandsInput, StateUncheckedCreateWithoutBrandsInput>
  }

  export type CountryCreateWithoutBrandInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    states?: StateCreateNestedManyWithoutCountryInput
    Merchants?: MerchantCreateNestedManyWithoutCountryInput
    store?: StoreCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutBrandInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    states?: StateUncheckedCreateNestedManyWithoutCountryInput
    Merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    store?: StoreUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutBrandInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutBrandInput, CountryUncheckedCreateWithoutBrandInput>
  }

  export type UserCreateWithoutPrimaryContactBrandInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    state?: StateCreateNestedOneWithoutUsersInput
    consumerUser?: ConsumerCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserCreateNestedOneWithoutUserInput
    adminUser?: AdminUserCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantCreateNestedOneWithoutPrimaryContactInput
  }

  export type UserUncheckedCreateWithoutPrimaryContactBrandInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    stateId?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
    consumerUser?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    merchantUser?: MerchantUserUncheckedCreateNestedOneWithoutUserInput
    adminUser?: AdminUserUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput
    passwordResetSession?: PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput
    primaryContactMerchant?: MerchantUncheckedCreateNestedOneWithoutPrimaryContactInput
  }

  export type UserCreateOrConnectWithoutPrimaryContactBrandInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrimaryContactBrandInput, UserUncheckedCreateWithoutPrimaryContactBrandInput>
  }

  export type StoreCreateWithoutBrandInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutStoreInput
    currency: CurrencyCreateNestedOneWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutBrandInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    countryId: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutBrandInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput>
  }

  export type StoreCreateManyBrandInputEnvelope = {
    data: StoreCreateManyBrandInput | StoreCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type BrandUserCreateWithoutBrandInput = {
    id?: string
    brandRole?: BrandUserCreatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    MerchantUser?: MerchantUserCreateNestedOneWithoutBrandUsersInput
  }

  export type BrandUserUncheckedCreateWithoutBrandInput = {
    id?: string
    merchantUserId?: string | null
    brandRole?: BrandUserCreatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUserCreateOrConnectWithoutBrandInput = {
    where: BrandUserWhereUniqueInput
    create: XOR<BrandUserCreateWithoutBrandInput, BrandUserUncheckedCreateWithoutBrandInput>
  }

  export type MerchantUpsertWithoutBrandsInput = {
    update: XOR<MerchantUpdateWithoutBrandsInput, MerchantUncheckedUpdateWithoutBrandsInput>
    create: XOR<MerchantCreateWithoutBrandsInput, MerchantUncheckedCreateWithoutBrandsInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutBrandsInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutBrandsInput, MerchantUncheckedUpdateWithoutBrandsInput>
  }

  export type MerchantUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutMerchantsNestedInput
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactMerchantNestedInput
    merchantUser?: MerchantUserUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchantUser?: MerchantUserUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type StateUpsertWithoutBrandsInput = {
    update: XOR<StateUpdateWithoutBrandsInput, StateUncheckedUpdateWithoutBrandsInput>
    create: XOR<StateCreateWithoutBrandsInput, StateUncheckedCreateWithoutBrandsInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutBrandsInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutBrandsInput, StateUncheckedUpdateWithoutBrandsInput>
  }

  export type StateUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutStatesNestedInput
    merchants?: MerchantUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
  }

  export type CountryUpsertWithoutBrandInput = {
    update: XOR<CountryUpdateWithoutBrandInput, CountryUncheckedUpdateWithoutBrandInput>
    create: XOR<CountryCreateWithoutBrandInput, CountryUncheckedCreateWithoutBrandInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutBrandInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutBrandInput, CountryUncheckedUpdateWithoutBrandInput>
  }

  export type CountryUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    states?: StateUpdateManyWithoutCountryNestedInput
    Merchants?: MerchantUpdateManyWithoutCountryNestedInput
    store?: StoreUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    states?: StateUncheckedUpdateManyWithoutCountryNestedInput
    Merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    store?: StoreUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type UserUpsertWithoutPrimaryContactBrandInput = {
    update: XOR<UserUpdateWithoutPrimaryContactBrandInput, UserUncheckedUpdateWithoutPrimaryContactBrandInput>
    create: XOR<UserCreateWithoutPrimaryContactBrandInput, UserUncheckedCreateWithoutPrimaryContactBrandInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPrimaryContactBrandInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPrimaryContactBrandInput, UserUncheckedUpdateWithoutPrimaryContactBrandInput>
  }

  export type UserUpdateWithoutPrimaryContactBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    state?: StateUpdateOneWithoutUsersNestedInput
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutPrimaryContactBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
  }

  export type StoreUpsertWithWhereUniqueWithoutBrandInput = {
    where: StoreWhereUniqueInput
    update: XOR<StoreUpdateWithoutBrandInput, StoreUncheckedUpdateWithoutBrandInput>
    create: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput>
  }

  export type StoreUpdateWithWhereUniqueWithoutBrandInput = {
    where: StoreWhereUniqueInput
    data: XOR<StoreUpdateWithoutBrandInput, StoreUncheckedUpdateWithoutBrandInput>
  }

  export type StoreUpdateManyWithWhereWithoutBrandInput = {
    where: StoreScalarWhereInput
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyWithoutBrandInput>
  }

  export type BrandUserUpsertWithoutBrandInput = {
    update: XOR<BrandUserUpdateWithoutBrandInput, BrandUserUncheckedUpdateWithoutBrandInput>
    create: XOR<BrandUserCreateWithoutBrandInput, BrandUserUncheckedCreateWithoutBrandInput>
    where?: BrandUserWhereInput
  }

  export type BrandUserUpdateToOneWithWhereWithoutBrandInput = {
    where?: BrandUserWhereInput
    data: XOR<BrandUserUpdateWithoutBrandInput, BrandUserUncheckedUpdateWithoutBrandInput>
  }

  export type BrandUserUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MerchantUser?: MerchantUserUpdateOneWithoutBrandUsersNestedInput
  }

  export type BrandUserUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    merchantUserId?: NullableStringFieldUpdateOperationsInput | string | null
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandCreateWithoutStoresInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    state: StateCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandInput
    primaryContact?: UserCreateNestedOneWithoutPrimaryContactBrandInput
    BrandUser?: BrandUserCreateNestedOneWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutStoresInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
    BrandUser?: BrandUserUncheckedCreateNestedOneWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutStoresInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutStoresInput, BrandUncheckedCreateWithoutStoresInput>
  }

  export type CountryCreateWithoutStoreInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    states?: StateCreateNestedManyWithoutCountryInput
    Merchants?: MerchantCreateNestedManyWithoutCountryInput
    brand?: BrandCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutStoreInput = {
    id?: string
    isoCode: string
    name: string
    currency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    states?: StateUncheckedCreateNestedManyWithoutCountryInput
    Merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    brand?: BrandUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutStoreInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutStoreInput, CountryUncheckedCreateWithoutStoreInput>
  }

  export type CurrencyCreateWithoutStoreInput = {
    id?: string
    name: string
    code: string
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbol?: string | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    decimals?: number | null
    numToBasic?: number | null
  }

  export type CurrencyUncheckedCreateWithoutStoreInput = {
    id?: string
    name: string
    code: string
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbol?: string | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    decimals?: number | null
    numToBasic?: number | null
  }

  export type CurrencyCreateOrConnectWithoutStoreInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutStoreInput, CurrencyUncheckedCreateWithoutStoreInput>
  }

  export type ReceiptCreateWithoutStoreInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutStoreInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutStoreInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput>
  }

  export type ReceiptCreateManyStoreInputEnvelope = {
    data: ReceiptCreateManyStoreInput | ReceiptCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type BrandUpsertWithoutStoresInput = {
    update: XOR<BrandUpdateWithoutStoresInput, BrandUncheckedUpdateWithoutStoresInput>
    create: XOR<BrandCreateWithoutStoresInput, BrandUncheckedCreateWithoutStoresInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutStoresInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutStoresInput, BrandUncheckedUpdateWithoutStoresInput>
  }

  export type BrandUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    state?: StateUpdateOneRequiredWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactBrandNestedInput
    BrandUser?: BrandUserUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    BrandUser?: BrandUserUncheckedUpdateOneWithoutBrandNestedInput
  }

  export type CountryUpsertWithoutStoreInput = {
    update: XOR<CountryUpdateWithoutStoreInput, CountryUncheckedUpdateWithoutStoreInput>
    create: XOR<CountryCreateWithoutStoreInput, CountryUncheckedCreateWithoutStoreInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutStoreInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutStoreInput, CountryUncheckedUpdateWithoutStoreInput>
  }

  export type CountryUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    states?: StateUpdateManyWithoutCountryNestedInput
    Merchants?: MerchantUpdateManyWithoutCountryNestedInput
    brand?: BrandUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    states?: StateUncheckedUpdateManyWithoutCountryNestedInput
    Merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    brand?: BrandUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CurrencyUpsertWithoutStoreInput = {
    update: XOR<CurrencyUpdateWithoutStoreInput, CurrencyUncheckedUpdateWithoutStoreInput>
    create: XOR<CurrencyCreateWithoutStoreInput, CurrencyUncheckedCreateWithoutStoreInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutStoreInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutStoreInput, CurrencyUncheckedUpdateWithoutStoreInput>
  }

  export type CurrencyUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CurrencyUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReceiptUpsertWithWhereUniqueWithoutStoreInput = {
    where: ReceiptWhereUniqueInput
    update: XOR<ReceiptUpdateWithoutStoreInput, ReceiptUncheckedUpdateWithoutStoreInput>
    create: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput>
  }

  export type ReceiptUpdateWithWhereUniqueWithoutStoreInput = {
    where: ReceiptWhereUniqueInput
    data: XOR<ReceiptUpdateWithoutStoreInput, ReceiptUncheckedUpdateWithoutStoreInput>
  }

  export type ReceiptUpdateManyWithWhereWithoutStoreInput = {
    where: ReceiptScalarWhereInput
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyWithoutStoreInput>
  }

  export type ConsumerCreateWithoutReceiptsInput = {
    id?: string
    barcode: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConsumerUserInput
  }

  export type ConsumerUncheckedCreateWithoutReceiptsInput = {
    id?: string
    barcode: string
    userId: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumerCreateOrConnectWithoutReceiptsInput = {
    where: ConsumerWhereUniqueInput
    create: XOR<ConsumerCreateWithoutReceiptsInput, ConsumerUncheckedCreateWithoutReceiptsInput>
  }

  export type StoreCreateWithoutReceiptsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoreInput
    currency: CurrencyCreateNestedOneWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutReceiptsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    countryId: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreCreateOrConnectWithoutReceiptsInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutReceiptsInput, StoreUncheckedCreateWithoutReceiptsInput>
  }

  export type ReceiptItemCreateWithoutReceiptInput = {
    id?: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    quantity: number
    itemCost: number
    itemTax: number
    subTotal: number
    tax: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemUncheckedCreateWithoutReceiptInput = {
    id?: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    quantity: number
    itemCost: number
    itemTax: number
    subTotal: number
    tax: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemCreateOrConnectWithoutReceiptInput = {
    where: ReceiptItemWhereUniqueInput
    create: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptItemCreateManyReceiptInputEnvelope = {
    data: ReceiptItemCreateManyReceiptInput | ReceiptItemCreateManyReceiptInput[]
    skipDuplicates?: boolean
  }

  export type ReceiptPaymentCreateWithoutReceiptInput = {
    id?: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentUncheckedCreateWithoutReceiptInput = {
    id?: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentCreateOrConnectWithoutReceiptInput = {
    where: ReceiptPaymentWhereUniqueInput
    create: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptPaymentCreateManyReceiptInputEnvelope = {
    data: ReceiptPaymentCreateManyReceiptInput | ReceiptPaymentCreateManyReceiptInput[]
    skipDuplicates?: boolean
  }

  export type ConsumerUpsertWithoutReceiptsInput = {
    update: XOR<ConsumerUpdateWithoutReceiptsInput, ConsumerUncheckedUpdateWithoutReceiptsInput>
    create: XOR<ConsumerCreateWithoutReceiptsInput, ConsumerUncheckedCreateWithoutReceiptsInput>
    where?: ConsumerWhereInput
  }

  export type ConsumerUpdateToOneWithWhereWithoutReceiptsInput = {
    where?: ConsumerWhereInput
    data: XOR<ConsumerUpdateWithoutReceiptsInput, ConsumerUncheckedUpdateWithoutReceiptsInput>
  }

  export type ConsumerUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConsumerUserNestedInput
  }

  export type ConsumerUncheckedUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUpsertWithoutReceiptsInput = {
    update: XOR<StoreUpdateWithoutReceiptsInput, StoreUncheckedUpdateWithoutReceiptsInput>
    create: XOR<StoreCreateWithoutReceiptsInput, StoreUncheckedCreateWithoutReceiptsInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutReceiptsInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutReceiptsInput, StoreUncheckedUpdateWithoutReceiptsInput>
  }

  export type StoreUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoreNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptItemWhereUniqueInput
    update: XOR<ReceiptItemUpdateWithoutReceiptInput, ReceiptItemUncheckedUpdateWithoutReceiptInput>
    create: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptItemWhereUniqueInput
    data: XOR<ReceiptItemUpdateWithoutReceiptInput, ReceiptItemUncheckedUpdateWithoutReceiptInput>
  }

  export type ReceiptItemUpdateManyWithWhereWithoutReceiptInput = {
    where: ReceiptItemScalarWhereInput
    data: XOR<ReceiptItemUpdateManyMutationInput, ReceiptItemUncheckedUpdateManyWithoutReceiptInput>
  }

  export type ReceiptItemScalarWhereInput = {
    AND?: ReceiptItemScalarWhereInput | ReceiptItemScalarWhereInput[]
    OR?: ReceiptItemScalarWhereInput[]
    NOT?: ReceiptItemScalarWhereInput | ReceiptItemScalarWhereInput[]
    id?: StringFilter<"ReceiptItem"> | string
    receiptId?: StringFilter<"ReceiptItem"> | string
    name?: StringFilter<"ReceiptItem"> | string
    sku?: StringNullableFilter<"ReceiptItem"> | string | null
    description?: StringNullableFilter<"ReceiptItem"> | string | null
    modelNumber?: StringNullableFilter<"ReceiptItem"> | string | null
    quantity?: IntFilter<"ReceiptItem"> | number
    itemCost?: FloatFilter<"ReceiptItem"> | number
    itemTax?: FloatFilter<"ReceiptItem"> | number
    subTotal?: FloatFilter<"ReceiptItem"> | number
    tax?: FloatFilter<"ReceiptItem"> | number
    createdAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptItem"> | Date | string
  }

  export type ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptPaymentWhereUniqueInput
    update: XOR<ReceiptPaymentUpdateWithoutReceiptInput, ReceiptPaymentUncheckedUpdateWithoutReceiptInput>
    create: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptPaymentWhereUniqueInput
    data: XOR<ReceiptPaymentUpdateWithoutReceiptInput, ReceiptPaymentUncheckedUpdateWithoutReceiptInput>
  }

  export type ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput = {
    where: ReceiptPaymentScalarWhereInput
    data: XOR<ReceiptPaymentUpdateManyMutationInput, ReceiptPaymentUncheckedUpdateManyWithoutReceiptInput>
  }

  export type ReceiptPaymentScalarWhereInput = {
    AND?: ReceiptPaymentScalarWhereInput | ReceiptPaymentScalarWhereInput[]
    OR?: ReceiptPaymentScalarWhereInput[]
    NOT?: ReceiptPaymentScalarWhereInput | ReceiptPaymentScalarWhereInput[]
    id?: StringFilter<"ReceiptPayment"> | string
    receiptId?: StringFilter<"ReceiptPayment"> | string
    paymentType?: EnumPaymentTypeFilter<"ReceiptPayment"> | $Enums.PaymentType
    amount?: FloatFilter<"ReceiptPayment"> | number
    terminal?: StringNullableFilter<"ReceiptPayment"> | string | null
    reference?: StringNullableFilter<"ReceiptPayment"> | string | null
    cardNo?: StringNullableFilter<"ReceiptPayment"> | string | null
    createdAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
  }

  export type ReceiptCreateWithoutReceiptPaymentsInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutReceiptPaymentsInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutReceiptPaymentsInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutReceiptPaymentsInput, ReceiptUncheckedCreateWithoutReceiptPaymentsInput>
  }

  export type ReceiptUpsertWithoutReceiptPaymentsInput = {
    update: XOR<ReceiptUpdateWithoutReceiptPaymentsInput, ReceiptUncheckedUpdateWithoutReceiptPaymentsInput>
    create: XOR<ReceiptCreateWithoutReceiptPaymentsInput, ReceiptUncheckedCreateWithoutReceiptPaymentsInput>
    where?: ReceiptWhereInput
  }

  export type ReceiptUpdateToOneWithWhereWithoutReceiptPaymentsInput = {
    where?: ReceiptWhereInput
    data: XOR<ReceiptUpdateWithoutReceiptPaymentsInput, ReceiptUncheckedUpdateWithoutReceiptPaymentsInput>
  }

  export type ReceiptUpdateWithoutReceiptPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutReceiptPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptCreateWithoutReceiptItemsInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutReceiptItemsInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutReceiptItemsInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutReceiptItemsInput, ReceiptUncheckedCreateWithoutReceiptItemsInput>
  }

  export type ReceiptUpsertWithoutReceiptItemsInput = {
    update: XOR<ReceiptUpdateWithoutReceiptItemsInput, ReceiptUncheckedUpdateWithoutReceiptItemsInput>
    create: XOR<ReceiptCreateWithoutReceiptItemsInput, ReceiptUncheckedCreateWithoutReceiptItemsInput>
    where?: ReceiptWhereInput
  }

  export type ReceiptUpdateToOneWithWhereWithoutReceiptItemsInput = {
    where?: ReceiptWhereInput
    data: XOR<ReceiptUpdateWithoutReceiptItemsInput, ReceiptUncheckedUpdateWithoutReceiptItemsInput>
  }

  export type ReceiptUpdateWithoutReceiptItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutReceiptItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: string
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    twoFactorVerified?: boolean
    rememberMe: boolean
  }

  export type EmailVerificationRequestCreateManyUserInput = {
    id: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetSessionCreateManyUserInput = {
    id: string
    email: string
    expiresAt: number
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateManyPrimaryContactInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    rememberMe?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    rememberMe?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    rememberMe?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailVerificationRequestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationRequestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationRequestUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    expiresAt?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUpdateWithoutPrimaryContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    state?: StateUpdateOneRequiredWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutPrimaryContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUncheckedUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutPrimaryContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptCreateManyConsumerInput = {
    id?: string
    receiptNumber: string
    storeId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptUpdateWithoutConsumerInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutConsumerInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateManyWithoutConsumerInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUserCreateManyMerchantUserInput = {
    id?: string
    brandId: string
    brandRole?: BrandUserCreatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUserUpdateWithoutMerchantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutBrandUserNestedInput
  }

  export type BrandUserUncheckedUpdateWithoutMerchantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUserUncheckedUpdateManyWithoutMerchantUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    brandRole?: BrandUserUpdatebrandRoleInput | $Enums.BrandRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreCreateManyCurrencyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    countryId: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateManyWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateCreateManyCountryInput = {
    id?: string
    isoCode: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MerchantCreateManyCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    abn: string
    acn: string
    logoUrl?: string | null
    primaryContactId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreCreateManyCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateManyCountryInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
  }

  export type StateUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUpdateManyWithoutStateNestedInput
    brands?: BrandUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutStateNestedInput
    brands?: BrandUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutMerchantsNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactMerchantNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
    merchantUser?: MerchantUserUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
    merchantUser?: MerchantUserUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    state?: StateUpdateOneRequiredWithoutBrandsNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUncheckedUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MerchantCreateManyStateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    countryId: string
    abn: string
    acn: string
    logoUrl?: string | null
    primaryContactId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateManyStateInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
  }

  export type UserCreateManyStateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    emailVerified?: boolean
    emailVerifiedTime?: Date | string | null
    passwordVerified?: boolean
    postcode?: string | null
    city?: string | null
    phoneNumber?: string | null
    password: string
    image?: string | null
    role?: UserCreateroleInput | $Enums.Role[]
    totpKey?: Uint8Array | null
    recoveryCodes?: UserCreaterecoveryCodesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.Status
  }

  export type MerchantUpdateWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactMerchantNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
    merchantUser?: MerchantUserUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
    merchantUser?: MerchantUserUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateManyWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: StringFieldUpdateOperationsInput | string
    acn?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUpdateWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUncheckedUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    consumerUser?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    merchantUser?: MerchantUserUncheckedUpdateOneWithoutUserNestedInput
    adminUser?: AdminUserUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationRequest?: EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordResetSession?: PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput
    primaryContactMerchant?: MerchantUncheckedUpdateOneWithoutPrimaryContactNestedInput
    primaryContactBrand?: BrandUncheckedUpdateManyWithoutPrimaryContactNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordVerified?: BoolFieldUpdateOperationsInput | boolean
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: UserUpdateroleInput | $Enums.Role[]
    totpKey?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    recoveryCodes?: UserUpdaterecoveryCodesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type BrandCreateManyMerchantInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName: string
    logoUrl: string
    address1: string
    address2?: string | null
    suburb: string
    postcode: string
    stateId: string
    countryId: string
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primaryContactId?: string | null
  }

  export type MerchantUserCreateManyMerchantInput = {
    id?: string
    jobTitle: string
    merchantRole?: MerchantUserCreatemerchantRoleInput | $Enums.MerchantRole[]
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandNestedInput
    primaryContact?: UserUpdateOneWithoutPrimaryContactBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    BrandUser?: BrandUserUncheckedUpdateOneWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    suburb?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primaryContactId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MerchantUserUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandUsers?: BrandUserUpdateManyWithoutMerchantUserNestedInput
    user?: UserUpdateOneRequiredWithoutMerchantUserNestedInput
  }

  export type MerchantUserUncheckedUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brandUsers?: BrandUserUncheckedUpdateManyWithoutMerchantUserNestedInput
  }

  export type MerchantUserUncheckedUpdateManyWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    merchantRole?: MerchantUserUpdatemerchantRoleInput | $Enums.MerchantRole[]
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreCreateManyBrandInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    address1: string
    address2?: string | null
    city: string
    region: string
    postalCode: string
    countryId: string
    formattedAddress: string
    latitude: number
    longitude: number
    abn?: string | null
    acn?: string | null
    phoneNumber: string
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutStoreNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    abn?: NullableStringFieldUpdateOperationsInput | string | null
    acn?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptCreateManyStoreInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    subTotal: number
    tax: number
    cardSurcharge: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemCreateManyReceiptInput = {
    id?: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    quantity: number
    itemCost: number
    itemTax: number
    subTotal: number
    tax: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentCreateManyReceiptInput = {
    id?: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    itemTax?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemUncheckedUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    itemTax?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemUncheckedUpdateManyWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    itemTax?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    tax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentUncheckedUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentUncheckedUpdateManyWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}