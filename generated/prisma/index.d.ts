
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model EmailChangeRecord
 * 
 */
export type EmailChangeRecord = $Result.DefaultSelection<Prisma.$EmailChangeRecordPayload>
/**
 * Model PhoneChangeRecord
 * 
 */
export type PhoneChangeRecord = $Result.DefaultSelection<Prisma.$PhoneChangeRecordPayload>
/**
 * Model RateLimit
 * 
 */
export type RateLimit = $Result.DefaultSelection<Prisma.$RateLimitPayload>
/**
 * Model Consumer
 * 
 */
export type Consumer = $Result.DefaultSelection<Prisma.$ConsumerPayload>
/**
 * Model BusinessUserAccess
 * 
 */
export type BusinessUserAccess = $Result.DefaultSelection<Prisma.$BusinessUserAccessPayload>
/**
 * Model Currency
 * 
 */
export type Currency = $Result.DefaultSelection<Prisma.$CurrencyPayload>
/**
 * Model Continent
 * 
 */
export type Continent = $Result.DefaultSelection<Prisma.$ContinentPayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model BusinessRegistration
 * 
 */
export type BusinessRegistration = $Result.DefaultSelection<Prisma.$BusinessRegistrationPayload>
/**
 * Model Merchant
 * 
 */
export type Merchant = $Result.DefaultSelection<Prisma.$MerchantPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Store
 * 
 */
export type Store = $Result.DefaultSelection<Prisma.$StorePayload>
/**
 * Model Receipt
 * 
 */
export type Receipt = $Result.DefaultSelection<Prisma.$ReceiptPayload>
/**
 * Model ReceiptTax
 * 
 */
export type ReceiptTax = $Result.DefaultSelection<Prisma.$ReceiptTaxPayload>
/**
 * Model ReceiptPayment
 * 
 */
export type ReceiptPayment = $Result.DefaultSelection<Prisma.$ReceiptPaymentPayload>
/**
 * Model ReceiptItem
 * 
 */
export type ReceiptItem = $Result.DefaultSelection<Prisma.$ReceiptItemPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  DISABLED: 'DISABLED',
  REJECTED: 'REJECTED'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  NOTSAY: 'NOTSAY'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const PaymentType: {
  CASH: 'CASH',
  CARD_CHIP: 'CARD_CHIP',
  CARD_CONTACTLESS: 'CARD_CONTACTLESS',
  CARD_SWIPE: 'CARD_SWIPE',
  MOBILE_PAYMENT: 'MOBILE_PAYMENT',
  BANK_TRANSFER: 'BANK_TRANSFER',
  DIGITAL_WALLET: 'DIGITAL_WALLET',
  VOUCHER: 'VOUCHER',
  GIFT_CARD: 'GIFT_CARD',
  OTHER: 'OTHER'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const ImageType: {
  MERCHANT: 'MERCHANT',
  BRAND: 'BRAND',
  STORE: 'STORE'
};

export type ImageType = (typeof ImageType)[keyof typeof ImageType]


export const BusinessRegistrationType: {
  COMPANY_NUMBER: 'COMPANY_NUMBER',
  TAX_ID: 'TAX_ID',
  VAT_NUMBER: 'VAT_NUMBER',
  BUSINESS_NUMBER: 'BUSINESS_NUMBER',
  ABN: 'ABN',
  ACN: 'ACN',
  GST_NUMBER: 'GST_NUMBER',
  TRADE_LICENSE: 'TRADE_LICENSE',
  NATIONAL_ID: 'NATIONAL_ID',
  OTHER: 'OTHER'
};

export type BusinessRegistrationType = (typeof BusinessRegistrationType)[keyof typeof BusinessRegistrationType]


export const TaxType: {
  VAT: 'VAT',
  GST: 'GST',
  SALES_TAX: 'SALES_TAX',
  SERVICE_TAX: 'SERVICE_TAX',
  EXCISE_TAX: 'EXCISE_TAX',
  IMPORT_DUTY: 'IMPORT_DUTY',
  OTHER: 'OTHER'
};

export type TaxType = (typeof TaxType)[keyof typeof TaxType]


export const AccessLevel: {
  ADMIN: 'ADMIN',
  MERCHANT: 'MERCHANT',
  BRAND: 'BRAND',
  STORE: 'STORE'
};

export type AccessLevel = (typeof AccessLevel)[keyof typeof AccessLevel]


export const Permission: {
  READ: 'READ',
  WRITE: 'WRITE',
  DELETE: 'DELETE',
  MANAGE_USERS: 'MANAGE_USERS',
  MANAGE_SETTINGS: 'MANAGE_SETTINGS',
  VIEW_REPORTS: 'VIEW_REPORTS',
  MANAGE_RECEIPTS: 'MANAGE_RECEIPTS'
};

export type Permission = (typeof Permission)[keyof typeof Permission]


export const UserRole: {
  USER: 'USER',
  MERCHANT: 'MERCHANT',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type ImageType = $Enums.ImageType

export const ImageType: typeof $Enums.ImageType

export type BusinessRegistrationType = $Enums.BusinessRegistrationType

export const BusinessRegistrationType: typeof $Enums.BusinessRegistrationType

export type TaxType = $Enums.TaxType

export const TaxType: typeof $Enums.TaxType

export type AccessLevel = $Enums.AccessLevel

export const AccessLevel: typeof $Enums.AccessLevel

export type Permission = $Enums.Permission

export const Permission: typeof $Enums.Permission

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailChangeRecord`: Exposes CRUD operations for the **EmailChangeRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailChangeRecords
    * const emailChangeRecords = await prisma.emailChangeRecord.findMany()
    * ```
    */
  get emailChangeRecord(): Prisma.EmailChangeRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.phoneChangeRecord`: Exposes CRUD operations for the **PhoneChangeRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PhoneChangeRecords
    * const phoneChangeRecords = await prisma.phoneChangeRecord.findMany()
    * ```
    */
  get phoneChangeRecord(): Prisma.PhoneChangeRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rateLimit`: Exposes CRUD operations for the **RateLimit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RateLimits
    * const rateLimits = await prisma.rateLimit.findMany()
    * ```
    */
  get rateLimit(): Prisma.RateLimitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consumer`: Exposes CRUD operations for the **Consumer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consumers
    * const consumers = await prisma.consumer.findMany()
    * ```
    */
  get consumer(): Prisma.ConsumerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.businessUserAccess`: Exposes CRUD operations for the **BusinessUserAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusinessUserAccesses
    * const businessUserAccesses = await prisma.businessUserAccess.findMany()
    * ```
    */
  get businessUserAccess(): Prisma.BusinessUserAccessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.currency`: Exposes CRUD operations for the **Currency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Currencies
    * const currencies = await prisma.currency.findMany()
    * ```
    */
  get currency(): Prisma.CurrencyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.continent`: Exposes CRUD operations for the **Continent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Continents
    * const continents = await prisma.continent.findMany()
    * ```
    */
  get continent(): Prisma.ContinentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.businessRegistration`: Exposes CRUD operations for the **BusinessRegistration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusinessRegistrations
    * const businessRegistrations = await prisma.businessRegistration.findMany()
    * ```
    */
  get businessRegistration(): Prisma.BusinessRegistrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.merchant`: Exposes CRUD operations for the **Merchant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Merchants
    * const merchants = await prisma.merchant.findMany()
    * ```
    */
  get merchant(): Prisma.MerchantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.store`: Exposes CRUD operations for the **Store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): Prisma.StoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receipt`: Exposes CRUD operations for the **Receipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receipts
    * const receipts = await prisma.receipt.findMany()
    * ```
    */
  get receipt(): Prisma.ReceiptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receiptTax`: Exposes CRUD operations for the **ReceiptTax** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptTaxes
    * const receiptTaxes = await prisma.receiptTax.findMany()
    * ```
    */
  get receiptTax(): Prisma.ReceiptTaxDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receiptPayment`: Exposes CRUD operations for the **ReceiptPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptPayments
    * const receiptPayments = await prisma.receiptPayment.findMany()
    * ```
    */
  get receiptPayment(): Prisma.ReceiptPaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receiptItem`: Exposes CRUD operations for the **ReceiptItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptItems
    * const receiptItems = await prisma.receiptItem.findMany()
    * ```
    */
  get receiptItem(): Prisma.ReceiptItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    EmailChangeRecord: 'EmailChangeRecord',
    PhoneChangeRecord: 'PhoneChangeRecord',
    RateLimit: 'RateLimit',
    Consumer: 'Consumer',
    BusinessUserAccess: 'BusinessUserAccess',
    Currency: 'Currency',
    Continent: 'Continent',
    Country: 'Country',
    Region: 'Region',
    BusinessRegistration: 'BusinessRegistration',
    Merchant: 'Merchant',
    Brand: 'Brand',
    Store: 'Store',
    Receipt: 'Receipt',
    ReceiptTax: 'ReceiptTax',
    ReceiptPayment: 'ReceiptPayment',
    ReceiptItem: 'ReceiptItem',
    AuditLog: 'AuditLog',
    Image: 'Image'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "account" | "verification" | "emailChangeRecord" | "phoneChangeRecord" | "rateLimit" | "consumer" | "businessUserAccess" | "currency" | "continent" | "country" | "region" | "businessRegistration" | "merchant" | "brand" | "store" | "receipt" | "receiptTax" | "receiptPayment" | "receiptItem" | "auditLog" | "image"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      EmailChangeRecord: {
        payload: Prisma.$EmailChangeRecordPayload<ExtArgs>
        fields: Prisma.EmailChangeRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailChangeRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailChangeRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>
          }
          findFirst: {
            args: Prisma.EmailChangeRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailChangeRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>
          }
          findMany: {
            args: Prisma.EmailChangeRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>[]
          }
          create: {
            args: Prisma.EmailChangeRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>
          }
          createMany: {
            args: Prisma.EmailChangeRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailChangeRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>[]
          }
          delete: {
            args: Prisma.EmailChangeRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>
          }
          update: {
            args: Prisma.EmailChangeRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>
          }
          deleteMany: {
            args: Prisma.EmailChangeRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailChangeRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailChangeRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>[]
          }
          upsert: {
            args: Prisma.EmailChangeRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailChangeRecordPayload>
          }
          aggregate: {
            args: Prisma.EmailChangeRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailChangeRecord>
          }
          groupBy: {
            args: Prisma.EmailChangeRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailChangeRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailChangeRecordCountArgs<ExtArgs>
            result: $Utils.Optional<EmailChangeRecordCountAggregateOutputType> | number
          }
        }
      }
      PhoneChangeRecord: {
        payload: Prisma.$PhoneChangeRecordPayload<ExtArgs>
        fields: Prisma.PhoneChangeRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhoneChangeRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhoneChangeRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>
          }
          findFirst: {
            args: Prisma.PhoneChangeRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhoneChangeRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>
          }
          findMany: {
            args: Prisma.PhoneChangeRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>[]
          }
          create: {
            args: Prisma.PhoneChangeRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>
          }
          createMany: {
            args: Prisma.PhoneChangeRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhoneChangeRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>[]
          }
          delete: {
            args: Prisma.PhoneChangeRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>
          }
          update: {
            args: Prisma.PhoneChangeRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>
          }
          deleteMany: {
            args: Prisma.PhoneChangeRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhoneChangeRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PhoneChangeRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>[]
          }
          upsert: {
            args: Prisma.PhoneChangeRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhoneChangeRecordPayload>
          }
          aggregate: {
            args: Prisma.PhoneChangeRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhoneChangeRecord>
          }
          groupBy: {
            args: Prisma.PhoneChangeRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhoneChangeRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhoneChangeRecordCountArgs<ExtArgs>
            result: $Utils.Optional<PhoneChangeRecordCountAggregateOutputType> | number
          }
        }
      }
      RateLimit: {
        payload: Prisma.$RateLimitPayload<ExtArgs>
        fields: Prisma.RateLimitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RateLimitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RateLimitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          findFirst: {
            args: Prisma.RateLimitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RateLimitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          findMany: {
            args: Prisma.RateLimitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>[]
          }
          create: {
            args: Prisma.RateLimitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          createMany: {
            args: Prisma.RateLimitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RateLimitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>[]
          }
          delete: {
            args: Prisma.RateLimitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          update: {
            args: Prisma.RateLimitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          deleteMany: {
            args: Prisma.RateLimitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RateLimitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RateLimitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>[]
          }
          upsert: {
            args: Prisma.RateLimitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          aggregate: {
            args: Prisma.RateLimitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRateLimit>
          }
          groupBy: {
            args: Prisma.RateLimitGroupByArgs<ExtArgs>
            result: $Utils.Optional<RateLimitGroupByOutputType>[]
          }
          count: {
            args: Prisma.RateLimitCountArgs<ExtArgs>
            result: $Utils.Optional<RateLimitCountAggregateOutputType> | number
          }
        }
      }
      Consumer: {
        payload: Prisma.$ConsumerPayload<ExtArgs>
        fields: Prisma.ConsumerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsumerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsumerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          findFirst: {
            args: Prisma.ConsumerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsumerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          findMany: {
            args: Prisma.ConsumerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>[]
          }
          create: {
            args: Prisma.ConsumerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          createMany: {
            args: Prisma.ConsumerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsumerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>[]
          }
          delete: {
            args: Prisma.ConsumerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          update: {
            args: Prisma.ConsumerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          deleteMany: {
            args: Prisma.ConsumerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsumerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsumerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>[]
          }
          upsert: {
            args: Prisma.ConsumerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsumerPayload>
          }
          aggregate: {
            args: Prisma.ConsumerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsumer>
          }
          groupBy: {
            args: Prisma.ConsumerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsumerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsumerCountArgs<ExtArgs>
            result: $Utils.Optional<ConsumerCountAggregateOutputType> | number
          }
        }
      }
      BusinessUserAccess: {
        payload: Prisma.$BusinessUserAccessPayload<ExtArgs>
        fields: Prisma.BusinessUserAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessUserAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessUserAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>
          }
          findFirst: {
            args: Prisma.BusinessUserAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessUserAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>
          }
          findMany: {
            args: Prisma.BusinessUserAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>[]
          }
          create: {
            args: Prisma.BusinessUserAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>
          }
          createMany: {
            args: Prisma.BusinessUserAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessUserAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>[]
          }
          delete: {
            args: Prisma.BusinessUserAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>
          }
          update: {
            args: Prisma.BusinessUserAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>
          }
          deleteMany: {
            args: Prisma.BusinessUserAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessUserAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BusinessUserAccessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>[]
          }
          upsert: {
            args: Prisma.BusinessUserAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessUserAccessPayload>
          }
          aggregate: {
            args: Prisma.BusinessUserAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusinessUserAccess>
          }
          groupBy: {
            args: Prisma.BusinessUserAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessUserAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessUserAccessCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessUserAccessCountAggregateOutputType> | number
          }
        }
      }
      Currency: {
        payload: Prisma.$CurrencyPayload<ExtArgs>
        fields: Prisma.CurrencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurrencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurrencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findFirst: {
            args: Prisma.CurrencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurrencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          findMany: {
            args: Prisma.CurrencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          create: {
            args: Prisma.CurrencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          createMany: {
            args: Prisma.CurrencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CurrencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          delete: {
            args: Prisma.CurrencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          update: {
            args: Prisma.CurrencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          deleteMany: {
            args: Prisma.CurrencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CurrencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CurrencyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>[]
          }
          upsert: {
            args: Prisma.CurrencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyPayload>
          }
          aggregate: {
            args: Prisma.CurrencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCurrency>
          }
          groupBy: {
            args: Prisma.CurrencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CurrencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurrencyCountArgs<ExtArgs>
            result: $Utils.Optional<CurrencyCountAggregateOutputType> | number
          }
        }
      }
      Continent: {
        payload: Prisma.$ContinentPayload<ExtArgs>
        fields: Prisma.ContinentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContinentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContinentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>
          }
          findFirst: {
            args: Prisma.ContinentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContinentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>
          }
          findMany: {
            args: Prisma.ContinentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>[]
          }
          create: {
            args: Prisma.ContinentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>
          }
          createMany: {
            args: Prisma.ContinentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContinentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>[]
          }
          delete: {
            args: Prisma.ContinentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>
          }
          update: {
            args: Prisma.ContinentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>
          }
          deleteMany: {
            args: Prisma.ContinentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContinentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContinentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>[]
          }
          upsert: {
            args: Prisma.ContinentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContinentPayload>
          }
          aggregate: {
            args: Prisma.ContinentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContinent>
          }
          groupBy: {
            args: Prisma.ContinentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContinentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContinentCountArgs<ExtArgs>
            result: $Utils.Optional<ContinentCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CountryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CountryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      BusinessRegistration: {
        payload: Prisma.$BusinessRegistrationPayload<ExtArgs>
        fields: Prisma.BusinessRegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessRegistrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessRegistrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>
          }
          findFirst: {
            args: Prisma.BusinessRegistrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessRegistrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>
          }
          findMany: {
            args: Prisma.BusinessRegistrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>[]
          }
          create: {
            args: Prisma.BusinessRegistrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>
          }
          createMany: {
            args: Prisma.BusinessRegistrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessRegistrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>[]
          }
          delete: {
            args: Prisma.BusinessRegistrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>
          }
          update: {
            args: Prisma.BusinessRegistrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>
          }
          deleteMany: {
            args: Prisma.BusinessRegistrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessRegistrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BusinessRegistrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>[]
          }
          upsert: {
            args: Prisma.BusinessRegistrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessRegistrationPayload>
          }
          aggregate: {
            args: Prisma.BusinessRegistrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusinessRegistration>
          }
          groupBy: {
            args: Prisma.BusinessRegistrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessRegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessRegistrationCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessRegistrationCountAggregateOutputType> | number
          }
        }
      }
      Merchant: {
        payload: Prisma.$MerchantPayload<ExtArgs>
        fields: Prisma.MerchantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MerchantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MerchantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          findFirst: {
            args: Prisma.MerchantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MerchantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          findMany: {
            args: Prisma.MerchantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          create: {
            args: Prisma.MerchantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          createMany: {
            args: Prisma.MerchantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MerchantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          delete: {
            args: Prisma.MerchantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          update: {
            args: Prisma.MerchantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          deleteMany: {
            args: Prisma.MerchantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MerchantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MerchantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          upsert: {
            args: Prisma.MerchantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          aggregate: {
            args: Prisma.MerchantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMerchant>
          }
          groupBy: {
            args: Prisma.MerchantGroupByArgs<ExtArgs>
            result: $Utils.Optional<MerchantGroupByOutputType>[]
          }
          count: {
            args: Prisma.MerchantCountArgs<ExtArgs>
            result: $Utils.Optional<MerchantCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Store: {
        payload: Prisma.$StorePayload<ExtArgs>
        fields: Prisma.StoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findFirst: {
            args: Prisma.StoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findMany: {
            args: Prisma.StoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          create: {
            args: Prisma.StoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          createMany: {
            args: Prisma.StoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          delete: {
            args: Prisma.StoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          update: {
            args: Prisma.StoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          deleteMany: {
            args: Prisma.StoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          upsert: {
            args: Prisma.StoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          aggregate: {
            args: Prisma.StoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStore>
          }
          groupBy: {
            args: Prisma.StoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoreCountArgs<ExtArgs>
            result: $Utils.Optional<StoreCountAggregateOutputType> | number
          }
        }
      }
      Receipt: {
        payload: Prisma.$ReceiptPayload<ExtArgs>
        fields: Prisma.ReceiptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          findFirst: {
            args: Prisma.ReceiptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          findMany: {
            args: Prisma.ReceiptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>[]
          }
          create: {
            args: Prisma.ReceiptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          createMany: {
            args: Prisma.ReceiptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>[]
          }
          delete: {
            args: Prisma.ReceiptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          update: {
            args: Prisma.ReceiptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceiptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>[]
          }
          upsert: {
            args: Prisma.ReceiptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          aggregate: {
            args: Prisma.ReceiptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceipt>
          }
          groupBy: {
            args: Prisma.ReceiptGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptCountAggregateOutputType> | number
          }
        }
      }
      ReceiptTax: {
        payload: Prisma.$ReceiptTaxPayload<ExtArgs>
        fields: Prisma.ReceiptTaxFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptTaxFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptTaxFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>
          }
          findFirst: {
            args: Prisma.ReceiptTaxFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptTaxFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>
          }
          findMany: {
            args: Prisma.ReceiptTaxFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>[]
          }
          create: {
            args: Prisma.ReceiptTaxCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>
          }
          createMany: {
            args: Prisma.ReceiptTaxCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptTaxCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>[]
          }
          delete: {
            args: Prisma.ReceiptTaxDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>
          }
          update: {
            args: Prisma.ReceiptTaxUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptTaxDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptTaxUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceiptTaxUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>[]
          }
          upsert: {
            args: Prisma.ReceiptTaxUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptTaxPayload>
          }
          aggregate: {
            args: Prisma.ReceiptTaxAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptTax>
          }
          groupBy: {
            args: Prisma.ReceiptTaxGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptTaxGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptTaxCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptTaxCountAggregateOutputType> | number
          }
        }
      }
      ReceiptPayment: {
        payload: Prisma.$ReceiptPaymentPayload<ExtArgs>
        fields: Prisma.ReceiptPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          findFirst: {
            args: Prisma.ReceiptPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          findMany: {
            args: Prisma.ReceiptPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>[]
          }
          create: {
            args: Prisma.ReceiptPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          createMany: {
            args: Prisma.ReceiptPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>[]
          }
          delete: {
            args: Prisma.ReceiptPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          update: {
            args: Prisma.ReceiptPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceiptPaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>[]
          }
          upsert: {
            args: Prisma.ReceiptPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPaymentPayload>
          }
          aggregate: {
            args: Prisma.ReceiptPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptPayment>
          }
          groupBy: {
            args: Prisma.ReceiptPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptPaymentCountAggregateOutputType> | number
          }
        }
      }
      ReceiptItem: {
        payload: Prisma.$ReceiptItemPayload<ExtArgs>
        fields: Prisma.ReceiptItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          findFirst: {
            args: Prisma.ReceiptItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          findMany: {
            args: Prisma.ReceiptItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>[]
          }
          create: {
            args: Prisma.ReceiptItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          createMany: {
            args: Prisma.ReceiptItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>[]
          }
          delete: {
            args: Prisma.ReceiptItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          update: {
            args: Prisma.ReceiptItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceiptItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>[]
          }
          upsert: {
            args: Prisma.ReceiptItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptItemPayload>
          }
          aggregate: {
            args: Prisma.ReceiptItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptItem>
          }
          groupBy: {
            args: Prisma.ReceiptItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptItemCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptItemCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
    emailChangeRecord?: EmailChangeRecordOmit
    phoneChangeRecord?: PhoneChangeRecordOmit
    rateLimit?: RateLimitOmit
    consumer?: ConsumerOmit
    businessUserAccess?: BusinessUserAccessOmit
    currency?: CurrencyOmit
    continent?: ContinentOmit
    country?: CountryOmit
    region?: RegionOmit
    businessRegistration?: BusinessRegistrationOmit
    merchant?: MerchantOmit
    brand?: BrandOmit
    store?: StoreOmit
    receipt?: ReceiptOmit
    receiptTax?: ReceiptTaxOmit
    receiptPayment?: ReceiptPaymentOmit
    receiptItem?: ReceiptItemOmit
    auditLog?: AuditLogOmit
    image?: ImageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    accounts: number
    businessAccess: number
    createdUsers: number
    createdAccessRecords: number
    emailChangeRecords: number
    phoneChangeRecords: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    businessAccess?: boolean | UserCountOutputTypeCountBusinessAccessArgs
    createdUsers?: boolean | UserCountOutputTypeCountCreatedUsersArgs
    createdAccessRecords?: boolean | UserCountOutputTypeCountCreatedAccessRecordsArgs
    emailChangeRecords?: boolean | UserCountOutputTypeCountEmailChangeRecordsArgs
    phoneChangeRecords?: boolean | UserCountOutputTypeCountPhoneChangeRecordsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBusinessAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessUserAccessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAccessRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessUserAccessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmailChangeRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailChangeRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPhoneChangeRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhoneChangeRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type ConsumerCountOutputType
   */

  export type ConsumerCountOutputType = {
    receipts: number
  }

  export type ConsumerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipts?: boolean | ConsumerCountOutputTypeCountReceiptsArgs
  }

  // Custom InputTypes
  /**
   * ConsumerCountOutputType without action
   */
  export type ConsumerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsumerCountOutputType
     */
    select?: ConsumerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsumerCountOutputType without action
   */
  export type ConsumerCountOutputTypeCountReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
  }


  /**
   * Count Type CurrencyCountOutputType
   */

  export type CurrencyCountOutputType = {
    countries: number
    stores: number
  }

  export type CurrencyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    countries?: boolean | CurrencyCountOutputTypeCountCountriesArgs
    stores?: boolean | CurrencyCountOutputTypeCountStoresArgs
  }

  // Custom InputTypes
  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyCountOutputType
     */
    select?: CurrencyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountCountriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
  }

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeCountStoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
  }


  /**
   * Count Type ContinentCountOutputType
   */

  export type ContinentCountOutputType = {
    countries: number
  }

  export type ContinentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    countries?: boolean | ContinentCountOutputTypeCountCountriesArgs
  }

  // Custom InputTypes
  /**
   * ContinentCountOutputType without action
   */
  export type ContinentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContinentCountOutputType
     */
    select?: ContinentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContinentCountOutputType without action
   */
  export type ContinentCountOutputTypeCountCountriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
  }


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    regions: number
    merchants: number
    brands: number
    stores: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    regions?: boolean | CountryCountOutputTypeCountRegionsArgs
    merchants?: boolean | CountryCountOutputTypeCountMerchantsArgs
    brands?: boolean | CountryCountOutputTypeCountBrandsArgs
    stores?: boolean | CountryCountOutputTypeCountStoresArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountRegionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountMerchantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountStoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
  }


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    merchants: number
    brands: number
    stores: number
    users: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchants?: boolean | RegionCountOutputTypeCountMerchantsArgs
    brands?: boolean | RegionCountOutputTypeCountBrandsArgs
    stores?: boolean | RegionCountOutputTypeCountStoresArgs
    users?: boolean | RegionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountMerchantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountStoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type MerchantCountOutputType
   */

  export type MerchantCountOutputType = {
    businessRegistrations: number
    brands: number
    userAccess: number
  }

  export type MerchantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRegistrations?: boolean | MerchantCountOutputTypeCountBusinessRegistrationsArgs
    brands?: boolean | MerchantCountOutputTypeCountBrandsArgs
    userAccess?: boolean | MerchantCountOutputTypeCountUserAccessArgs
  }

  // Custom InputTypes
  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantCountOutputType
     */
    select?: MerchantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountBusinessRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRegistrationWhereInput
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountUserAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessUserAccessWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    businessRegistrations: number
    stores: number
    userAccess: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRegistrations?: boolean | BrandCountOutputTypeCountBusinessRegistrationsArgs
    stores?: boolean | BrandCountOutputTypeCountStoresArgs
    userAccess?: boolean | BrandCountOutputTypeCountUserAccessArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountBusinessRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRegistrationWhereInput
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountStoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountUserAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessUserAccessWhereInput
  }


  /**
   * Count Type StoreCountOutputType
   */

  export type StoreCountOutputType = {
    businessRegistrations: number
    receipts: number
    userAccess: number
  }

  export type StoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessRegistrations?: boolean | StoreCountOutputTypeCountBusinessRegistrationsArgs
    receipts?: boolean | StoreCountOutputTypeCountReceiptsArgs
    userAccess?: boolean | StoreCountOutputTypeCountUserAccessArgs
  }

  // Custom InputTypes
  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreCountOutputType
     */
    select?: StoreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountBusinessRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRegistrationWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountUserAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessUserAccessWhereInput
  }


  /**
   * Count Type ReceiptCountOutputType
   */

  export type ReceiptCountOutputType = {
    receiptItems: number
    receiptPayments: number
    receiptTaxes: number
  }

  export type ReceiptCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receiptItems?: boolean | ReceiptCountOutputTypeCountReceiptItemsArgs
    receiptPayments?: boolean | ReceiptCountOutputTypeCountReceiptPaymentsArgs
    receiptTaxes?: boolean | ReceiptCountOutputTypeCountReceiptTaxesArgs
  }

  // Custom InputTypes
  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptCountOutputType
     */
    select?: ReceiptCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeCountReceiptItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptItemWhereInput
  }

  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeCountReceiptPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptPaymentWhereInput
  }

  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeCountReceiptTaxesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptTaxWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    lastName: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    role: $Enums.UserRole | null
    postalCode: string | null
    city: string | null
    regionId: string | null
    phoneNumber: string | null
    phoneVerified: boolean | null
    timezone: string | null
    locale: string | null
    status: $Enums.Status | null
    createdById: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    lastName: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    role: $Enums.UserRole | null
    postalCode: string | null
    city: string | null
    regionId: string | null
    phoneNumber: string | null
    phoneVerified: boolean | null
    timezone: string | null
    locale: string | null
    status: $Enums.Status | null
    createdById: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    lastName: number
    email: number
    emailVerified: number
    image: number
    role: number
    postalCode: number
    city: number
    regionId: number
    phoneNumber: number
    phoneVerified: number
    timezone: number
    locale: number
    status: number
    createdById: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    lastName?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    postalCode?: true
    city?: true
    regionId?: true
    phoneNumber?: true
    phoneVerified?: true
    timezone?: true
    locale?: true
    status?: true
    createdById?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    lastName?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    postalCode?: true
    city?: true
    regionId?: true
    phoneNumber?: true
    phoneVerified?: true
    timezone?: true
    locale?: true
    status?: true
    createdById?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    lastName?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    postalCode?: true
    city?: true
    regionId?: true
    phoneNumber?: true
    phoneVerified?: true
    timezone?: true
    locale?: true
    status?: true
    createdById?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    lastName: string
    email: string
    emailVerified: boolean
    image: string | null
    role: $Enums.UserRole
    postalCode: string | null
    city: string | null
    regionId: string | null
    phoneNumber: string | null
    phoneVerified: boolean
    timezone: string | null
    locale: string | null
    status: $Enums.Status
    createdById: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    postalCode?: boolean
    city?: boolean
    regionId?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    timezone?: boolean
    locale?: boolean
    status?: boolean
    createdById?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    region?: boolean | User$regionArgs<ExtArgs>
    consumerProfile?: boolean | User$consumerProfileArgs<ExtArgs>
    businessAccess?: boolean | User$businessAccessArgs<ExtArgs>
    createdBy?: boolean | User$createdByArgs<ExtArgs>
    createdUsers?: boolean | User$createdUsersArgs<ExtArgs>
    createdAccessRecords?: boolean | User$createdAccessRecordsArgs<ExtArgs>
    emailChangeRecords?: boolean | User$emailChangeRecordsArgs<ExtArgs>
    phoneChangeRecords?: boolean | User$phoneChangeRecordsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    postalCode?: boolean
    city?: boolean
    regionId?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    timezone?: boolean
    locale?: boolean
    status?: boolean
    createdById?: boolean
    region?: boolean | User$regionArgs<ExtArgs>
    createdBy?: boolean | User$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    postalCode?: boolean
    city?: boolean
    regionId?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    timezone?: boolean
    locale?: boolean
    status?: boolean
    createdById?: boolean
    region?: boolean | User$regionArgs<ExtArgs>
    createdBy?: boolean | User$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    postalCode?: boolean
    city?: boolean
    regionId?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    timezone?: boolean
    locale?: boolean
    status?: boolean
    createdById?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "name" | "lastName" | "email" | "emailVerified" | "image" | "role" | "postalCode" | "city" | "regionId" | "phoneNumber" | "phoneVerified" | "timezone" | "locale" | "status" | "createdById", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    region?: boolean | User$regionArgs<ExtArgs>
    consumerProfile?: boolean | User$consumerProfileArgs<ExtArgs>
    businessAccess?: boolean | User$businessAccessArgs<ExtArgs>
    createdBy?: boolean | User$createdByArgs<ExtArgs>
    createdUsers?: boolean | User$createdUsersArgs<ExtArgs>
    createdAccessRecords?: boolean | User$createdAccessRecordsArgs<ExtArgs>
    emailChangeRecords?: boolean | User$emailChangeRecordsArgs<ExtArgs>
    phoneChangeRecords?: boolean | User$phoneChangeRecordsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | User$regionArgs<ExtArgs>
    createdBy?: boolean | User$createdByArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | User$regionArgs<ExtArgs>
    createdBy?: boolean | User$createdByArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      region: Prisma.$RegionPayload<ExtArgs> | null
      consumerProfile: Prisma.$ConsumerPayload<ExtArgs> | null
      businessAccess: Prisma.$BusinessUserAccessPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      createdUsers: Prisma.$UserPayload<ExtArgs>[]
      createdAccessRecords: Prisma.$BusinessUserAccessPayload<ExtArgs>[]
      emailChangeRecords: Prisma.$EmailChangeRecordPayload<ExtArgs>[]
      phoneChangeRecords: Prisma.$PhoneChangeRecordPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      name: string
      lastName: string
      email: string
      emailVerified: boolean
      image: string | null
      role: $Enums.UserRole
      postalCode: string | null
      city: string | null
      regionId: string | null
      phoneNumber: string | null
      phoneVerified: boolean
      timezone: string | null
      locale: string | null
      status: $Enums.Status
      createdById: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    region<T extends User$regionArgs<ExtArgs> = {}>(args?: Subset<T, User$regionArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    consumerProfile<T extends User$consumerProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$consumerProfileArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    businessAccess<T extends User$businessAccessArgs<ExtArgs> = {}>(args?: Subset<T, User$businessAccessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends User$createdByArgs<ExtArgs> = {}>(args?: Subset<T, User$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdUsers<T extends User$createdUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$createdUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdAccessRecords<T extends User$createdAccessRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAccessRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailChangeRecords<T extends User$emailChangeRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$emailChangeRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    phoneChangeRecords<T extends User$phoneChangeRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$phoneChangeRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly name: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly postalCode: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly regionId: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly phoneVerified: FieldRef<"User", 'Boolean'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly locale: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'Status'>
    readonly createdById: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.region
   */
  export type User$regionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
  }

  /**
   * User.consumerProfile
   */
  export type User$consumerProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    where?: ConsumerWhereInput
  }

  /**
   * User.businessAccess
   */
  export type User$businessAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    where?: BusinessUserAccessWhereInput
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    cursor?: BusinessUserAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessUserAccessScalarFieldEnum | BusinessUserAccessScalarFieldEnum[]
  }

  /**
   * User.createdBy
   */
  export type User$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.createdUsers
   */
  export type User$createdUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.createdAccessRecords
   */
  export type User$createdAccessRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    where?: BusinessUserAccessWhereInput
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    cursor?: BusinessUserAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessUserAccessScalarFieldEnum | BusinessUserAccessScalarFieldEnum[]
  }

  /**
   * User.emailChangeRecords
   */
  export type User$emailChangeRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    where?: EmailChangeRecordWhereInput
    orderBy?: EmailChangeRecordOrderByWithRelationInput | EmailChangeRecordOrderByWithRelationInput[]
    cursor?: EmailChangeRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailChangeRecordScalarFieldEnum | EmailChangeRecordScalarFieldEnum[]
  }

  /**
   * User.phoneChangeRecords
   */
  export type User$phoneChangeRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    where?: PhoneChangeRecordWhereInput
    orderBy?: PhoneChangeRecordOrderByWithRelationInput | PhoneChangeRecordOrderByWithRelationInput[]
    cursor?: PhoneChangeRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhoneChangeRecordScalarFieldEnum | PhoneChangeRecordScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
    token: string | null
    ipAddress: string | null
    userAgent: string | null
    impersonatedBy: string | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
    token: string | null
    ipAddress: string | null
    userAgent: string | null
    impersonatedBy: string | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    expiresAt: number
    token: number
    ipAddress: number
    userAgent: number
    impersonatedBy: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    impersonatedBy?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    impersonatedBy?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    impersonatedBy?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    expiresAt: Date
    token: string
    ipAddress: string | null
    userAgent: string | null
    impersonatedBy: string | null
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    impersonatedBy?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    impersonatedBy?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    impersonatedBy?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    impersonatedBy?: boolean
    userId?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "expiresAt" | "token" | "ipAddress" | "userAgent" | "impersonatedBy" | "userId", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      expiresAt: Date
      token: string
      ipAddress: string | null
      userAgent: string | null
      impersonatedBy: string | null
      userId: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly token: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly impersonatedBy: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    accountId: string | null
    providerId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    userId: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    accountId: string | null
    providerId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    userId: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    accountId: number
    providerId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    userId: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    accountId?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    userId?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    accountId?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    userId?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    accountId?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    userId?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    accountId: string
    providerId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    userId: string
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accountId?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accountId?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accountId?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accountId?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    userId?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "accountId" | "providerId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "userId", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      accountId: string
      providerId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      userId: string
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    identifier: number
    value: number
    expiresAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    identifier?: true
    value?: true
    expiresAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    identifier?: true
    value?: true
    expiresAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    identifier?: true
    value?: true
    expiresAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    createdAt: Date | null
    updatedAt: Date | null
    identifier: string
    value: string
    expiresAt: Date
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "identifier" | "value" | "expiresAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date | null
      updatedAt: Date | null
      identifier: string
      value: string
      expiresAt: Date
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification updateManyAndReturn
   */
  export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Model EmailChangeRecord
   */

  export type AggregateEmailChangeRecord = {
    _count: EmailChangeRecordCountAggregateOutputType | null
    _avg: EmailChangeRecordAvgAggregateOutputType | null
    _sum: EmailChangeRecordSumAggregateOutputType | null
    _min: EmailChangeRecordMinAggregateOutputType | null
    _max: EmailChangeRecordMaxAggregateOutputType | null
  }

  export type EmailChangeRecordAvgAggregateOutputType = {
    attempts: number | null
  }

  export type EmailChangeRecordSumAggregateOutputType = {
    attempts: number | null
  }

  export type EmailChangeRecordMinAggregateOutputType = {
    id: string | null
    email: string | null
    newEmail: string | null
    otp: string | null
    expiresAt: Date | null
    attempts: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type EmailChangeRecordMaxAggregateOutputType = {
    id: string | null
    email: string | null
    newEmail: string | null
    otp: string | null
    expiresAt: Date | null
    attempts: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type EmailChangeRecordCountAggregateOutputType = {
    id: number
    email: number
    newEmail: number
    otp: number
    expiresAt: number
    attempts: number
    createdAt: number
    userId: number
    _all: number
  }


  export type EmailChangeRecordAvgAggregateInputType = {
    attempts?: true
  }

  export type EmailChangeRecordSumAggregateInputType = {
    attempts?: true
  }

  export type EmailChangeRecordMinAggregateInputType = {
    id?: true
    email?: true
    newEmail?: true
    otp?: true
    expiresAt?: true
    attempts?: true
    createdAt?: true
    userId?: true
  }

  export type EmailChangeRecordMaxAggregateInputType = {
    id?: true
    email?: true
    newEmail?: true
    otp?: true
    expiresAt?: true
    attempts?: true
    createdAt?: true
    userId?: true
  }

  export type EmailChangeRecordCountAggregateInputType = {
    id?: true
    email?: true
    newEmail?: true
    otp?: true
    expiresAt?: true
    attempts?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type EmailChangeRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailChangeRecord to aggregate.
     */
    where?: EmailChangeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailChangeRecords to fetch.
     */
    orderBy?: EmailChangeRecordOrderByWithRelationInput | EmailChangeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailChangeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailChangeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailChangeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailChangeRecords
    **/
    _count?: true | EmailChangeRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailChangeRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailChangeRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailChangeRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailChangeRecordMaxAggregateInputType
  }

  export type GetEmailChangeRecordAggregateType<T extends EmailChangeRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailChangeRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailChangeRecord[P]>
      : GetScalarType<T[P], AggregateEmailChangeRecord[P]>
  }




  export type EmailChangeRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailChangeRecordWhereInput
    orderBy?: EmailChangeRecordOrderByWithAggregationInput | EmailChangeRecordOrderByWithAggregationInput[]
    by: EmailChangeRecordScalarFieldEnum[] | EmailChangeRecordScalarFieldEnum
    having?: EmailChangeRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailChangeRecordCountAggregateInputType | true
    _avg?: EmailChangeRecordAvgAggregateInputType
    _sum?: EmailChangeRecordSumAggregateInputType
    _min?: EmailChangeRecordMinAggregateInputType
    _max?: EmailChangeRecordMaxAggregateInputType
  }

  export type EmailChangeRecordGroupByOutputType = {
    id: string
    email: string
    newEmail: string
    otp: string
    expiresAt: Date
    attempts: number
    createdAt: Date
    userId: string
    _count: EmailChangeRecordCountAggregateOutputType | null
    _avg: EmailChangeRecordAvgAggregateOutputType | null
    _sum: EmailChangeRecordSumAggregateOutputType | null
    _min: EmailChangeRecordMinAggregateOutputType | null
    _max: EmailChangeRecordMaxAggregateOutputType | null
  }

  type GetEmailChangeRecordGroupByPayload<T extends EmailChangeRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailChangeRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailChangeRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailChangeRecordGroupByOutputType[P]>
            : GetScalarType<T[P], EmailChangeRecordGroupByOutputType[P]>
        }
      >
    >


  export type EmailChangeRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    newEmail?: boolean
    otp?: boolean
    expiresAt?: boolean
    attempts?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailChangeRecord"]>

  export type EmailChangeRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    newEmail?: boolean
    otp?: boolean
    expiresAt?: boolean
    attempts?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailChangeRecord"]>

  export type EmailChangeRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    newEmail?: boolean
    otp?: boolean
    expiresAt?: boolean
    attempts?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailChangeRecord"]>

  export type EmailChangeRecordSelectScalar = {
    id?: boolean
    email?: boolean
    newEmail?: boolean
    otp?: boolean
    expiresAt?: boolean
    attempts?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type EmailChangeRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "newEmail" | "otp" | "expiresAt" | "attempts" | "createdAt" | "userId", ExtArgs["result"]["emailChangeRecord"]>
  export type EmailChangeRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmailChangeRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmailChangeRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmailChangeRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailChangeRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      newEmail: string
      otp: string
      expiresAt: Date
      attempts: number
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["emailChangeRecord"]>
    composites: {}
  }

  type EmailChangeRecordGetPayload<S extends boolean | null | undefined | EmailChangeRecordDefaultArgs> = $Result.GetResult<Prisma.$EmailChangeRecordPayload, S>

  type EmailChangeRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailChangeRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailChangeRecordCountAggregateInputType | true
    }

  export interface EmailChangeRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailChangeRecord'], meta: { name: 'EmailChangeRecord' } }
    /**
     * Find zero or one EmailChangeRecord that matches the filter.
     * @param {EmailChangeRecordFindUniqueArgs} args - Arguments to find a EmailChangeRecord
     * @example
     * // Get one EmailChangeRecord
     * const emailChangeRecord = await prisma.emailChangeRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailChangeRecordFindUniqueArgs>(args: SelectSubset<T, EmailChangeRecordFindUniqueArgs<ExtArgs>>): Prisma__EmailChangeRecordClient<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailChangeRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailChangeRecordFindUniqueOrThrowArgs} args - Arguments to find a EmailChangeRecord
     * @example
     * // Get one EmailChangeRecord
     * const emailChangeRecord = await prisma.emailChangeRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailChangeRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailChangeRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailChangeRecordClient<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailChangeRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailChangeRecordFindFirstArgs} args - Arguments to find a EmailChangeRecord
     * @example
     * // Get one EmailChangeRecord
     * const emailChangeRecord = await prisma.emailChangeRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailChangeRecordFindFirstArgs>(args?: SelectSubset<T, EmailChangeRecordFindFirstArgs<ExtArgs>>): Prisma__EmailChangeRecordClient<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailChangeRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailChangeRecordFindFirstOrThrowArgs} args - Arguments to find a EmailChangeRecord
     * @example
     * // Get one EmailChangeRecord
     * const emailChangeRecord = await prisma.emailChangeRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailChangeRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailChangeRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailChangeRecordClient<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailChangeRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailChangeRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailChangeRecords
     * const emailChangeRecords = await prisma.emailChangeRecord.findMany()
     * 
     * // Get first 10 EmailChangeRecords
     * const emailChangeRecords = await prisma.emailChangeRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailChangeRecordWithIdOnly = await prisma.emailChangeRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailChangeRecordFindManyArgs>(args?: SelectSubset<T, EmailChangeRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailChangeRecord.
     * @param {EmailChangeRecordCreateArgs} args - Arguments to create a EmailChangeRecord.
     * @example
     * // Create one EmailChangeRecord
     * const EmailChangeRecord = await prisma.emailChangeRecord.create({
     *   data: {
     *     // ... data to create a EmailChangeRecord
     *   }
     * })
     * 
     */
    create<T extends EmailChangeRecordCreateArgs>(args: SelectSubset<T, EmailChangeRecordCreateArgs<ExtArgs>>): Prisma__EmailChangeRecordClient<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailChangeRecords.
     * @param {EmailChangeRecordCreateManyArgs} args - Arguments to create many EmailChangeRecords.
     * @example
     * // Create many EmailChangeRecords
     * const emailChangeRecord = await prisma.emailChangeRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailChangeRecordCreateManyArgs>(args?: SelectSubset<T, EmailChangeRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailChangeRecords and returns the data saved in the database.
     * @param {EmailChangeRecordCreateManyAndReturnArgs} args - Arguments to create many EmailChangeRecords.
     * @example
     * // Create many EmailChangeRecords
     * const emailChangeRecord = await prisma.emailChangeRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailChangeRecords and only return the `id`
     * const emailChangeRecordWithIdOnly = await prisma.emailChangeRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailChangeRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailChangeRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailChangeRecord.
     * @param {EmailChangeRecordDeleteArgs} args - Arguments to delete one EmailChangeRecord.
     * @example
     * // Delete one EmailChangeRecord
     * const EmailChangeRecord = await prisma.emailChangeRecord.delete({
     *   where: {
     *     // ... filter to delete one EmailChangeRecord
     *   }
     * })
     * 
     */
    delete<T extends EmailChangeRecordDeleteArgs>(args: SelectSubset<T, EmailChangeRecordDeleteArgs<ExtArgs>>): Prisma__EmailChangeRecordClient<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailChangeRecord.
     * @param {EmailChangeRecordUpdateArgs} args - Arguments to update one EmailChangeRecord.
     * @example
     * // Update one EmailChangeRecord
     * const emailChangeRecord = await prisma.emailChangeRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailChangeRecordUpdateArgs>(args: SelectSubset<T, EmailChangeRecordUpdateArgs<ExtArgs>>): Prisma__EmailChangeRecordClient<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailChangeRecords.
     * @param {EmailChangeRecordDeleteManyArgs} args - Arguments to filter EmailChangeRecords to delete.
     * @example
     * // Delete a few EmailChangeRecords
     * const { count } = await prisma.emailChangeRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailChangeRecordDeleteManyArgs>(args?: SelectSubset<T, EmailChangeRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailChangeRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailChangeRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailChangeRecords
     * const emailChangeRecord = await prisma.emailChangeRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailChangeRecordUpdateManyArgs>(args: SelectSubset<T, EmailChangeRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailChangeRecords and returns the data updated in the database.
     * @param {EmailChangeRecordUpdateManyAndReturnArgs} args - Arguments to update many EmailChangeRecords.
     * @example
     * // Update many EmailChangeRecords
     * const emailChangeRecord = await prisma.emailChangeRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailChangeRecords and only return the `id`
     * const emailChangeRecordWithIdOnly = await prisma.emailChangeRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailChangeRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailChangeRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailChangeRecord.
     * @param {EmailChangeRecordUpsertArgs} args - Arguments to update or create a EmailChangeRecord.
     * @example
     * // Update or create a EmailChangeRecord
     * const emailChangeRecord = await prisma.emailChangeRecord.upsert({
     *   create: {
     *     // ... data to create a EmailChangeRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailChangeRecord we want to update
     *   }
     * })
     */
    upsert<T extends EmailChangeRecordUpsertArgs>(args: SelectSubset<T, EmailChangeRecordUpsertArgs<ExtArgs>>): Prisma__EmailChangeRecordClient<$Result.GetResult<Prisma.$EmailChangeRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailChangeRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailChangeRecordCountArgs} args - Arguments to filter EmailChangeRecords to count.
     * @example
     * // Count the number of EmailChangeRecords
     * const count = await prisma.emailChangeRecord.count({
     *   where: {
     *     // ... the filter for the EmailChangeRecords we want to count
     *   }
     * })
    **/
    count<T extends EmailChangeRecordCountArgs>(
      args?: Subset<T, EmailChangeRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailChangeRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailChangeRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailChangeRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailChangeRecordAggregateArgs>(args: Subset<T, EmailChangeRecordAggregateArgs>): Prisma.PrismaPromise<GetEmailChangeRecordAggregateType<T>>

    /**
     * Group by EmailChangeRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailChangeRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailChangeRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailChangeRecordGroupByArgs['orderBy'] }
        : { orderBy?: EmailChangeRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailChangeRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailChangeRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailChangeRecord model
   */
  readonly fields: EmailChangeRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailChangeRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailChangeRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailChangeRecord model
   */
  interface EmailChangeRecordFieldRefs {
    readonly id: FieldRef<"EmailChangeRecord", 'String'>
    readonly email: FieldRef<"EmailChangeRecord", 'String'>
    readonly newEmail: FieldRef<"EmailChangeRecord", 'String'>
    readonly otp: FieldRef<"EmailChangeRecord", 'String'>
    readonly expiresAt: FieldRef<"EmailChangeRecord", 'DateTime'>
    readonly attempts: FieldRef<"EmailChangeRecord", 'Int'>
    readonly createdAt: FieldRef<"EmailChangeRecord", 'DateTime'>
    readonly userId: FieldRef<"EmailChangeRecord", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmailChangeRecord findUnique
   */
  export type EmailChangeRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailChangeRecord to fetch.
     */
    where: EmailChangeRecordWhereUniqueInput
  }

  /**
   * EmailChangeRecord findUniqueOrThrow
   */
  export type EmailChangeRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailChangeRecord to fetch.
     */
    where: EmailChangeRecordWhereUniqueInput
  }

  /**
   * EmailChangeRecord findFirst
   */
  export type EmailChangeRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailChangeRecord to fetch.
     */
    where?: EmailChangeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailChangeRecords to fetch.
     */
    orderBy?: EmailChangeRecordOrderByWithRelationInput | EmailChangeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailChangeRecords.
     */
    cursor?: EmailChangeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailChangeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailChangeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailChangeRecords.
     */
    distinct?: EmailChangeRecordScalarFieldEnum | EmailChangeRecordScalarFieldEnum[]
  }

  /**
   * EmailChangeRecord findFirstOrThrow
   */
  export type EmailChangeRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailChangeRecord to fetch.
     */
    where?: EmailChangeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailChangeRecords to fetch.
     */
    orderBy?: EmailChangeRecordOrderByWithRelationInput | EmailChangeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailChangeRecords.
     */
    cursor?: EmailChangeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailChangeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailChangeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailChangeRecords.
     */
    distinct?: EmailChangeRecordScalarFieldEnum | EmailChangeRecordScalarFieldEnum[]
  }

  /**
   * EmailChangeRecord findMany
   */
  export type EmailChangeRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which EmailChangeRecords to fetch.
     */
    where?: EmailChangeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailChangeRecords to fetch.
     */
    orderBy?: EmailChangeRecordOrderByWithRelationInput | EmailChangeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailChangeRecords.
     */
    cursor?: EmailChangeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailChangeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailChangeRecords.
     */
    skip?: number
    distinct?: EmailChangeRecordScalarFieldEnum | EmailChangeRecordScalarFieldEnum[]
  }

  /**
   * EmailChangeRecord create
   */
  export type EmailChangeRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailChangeRecord.
     */
    data: XOR<EmailChangeRecordCreateInput, EmailChangeRecordUncheckedCreateInput>
  }

  /**
   * EmailChangeRecord createMany
   */
  export type EmailChangeRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailChangeRecords.
     */
    data: EmailChangeRecordCreateManyInput | EmailChangeRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailChangeRecord createManyAndReturn
   */
  export type EmailChangeRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * The data used to create many EmailChangeRecords.
     */
    data: EmailChangeRecordCreateManyInput | EmailChangeRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailChangeRecord update
   */
  export type EmailChangeRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailChangeRecord.
     */
    data: XOR<EmailChangeRecordUpdateInput, EmailChangeRecordUncheckedUpdateInput>
    /**
     * Choose, which EmailChangeRecord to update.
     */
    where: EmailChangeRecordWhereUniqueInput
  }

  /**
   * EmailChangeRecord updateMany
   */
  export type EmailChangeRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailChangeRecords.
     */
    data: XOR<EmailChangeRecordUpdateManyMutationInput, EmailChangeRecordUncheckedUpdateManyInput>
    /**
     * Filter which EmailChangeRecords to update
     */
    where?: EmailChangeRecordWhereInput
    /**
     * Limit how many EmailChangeRecords to update.
     */
    limit?: number
  }

  /**
   * EmailChangeRecord updateManyAndReturn
   */
  export type EmailChangeRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * The data used to update EmailChangeRecords.
     */
    data: XOR<EmailChangeRecordUpdateManyMutationInput, EmailChangeRecordUncheckedUpdateManyInput>
    /**
     * Filter which EmailChangeRecords to update
     */
    where?: EmailChangeRecordWhereInput
    /**
     * Limit how many EmailChangeRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailChangeRecord upsert
   */
  export type EmailChangeRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailChangeRecord to update in case it exists.
     */
    where: EmailChangeRecordWhereUniqueInput
    /**
     * In case the EmailChangeRecord found by the `where` argument doesn't exist, create a new EmailChangeRecord with this data.
     */
    create: XOR<EmailChangeRecordCreateInput, EmailChangeRecordUncheckedCreateInput>
    /**
     * In case the EmailChangeRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailChangeRecordUpdateInput, EmailChangeRecordUncheckedUpdateInput>
  }

  /**
   * EmailChangeRecord delete
   */
  export type EmailChangeRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
    /**
     * Filter which EmailChangeRecord to delete.
     */
    where: EmailChangeRecordWhereUniqueInput
  }

  /**
   * EmailChangeRecord deleteMany
   */
  export type EmailChangeRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailChangeRecords to delete
     */
    where?: EmailChangeRecordWhereInput
    /**
     * Limit how many EmailChangeRecords to delete.
     */
    limit?: number
  }

  /**
   * EmailChangeRecord without action
   */
  export type EmailChangeRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailChangeRecord
     */
    select?: EmailChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailChangeRecord
     */
    omit?: EmailChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailChangeRecordInclude<ExtArgs> | null
  }


  /**
   * Model PhoneChangeRecord
   */

  export type AggregatePhoneChangeRecord = {
    _count: PhoneChangeRecordCountAggregateOutputType | null
    _avg: PhoneChangeRecordAvgAggregateOutputType | null
    _sum: PhoneChangeRecordSumAggregateOutputType | null
    _min: PhoneChangeRecordMinAggregateOutputType | null
    _max: PhoneChangeRecordMaxAggregateOutputType | null
  }

  export type PhoneChangeRecordAvgAggregateOutputType = {
    attempts: number | null
  }

  export type PhoneChangeRecordSumAggregateOutputType = {
    attempts: number | null
  }

  export type PhoneChangeRecordMinAggregateOutputType = {
    id: string | null
    phoneNumber: string | null
    newPhoneNumber: string | null
    otp: string | null
    expiresAt: Date | null
    attempts: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type PhoneChangeRecordMaxAggregateOutputType = {
    id: string | null
    phoneNumber: string | null
    newPhoneNumber: string | null
    otp: string | null
    expiresAt: Date | null
    attempts: number | null
    createdAt: Date | null
    userId: string | null
  }

  export type PhoneChangeRecordCountAggregateOutputType = {
    id: number
    phoneNumber: number
    newPhoneNumber: number
    otp: number
    expiresAt: number
    attempts: number
    createdAt: number
    userId: number
    _all: number
  }


  export type PhoneChangeRecordAvgAggregateInputType = {
    attempts?: true
  }

  export type PhoneChangeRecordSumAggregateInputType = {
    attempts?: true
  }

  export type PhoneChangeRecordMinAggregateInputType = {
    id?: true
    phoneNumber?: true
    newPhoneNumber?: true
    otp?: true
    expiresAt?: true
    attempts?: true
    createdAt?: true
    userId?: true
  }

  export type PhoneChangeRecordMaxAggregateInputType = {
    id?: true
    phoneNumber?: true
    newPhoneNumber?: true
    otp?: true
    expiresAt?: true
    attempts?: true
    createdAt?: true
    userId?: true
  }

  export type PhoneChangeRecordCountAggregateInputType = {
    id?: true
    phoneNumber?: true
    newPhoneNumber?: true
    otp?: true
    expiresAt?: true
    attempts?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type PhoneChangeRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhoneChangeRecord to aggregate.
     */
    where?: PhoneChangeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhoneChangeRecords to fetch.
     */
    orderBy?: PhoneChangeRecordOrderByWithRelationInput | PhoneChangeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhoneChangeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhoneChangeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhoneChangeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PhoneChangeRecords
    **/
    _count?: true | PhoneChangeRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhoneChangeRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhoneChangeRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhoneChangeRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhoneChangeRecordMaxAggregateInputType
  }

  export type GetPhoneChangeRecordAggregateType<T extends PhoneChangeRecordAggregateArgs> = {
        [P in keyof T & keyof AggregatePhoneChangeRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhoneChangeRecord[P]>
      : GetScalarType<T[P], AggregatePhoneChangeRecord[P]>
  }




  export type PhoneChangeRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhoneChangeRecordWhereInput
    orderBy?: PhoneChangeRecordOrderByWithAggregationInput | PhoneChangeRecordOrderByWithAggregationInput[]
    by: PhoneChangeRecordScalarFieldEnum[] | PhoneChangeRecordScalarFieldEnum
    having?: PhoneChangeRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhoneChangeRecordCountAggregateInputType | true
    _avg?: PhoneChangeRecordAvgAggregateInputType
    _sum?: PhoneChangeRecordSumAggregateInputType
    _min?: PhoneChangeRecordMinAggregateInputType
    _max?: PhoneChangeRecordMaxAggregateInputType
  }

  export type PhoneChangeRecordGroupByOutputType = {
    id: string
    phoneNumber: string | null
    newPhoneNumber: string
    otp: string
    expiresAt: Date
    attempts: number
    createdAt: Date
    userId: string
    _count: PhoneChangeRecordCountAggregateOutputType | null
    _avg: PhoneChangeRecordAvgAggregateOutputType | null
    _sum: PhoneChangeRecordSumAggregateOutputType | null
    _min: PhoneChangeRecordMinAggregateOutputType | null
    _max: PhoneChangeRecordMaxAggregateOutputType | null
  }

  type GetPhoneChangeRecordGroupByPayload<T extends PhoneChangeRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhoneChangeRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhoneChangeRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhoneChangeRecordGroupByOutputType[P]>
            : GetScalarType<T[P], PhoneChangeRecordGroupByOutputType[P]>
        }
      >
    >


  export type PhoneChangeRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    newPhoneNumber?: boolean
    otp?: boolean
    expiresAt?: boolean
    attempts?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phoneChangeRecord"]>

  export type PhoneChangeRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    newPhoneNumber?: boolean
    otp?: boolean
    expiresAt?: boolean
    attempts?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phoneChangeRecord"]>

  export type PhoneChangeRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    newPhoneNumber?: boolean
    otp?: boolean
    expiresAt?: boolean
    attempts?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phoneChangeRecord"]>

  export type PhoneChangeRecordSelectScalar = {
    id?: boolean
    phoneNumber?: boolean
    newPhoneNumber?: boolean
    otp?: boolean
    expiresAt?: boolean
    attempts?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type PhoneChangeRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "phoneNumber" | "newPhoneNumber" | "otp" | "expiresAt" | "attempts" | "createdAt" | "userId", ExtArgs["result"]["phoneChangeRecord"]>
  export type PhoneChangeRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PhoneChangeRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PhoneChangeRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PhoneChangeRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PhoneChangeRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      phoneNumber: string | null
      newPhoneNumber: string
      otp: string
      expiresAt: Date
      attempts: number
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["phoneChangeRecord"]>
    composites: {}
  }

  type PhoneChangeRecordGetPayload<S extends boolean | null | undefined | PhoneChangeRecordDefaultArgs> = $Result.GetResult<Prisma.$PhoneChangeRecordPayload, S>

  type PhoneChangeRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PhoneChangeRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PhoneChangeRecordCountAggregateInputType | true
    }

  export interface PhoneChangeRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PhoneChangeRecord'], meta: { name: 'PhoneChangeRecord' } }
    /**
     * Find zero or one PhoneChangeRecord that matches the filter.
     * @param {PhoneChangeRecordFindUniqueArgs} args - Arguments to find a PhoneChangeRecord
     * @example
     * // Get one PhoneChangeRecord
     * const phoneChangeRecord = await prisma.phoneChangeRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhoneChangeRecordFindUniqueArgs>(args: SelectSubset<T, PhoneChangeRecordFindUniqueArgs<ExtArgs>>): Prisma__PhoneChangeRecordClient<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PhoneChangeRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PhoneChangeRecordFindUniqueOrThrowArgs} args - Arguments to find a PhoneChangeRecord
     * @example
     * // Get one PhoneChangeRecord
     * const phoneChangeRecord = await prisma.phoneChangeRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhoneChangeRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, PhoneChangeRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhoneChangeRecordClient<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PhoneChangeRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneChangeRecordFindFirstArgs} args - Arguments to find a PhoneChangeRecord
     * @example
     * // Get one PhoneChangeRecord
     * const phoneChangeRecord = await prisma.phoneChangeRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhoneChangeRecordFindFirstArgs>(args?: SelectSubset<T, PhoneChangeRecordFindFirstArgs<ExtArgs>>): Prisma__PhoneChangeRecordClient<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PhoneChangeRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneChangeRecordFindFirstOrThrowArgs} args - Arguments to find a PhoneChangeRecord
     * @example
     * // Get one PhoneChangeRecord
     * const phoneChangeRecord = await prisma.phoneChangeRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhoneChangeRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, PhoneChangeRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhoneChangeRecordClient<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PhoneChangeRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneChangeRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PhoneChangeRecords
     * const phoneChangeRecords = await prisma.phoneChangeRecord.findMany()
     * 
     * // Get first 10 PhoneChangeRecords
     * const phoneChangeRecords = await prisma.phoneChangeRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phoneChangeRecordWithIdOnly = await prisma.phoneChangeRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhoneChangeRecordFindManyArgs>(args?: SelectSubset<T, PhoneChangeRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PhoneChangeRecord.
     * @param {PhoneChangeRecordCreateArgs} args - Arguments to create a PhoneChangeRecord.
     * @example
     * // Create one PhoneChangeRecord
     * const PhoneChangeRecord = await prisma.phoneChangeRecord.create({
     *   data: {
     *     // ... data to create a PhoneChangeRecord
     *   }
     * })
     * 
     */
    create<T extends PhoneChangeRecordCreateArgs>(args: SelectSubset<T, PhoneChangeRecordCreateArgs<ExtArgs>>): Prisma__PhoneChangeRecordClient<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PhoneChangeRecords.
     * @param {PhoneChangeRecordCreateManyArgs} args - Arguments to create many PhoneChangeRecords.
     * @example
     * // Create many PhoneChangeRecords
     * const phoneChangeRecord = await prisma.phoneChangeRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhoneChangeRecordCreateManyArgs>(args?: SelectSubset<T, PhoneChangeRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PhoneChangeRecords and returns the data saved in the database.
     * @param {PhoneChangeRecordCreateManyAndReturnArgs} args - Arguments to create many PhoneChangeRecords.
     * @example
     * // Create many PhoneChangeRecords
     * const phoneChangeRecord = await prisma.phoneChangeRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PhoneChangeRecords and only return the `id`
     * const phoneChangeRecordWithIdOnly = await prisma.phoneChangeRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhoneChangeRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, PhoneChangeRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PhoneChangeRecord.
     * @param {PhoneChangeRecordDeleteArgs} args - Arguments to delete one PhoneChangeRecord.
     * @example
     * // Delete one PhoneChangeRecord
     * const PhoneChangeRecord = await prisma.phoneChangeRecord.delete({
     *   where: {
     *     // ... filter to delete one PhoneChangeRecord
     *   }
     * })
     * 
     */
    delete<T extends PhoneChangeRecordDeleteArgs>(args: SelectSubset<T, PhoneChangeRecordDeleteArgs<ExtArgs>>): Prisma__PhoneChangeRecordClient<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PhoneChangeRecord.
     * @param {PhoneChangeRecordUpdateArgs} args - Arguments to update one PhoneChangeRecord.
     * @example
     * // Update one PhoneChangeRecord
     * const phoneChangeRecord = await prisma.phoneChangeRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhoneChangeRecordUpdateArgs>(args: SelectSubset<T, PhoneChangeRecordUpdateArgs<ExtArgs>>): Prisma__PhoneChangeRecordClient<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PhoneChangeRecords.
     * @param {PhoneChangeRecordDeleteManyArgs} args - Arguments to filter PhoneChangeRecords to delete.
     * @example
     * // Delete a few PhoneChangeRecords
     * const { count } = await prisma.phoneChangeRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhoneChangeRecordDeleteManyArgs>(args?: SelectSubset<T, PhoneChangeRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhoneChangeRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneChangeRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PhoneChangeRecords
     * const phoneChangeRecord = await prisma.phoneChangeRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhoneChangeRecordUpdateManyArgs>(args: SelectSubset<T, PhoneChangeRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhoneChangeRecords and returns the data updated in the database.
     * @param {PhoneChangeRecordUpdateManyAndReturnArgs} args - Arguments to update many PhoneChangeRecords.
     * @example
     * // Update many PhoneChangeRecords
     * const phoneChangeRecord = await prisma.phoneChangeRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PhoneChangeRecords and only return the `id`
     * const phoneChangeRecordWithIdOnly = await prisma.phoneChangeRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PhoneChangeRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, PhoneChangeRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PhoneChangeRecord.
     * @param {PhoneChangeRecordUpsertArgs} args - Arguments to update or create a PhoneChangeRecord.
     * @example
     * // Update or create a PhoneChangeRecord
     * const phoneChangeRecord = await prisma.phoneChangeRecord.upsert({
     *   create: {
     *     // ... data to create a PhoneChangeRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PhoneChangeRecord we want to update
     *   }
     * })
     */
    upsert<T extends PhoneChangeRecordUpsertArgs>(args: SelectSubset<T, PhoneChangeRecordUpsertArgs<ExtArgs>>): Prisma__PhoneChangeRecordClient<$Result.GetResult<Prisma.$PhoneChangeRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PhoneChangeRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneChangeRecordCountArgs} args - Arguments to filter PhoneChangeRecords to count.
     * @example
     * // Count the number of PhoneChangeRecords
     * const count = await prisma.phoneChangeRecord.count({
     *   where: {
     *     // ... the filter for the PhoneChangeRecords we want to count
     *   }
     * })
    **/
    count<T extends PhoneChangeRecordCountArgs>(
      args?: Subset<T, PhoneChangeRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhoneChangeRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PhoneChangeRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneChangeRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhoneChangeRecordAggregateArgs>(args: Subset<T, PhoneChangeRecordAggregateArgs>): Prisma.PrismaPromise<GetPhoneChangeRecordAggregateType<T>>

    /**
     * Group by PhoneChangeRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneChangeRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhoneChangeRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhoneChangeRecordGroupByArgs['orderBy'] }
        : { orderBy?: PhoneChangeRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhoneChangeRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhoneChangeRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PhoneChangeRecord model
   */
  readonly fields: PhoneChangeRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PhoneChangeRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhoneChangeRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PhoneChangeRecord model
   */
  interface PhoneChangeRecordFieldRefs {
    readonly id: FieldRef<"PhoneChangeRecord", 'String'>
    readonly phoneNumber: FieldRef<"PhoneChangeRecord", 'String'>
    readonly newPhoneNumber: FieldRef<"PhoneChangeRecord", 'String'>
    readonly otp: FieldRef<"PhoneChangeRecord", 'String'>
    readonly expiresAt: FieldRef<"PhoneChangeRecord", 'DateTime'>
    readonly attempts: FieldRef<"PhoneChangeRecord", 'Int'>
    readonly createdAt: FieldRef<"PhoneChangeRecord", 'DateTime'>
    readonly userId: FieldRef<"PhoneChangeRecord", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PhoneChangeRecord findUnique
   */
  export type PhoneChangeRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PhoneChangeRecord to fetch.
     */
    where: PhoneChangeRecordWhereUniqueInput
  }

  /**
   * PhoneChangeRecord findUniqueOrThrow
   */
  export type PhoneChangeRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PhoneChangeRecord to fetch.
     */
    where: PhoneChangeRecordWhereUniqueInput
  }

  /**
   * PhoneChangeRecord findFirst
   */
  export type PhoneChangeRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PhoneChangeRecord to fetch.
     */
    where?: PhoneChangeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhoneChangeRecords to fetch.
     */
    orderBy?: PhoneChangeRecordOrderByWithRelationInput | PhoneChangeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhoneChangeRecords.
     */
    cursor?: PhoneChangeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhoneChangeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhoneChangeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhoneChangeRecords.
     */
    distinct?: PhoneChangeRecordScalarFieldEnum | PhoneChangeRecordScalarFieldEnum[]
  }

  /**
   * PhoneChangeRecord findFirstOrThrow
   */
  export type PhoneChangeRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PhoneChangeRecord to fetch.
     */
    where?: PhoneChangeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhoneChangeRecords to fetch.
     */
    orderBy?: PhoneChangeRecordOrderByWithRelationInput | PhoneChangeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhoneChangeRecords.
     */
    cursor?: PhoneChangeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhoneChangeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhoneChangeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhoneChangeRecords.
     */
    distinct?: PhoneChangeRecordScalarFieldEnum | PhoneChangeRecordScalarFieldEnum[]
  }

  /**
   * PhoneChangeRecord findMany
   */
  export type PhoneChangeRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PhoneChangeRecords to fetch.
     */
    where?: PhoneChangeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhoneChangeRecords to fetch.
     */
    orderBy?: PhoneChangeRecordOrderByWithRelationInput | PhoneChangeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PhoneChangeRecords.
     */
    cursor?: PhoneChangeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhoneChangeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhoneChangeRecords.
     */
    skip?: number
    distinct?: PhoneChangeRecordScalarFieldEnum | PhoneChangeRecordScalarFieldEnum[]
  }

  /**
   * PhoneChangeRecord create
   */
  export type PhoneChangeRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a PhoneChangeRecord.
     */
    data: XOR<PhoneChangeRecordCreateInput, PhoneChangeRecordUncheckedCreateInput>
  }

  /**
   * PhoneChangeRecord createMany
   */
  export type PhoneChangeRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PhoneChangeRecords.
     */
    data: PhoneChangeRecordCreateManyInput | PhoneChangeRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PhoneChangeRecord createManyAndReturn
   */
  export type PhoneChangeRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * The data used to create many PhoneChangeRecords.
     */
    data: PhoneChangeRecordCreateManyInput | PhoneChangeRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PhoneChangeRecord update
   */
  export type PhoneChangeRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a PhoneChangeRecord.
     */
    data: XOR<PhoneChangeRecordUpdateInput, PhoneChangeRecordUncheckedUpdateInput>
    /**
     * Choose, which PhoneChangeRecord to update.
     */
    where: PhoneChangeRecordWhereUniqueInput
  }

  /**
   * PhoneChangeRecord updateMany
   */
  export type PhoneChangeRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PhoneChangeRecords.
     */
    data: XOR<PhoneChangeRecordUpdateManyMutationInput, PhoneChangeRecordUncheckedUpdateManyInput>
    /**
     * Filter which PhoneChangeRecords to update
     */
    where?: PhoneChangeRecordWhereInput
    /**
     * Limit how many PhoneChangeRecords to update.
     */
    limit?: number
  }

  /**
   * PhoneChangeRecord updateManyAndReturn
   */
  export type PhoneChangeRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * The data used to update PhoneChangeRecords.
     */
    data: XOR<PhoneChangeRecordUpdateManyMutationInput, PhoneChangeRecordUncheckedUpdateManyInput>
    /**
     * Filter which PhoneChangeRecords to update
     */
    where?: PhoneChangeRecordWhereInput
    /**
     * Limit how many PhoneChangeRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PhoneChangeRecord upsert
   */
  export type PhoneChangeRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the PhoneChangeRecord to update in case it exists.
     */
    where: PhoneChangeRecordWhereUniqueInput
    /**
     * In case the PhoneChangeRecord found by the `where` argument doesn't exist, create a new PhoneChangeRecord with this data.
     */
    create: XOR<PhoneChangeRecordCreateInput, PhoneChangeRecordUncheckedCreateInput>
    /**
     * In case the PhoneChangeRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhoneChangeRecordUpdateInput, PhoneChangeRecordUncheckedUpdateInput>
  }

  /**
   * PhoneChangeRecord delete
   */
  export type PhoneChangeRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
    /**
     * Filter which PhoneChangeRecord to delete.
     */
    where: PhoneChangeRecordWhereUniqueInput
  }

  /**
   * PhoneChangeRecord deleteMany
   */
  export type PhoneChangeRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhoneChangeRecords to delete
     */
    where?: PhoneChangeRecordWhereInput
    /**
     * Limit how many PhoneChangeRecords to delete.
     */
    limit?: number
  }

  /**
   * PhoneChangeRecord without action
   */
  export type PhoneChangeRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhoneChangeRecord
     */
    select?: PhoneChangeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhoneChangeRecord
     */
    omit?: PhoneChangeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhoneChangeRecordInclude<ExtArgs> | null
  }


  /**
   * Model RateLimit
   */

  export type AggregateRateLimit = {
    _count: RateLimitCountAggregateOutputType | null
    _avg: RateLimitAvgAggregateOutputType | null
    _sum: RateLimitSumAggregateOutputType | null
    _min: RateLimitMinAggregateOutputType | null
    _max: RateLimitMaxAggregateOutputType | null
  }

  export type RateLimitAvgAggregateOutputType = {
    count: number | null
  }

  export type RateLimitSumAggregateOutputType = {
    count: number | null
  }

  export type RateLimitMinAggregateOutputType = {
    id: string | null
    key: string | null
    count: number | null
    resetTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RateLimitMaxAggregateOutputType = {
    id: string | null
    key: string | null
    count: number | null
    resetTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RateLimitCountAggregateOutputType = {
    id: number
    key: number
    count: number
    resetTime: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RateLimitAvgAggregateInputType = {
    count?: true
  }

  export type RateLimitSumAggregateInputType = {
    count?: true
  }

  export type RateLimitMinAggregateInputType = {
    id?: true
    key?: true
    count?: true
    resetTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RateLimitMaxAggregateInputType = {
    id?: true
    key?: true
    count?: true
    resetTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RateLimitCountAggregateInputType = {
    id?: true
    key?: true
    count?: true
    resetTime?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RateLimitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RateLimit to aggregate.
     */
    where?: RateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateLimits to fetch.
     */
    orderBy?: RateLimitOrderByWithRelationInput | RateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RateLimits
    **/
    _count?: true | RateLimitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RateLimitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RateLimitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RateLimitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RateLimitMaxAggregateInputType
  }

  export type GetRateLimitAggregateType<T extends RateLimitAggregateArgs> = {
        [P in keyof T & keyof AggregateRateLimit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRateLimit[P]>
      : GetScalarType<T[P], AggregateRateLimit[P]>
  }




  export type RateLimitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateLimitWhereInput
    orderBy?: RateLimitOrderByWithAggregationInput | RateLimitOrderByWithAggregationInput[]
    by: RateLimitScalarFieldEnum[] | RateLimitScalarFieldEnum
    having?: RateLimitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RateLimitCountAggregateInputType | true
    _avg?: RateLimitAvgAggregateInputType
    _sum?: RateLimitSumAggregateInputType
    _min?: RateLimitMinAggregateInputType
    _max?: RateLimitMaxAggregateInputType
  }

  export type RateLimitGroupByOutputType = {
    id: string
    key: string
    count: number
    resetTime: Date
    createdAt: Date
    updatedAt: Date
    _count: RateLimitCountAggregateOutputType | null
    _avg: RateLimitAvgAggregateOutputType | null
    _sum: RateLimitSumAggregateOutputType | null
    _min: RateLimitMinAggregateOutputType | null
    _max: RateLimitMaxAggregateOutputType | null
  }

  type GetRateLimitGroupByPayload<T extends RateLimitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RateLimitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RateLimitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RateLimitGroupByOutputType[P]>
            : GetScalarType<T[P], RateLimitGroupByOutputType[P]>
        }
      >
    >


  export type RateLimitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    count?: boolean
    resetTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["rateLimit"]>

  export type RateLimitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    count?: boolean
    resetTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["rateLimit"]>

  export type RateLimitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    count?: boolean
    resetTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["rateLimit"]>

  export type RateLimitSelectScalar = {
    id?: boolean
    key?: boolean
    count?: boolean
    resetTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RateLimitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "count" | "resetTime" | "createdAt" | "updatedAt", ExtArgs["result"]["rateLimit"]>

  export type $RateLimitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RateLimit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      count: number
      resetTime: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rateLimit"]>
    composites: {}
  }

  type RateLimitGetPayload<S extends boolean | null | undefined | RateLimitDefaultArgs> = $Result.GetResult<Prisma.$RateLimitPayload, S>

  type RateLimitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RateLimitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RateLimitCountAggregateInputType | true
    }

  export interface RateLimitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RateLimit'], meta: { name: 'RateLimit' } }
    /**
     * Find zero or one RateLimit that matches the filter.
     * @param {RateLimitFindUniqueArgs} args - Arguments to find a RateLimit
     * @example
     * // Get one RateLimit
     * const rateLimit = await prisma.rateLimit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RateLimitFindUniqueArgs>(args: SelectSubset<T, RateLimitFindUniqueArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RateLimit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RateLimitFindUniqueOrThrowArgs} args - Arguments to find a RateLimit
     * @example
     * // Get one RateLimit
     * const rateLimit = await prisma.rateLimit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RateLimitFindUniqueOrThrowArgs>(args: SelectSubset<T, RateLimitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RateLimit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitFindFirstArgs} args - Arguments to find a RateLimit
     * @example
     * // Get one RateLimit
     * const rateLimit = await prisma.rateLimit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RateLimitFindFirstArgs>(args?: SelectSubset<T, RateLimitFindFirstArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RateLimit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitFindFirstOrThrowArgs} args - Arguments to find a RateLimit
     * @example
     * // Get one RateLimit
     * const rateLimit = await prisma.rateLimit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RateLimitFindFirstOrThrowArgs>(args?: SelectSubset<T, RateLimitFindFirstOrThrowArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RateLimits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RateLimits
     * const rateLimits = await prisma.rateLimit.findMany()
     * 
     * // Get first 10 RateLimits
     * const rateLimits = await prisma.rateLimit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rateLimitWithIdOnly = await prisma.rateLimit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RateLimitFindManyArgs>(args?: SelectSubset<T, RateLimitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RateLimit.
     * @param {RateLimitCreateArgs} args - Arguments to create a RateLimit.
     * @example
     * // Create one RateLimit
     * const RateLimit = await prisma.rateLimit.create({
     *   data: {
     *     // ... data to create a RateLimit
     *   }
     * })
     * 
     */
    create<T extends RateLimitCreateArgs>(args: SelectSubset<T, RateLimitCreateArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RateLimits.
     * @param {RateLimitCreateManyArgs} args - Arguments to create many RateLimits.
     * @example
     * // Create many RateLimits
     * const rateLimit = await prisma.rateLimit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RateLimitCreateManyArgs>(args?: SelectSubset<T, RateLimitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RateLimits and returns the data saved in the database.
     * @param {RateLimitCreateManyAndReturnArgs} args - Arguments to create many RateLimits.
     * @example
     * // Create many RateLimits
     * const rateLimit = await prisma.rateLimit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RateLimits and only return the `id`
     * const rateLimitWithIdOnly = await prisma.rateLimit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RateLimitCreateManyAndReturnArgs>(args?: SelectSubset<T, RateLimitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RateLimit.
     * @param {RateLimitDeleteArgs} args - Arguments to delete one RateLimit.
     * @example
     * // Delete one RateLimit
     * const RateLimit = await prisma.rateLimit.delete({
     *   where: {
     *     // ... filter to delete one RateLimit
     *   }
     * })
     * 
     */
    delete<T extends RateLimitDeleteArgs>(args: SelectSubset<T, RateLimitDeleteArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RateLimit.
     * @param {RateLimitUpdateArgs} args - Arguments to update one RateLimit.
     * @example
     * // Update one RateLimit
     * const rateLimit = await prisma.rateLimit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RateLimitUpdateArgs>(args: SelectSubset<T, RateLimitUpdateArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RateLimits.
     * @param {RateLimitDeleteManyArgs} args - Arguments to filter RateLimits to delete.
     * @example
     * // Delete a few RateLimits
     * const { count } = await prisma.rateLimit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RateLimitDeleteManyArgs>(args?: SelectSubset<T, RateLimitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RateLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RateLimits
     * const rateLimit = await prisma.rateLimit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RateLimitUpdateManyArgs>(args: SelectSubset<T, RateLimitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RateLimits and returns the data updated in the database.
     * @param {RateLimitUpdateManyAndReturnArgs} args - Arguments to update many RateLimits.
     * @example
     * // Update many RateLimits
     * const rateLimit = await prisma.rateLimit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RateLimits and only return the `id`
     * const rateLimitWithIdOnly = await prisma.rateLimit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RateLimitUpdateManyAndReturnArgs>(args: SelectSubset<T, RateLimitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RateLimit.
     * @param {RateLimitUpsertArgs} args - Arguments to update or create a RateLimit.
     * @example
     * // Update or create a RateLimit
     * const rateLimit = await prisma.rateLimit.upsert({
     *   create: {
     *     // ... data to create a RateLimit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RateLimit we want to update
     *   }
     * })
     */
    upsert<T extends RateLimitUpsertArgs>(args: SelectSubset<T, RateLimitUpsertArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RateLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitCountArgs} args - Arguments to filter RateLimits to count.
     * @example
     * // Count the number of RateLimits
     * const count = await prisma.rateLimit.count({
     *   where: {
     *     // ... the filter for the RateLimits we want to count
     *   }
     * })
    **/
    count<T extends RateLimitCountArgs>(
      args?: Subset<T, RateLimitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RateLimitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RateLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RateLimitAggregateArgs>(args: Subset<T, RateLimitAggregateArgs>): Prisma.PrismaPromise<GetRateLimitAggregateType<T>>

    /**
     * Group by RateLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RateLimitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RateLimitGroupByArgs['orderBy'] }
        : { orderBy?: RateLimitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RateLimitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateLimitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RateLimit model
   */
  readonly fields: RateLimitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RateLimit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RateLimitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RateLimit model
   */
  interface RateLimitFieldRefs {
    readonly id: FieldRef<"RateLimit", 'String'>
    readonly key: FieldRef<"RateLimit", 'String'>
    readonly count: FieldRef<"RateLimit", 'Int'>
    readonly resetTime: FieldRef<"RateLimit", 'DateTime'>
    readonly createdAt: FieldRef<"RateLimit", 'DateTime'>
    readonly updatedAt: FieldRef<"RateLimit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RateLimit findUnique
   */
  export type RateLimitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimit to fetch.
     */
    where: RateLimitWhereUniqueInput
  }

  /**
   * RateLimit findUniqueOrThrow
   */
  export type RateLimitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimit to fetch.
     */
    where: RateLimitWhereUniqueInput
  }

  /**
   * RateLimit findFirst
   */
  export type RateLimitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimit to fetch.
     */
    where?: RateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateLimits to fetch.
     */
    orderBy?: RateLimitOrderByWithRelationInput | RateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RateLimits.
     */
    cursor?: RateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RateLimits.
     */
    distinct?: RateLimitScalarFieldEnum | RateLimitScalarFieldEnum[]
  }

  /**
   * RateLimit findFirstOrThrow
   */
  export type RateLimitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimit to fetch.
     */
    where?: RateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateLimits to fetch.
     */
    orderBy?: RateLimitOrderByWithRelationInput | RateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RateLimits.
     */
    cursor?: RateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RateLimits.
     */
    distinct?: RateLimitScalarFieldEnum | RateLimitScalarFieldEnum[]
  }

  /**
   * RateLimit findMany
   */
  export type RateLimitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimits to fetch.
     */
    where?: RateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateLimits to fetch.
     */
    orderBy?: RateLimitOrderByWithRelationInput | RateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RateLimits.
     */
    cursor?: RateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateLimits.
     */
    skip?: number
    distinct?: RateLimitScalarFieldEnum | RateLimitScalarFieldEnum[]
  }

  /**
   * RateLimit create
   */
  export type RateLimitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The data needed to create a RateLimit.
     */
    data: XOR<RateLimitCreateInput, RateLimitUncheckedCreateInput>
  }

  /**
   * RateLimit createMany
   */
  export type RateLimitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RateLimits.
     */
    data: RateLimitCreateManyInput | RateLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RateLimit createManyAndReturn
   */
  export type RateLimitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The data used to create many RateLimits.
     */
    data: RateLimitCreateManyInput | RateLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RateLimit update
   */
  export type RateLimitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The data needed to update a RateLimit.
     */
    data: XOR<RateLimitUpdateInput, RateLimitUncheckedUpdateInput>
    /**
     * Choose, which RateLimit to update.
     */
    where: RateLimitWhereUniqueInput
  }

  /**
   * RateLimit updateMany
   */
  export type RateLimitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RateLimits.
     */
    data: XOR<RateLimitUpdateManyMutationInput, RateLimitUncheckedUpdateManyInput>
    /**
     * Filter which RateLimits to update
     */
    where?: RateLimitWhereInput
    /**
     * Limit how many RateLimits to update.
     */
    limit?: number
  }

  /**
   * RateLimit updateManyAndReturn
   */
  export type RateLimitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The data used to update RateLimits.
     */
    data: XOR<RateLimitUpdateManyMutationInput, RateLimitUncheckedUpdateManyInput>
    /**
     * Filter which RateLimits to update
     */
    where?: RateLimitWhereInput
    /**
     * Limit how many RateLimits to update.
     */
    limit?: number
  }

  /**
   * RateLimit upsert
   */
  export type RateLimitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The filter to search for the RateLimit to update in case it exists.
     */
    where: RateLimitWhereUniqueInput
    /**
     * In case the RateLimit found by the `where` argument doesn't exist, create a new RateLimit with this data.
     */
    create: XOR<RateLimitCreateInput, RateLimitUncheckedCreateInput>
    /**
     * In case the RateLimit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RateLimitUpdateInput, RateLimitUncheckedUpdateInput>
  }

  /**
   * RateLimit delete
   */
  export type RateLimitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter which RateLimit to delete.
     */
    where: RateLimitWhereUniqueInput
  }

  /**
   * RateLimit deleteMany
   */
  export type RateLimitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RateLimits to delete
     */
    where?: RateLimitWhereInput
    /**
     * Limit how many RateLimits to delete.
     */
    limit?: number
  }

  /**
   * RateLimit without action
   */
  export type RateLimitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
  }


  /**
   * Model Consumer
   */

  export type AggregateConsumer = {
    _count: ConsumerCountAggregateOutputType | null
    _min: ConsumerMinAggregateOutputType | null
    _max: ConsumerMaxAggregateOutputType | null
  }

  export type ConsumerMinAggregateOutputType = {
    id: string | null
    barcode: string | null
    userId: string | null
    gender: $Enums.Gender | null
    dateOfBirth: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsumerMaxAggregateOutputType = {
    id: string | null
    barcode: string | null
    userId: string | null
    gender: $Enums.Gender | null
    dateOfBirth: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsumerCountAggregateOutputType = {
    id: number
    barcode: number
    userId: number
    gender: number
    dateOfBirth: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConsumerMinAggregateInputType = {
    id?: true
    barcode?: true
    userId?: true
    gender?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsumerMaxAggregateInputType = {
    id?: true
    barcode?: true
    userId?: true
    gender?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsumerCountAggregateInputType = {
    id?: true
    barcode?: true
    userId?: true
    gender?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConsumerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consumer to aggregate.
     */
    where?: ConsumerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumers to fetch.
     */
    orderBy?: ConsumerOrderByWithRelationInput | ConsumerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsumerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consumers
    **/
    _count?: true | ConsumerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsumerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsumerMaxAggregateInputType
  }

  export type GetConsumerAggregateType<T extends ConsumerAggregateArgs> = {
        [P in keyof T & keyof AggregateConsumer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsumer[P]>
      : GetScalarType<T[P], AggregateConsumer[P]>
  }




  export type ConsumerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsumerWhereInput
    orderBy?: ConsumerOrderByWithAggregationInput | ConsumerOrderByWithAggregationInput[]
    by: ConsumerScalarFieldEnum[] | ConsumerScalarFieldEnum
    having?: ConsumerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsumerCountAggregateInputType | true
    _min?: ConsumerMinAggregateInputType
    _max?: ConsumerMaxAggregateInputType
  }

  export type ConsumerGroupByOutputType = {
    id: string
    barcode: string
    userId: string
    gender: $Enums.Gender | null
    dateOfBirth: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ConsumerCountAggregateOutputType | null
    _min: ConsumerMinAggregateOutputType | null
    _max: ConsumerMaxAggregateOutputType | null
  }

  type GetConsumerGroupByPayload<T extends ConsumerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsumerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsumerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsumerGroupByOutputType[P]>
            : GetScalarType<T[P], ConsumerGroupByOutputType[P]>
        }
      >
    >


  export type ConsumerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    userId?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    receipts?: boolean | Consumer$receiptsArgs<ExtArgs>
    _count?: boolean | ConsumerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumer"]>

  export type ConsumerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    userId?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumer"]>

  export type ConsumerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barcode?: boolean
    userId?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consumer"]>

  export type ConsumerSelectScalar = {
    id?: boolean
    barcode?: boolean
    userId?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConsumerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "barcode" | "userId" | "gender" | "dateOfBirth" | "createdAt" | "updatedAt", ExtArgs["result"]["consumer"]>
  export type ConsumerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    receipts?: boolean | Consumer$receiptsArgs<ExtArgs>
    _count?: boolean | ConsumerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsumerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ConsumerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ConsumerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consumer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      receipts: Prisma.$ReceiptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      barcode: string
      userId: string
      gender: $Enums.Gender | null
      dateOfBirth: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["consumer"]>
    composites: {}
  }

  type ConsumerGetPayload<S extends boolean | null | undefined | ConsumerDefaultArgs> = $Result.GetResult<Prisma.$ConsumerPayload, S>

  type ConsumerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsumerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsumerCountAggregateInputType | true
    }

  export interface ConsumerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consumer'], meta: { name: 'Consumer' } }
    /**
     * Find zero or one Consumer that matches the filter.
     * @param {ConsumerFindUniqueArgs} args - Arguments to find a Consumer
     * @example
     * // Get one Consumer
     * const consumer = await prisma.consumer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsumerFindUniqueArgs>(args: SelectSubset<T, ConsumerFindUniqueArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consumer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsumerFindUniqueOrThrowArgs} args - Arguments to find a Consumer
     * @example
     * // Get one Consumer
     * const consumer = await prisma.consumer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsumerFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsumerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consumer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerFindFirstArgs} args - Arguments to find a Consumer
     * @example
     * // Get one Consumer
     * const consumer = await prisma.consumer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsumerFindFirstArgs>(args?: SelectSubset<T, ConsumerFindFirstArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consumer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerFindFirstOrThrowArgs} args - Arguments to find a Consumer
     * @example
     * // Get one Consumer
     * const consumer = await prisma.consumer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsumerFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsumerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consumers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consumers
     * const consumers = await prisma.consumer.findMany()
     * 
     * // Get first 10 Consumers
     * const consumers = await prisma.consumer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consumerWithIdOnly = await prisma.consumer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsumerFindManyArgs>(args?: SelectSubset<T, ConsumerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consumer.
     * @param {ConsumerCreateArgs} args - Arguments to create a Consumer.
     * @example
     * // Create one Consumer
     * const Consumer = await prisma.consumer.create({
     *   data: {
     *     // ... data to create a Consumer
     *   }
     * })
     * 
     */
    create<T extends ConsumerCreateArgs>(args: SelectSubset<T, ConsumerCreateArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consumers.
     * @param {ConsumerCreateManyArgs} args - Arguments to create many Consumers.
     * @example
     * // Create many Consumers
     * const consumer = await prisma.consumer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsumerCreateManyArgs>(args?: SelectSubset<T, ConsumerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consumers and returns the data saved in the database.
     * @param {ConsumerCreateManyAndReturnArgs} args - Arguments to create many Consumers.
     * @example
     * // Create many Consumers
     * const consumer = await prisma.consumer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consumers and only return the `id`
     * const consumerWithIdOnly = await prisma.consumer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsumerCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsumerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Consumer.
     * @param {ConsumerDeleteArgs} args - Arguments to delete one Consumer.
     * @example
     * // Delete one Consumer
     * const Consumer = await prisma.consumer.delete({
     *   where: {
     *     // ... filter to delete one Consumer
     *   }
     * })
     * 
     */
    delete<T extends ConsumerDeleteArgs>(args: SelectSubset<T, ConsumerDeleteArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consumer.
     * @param {ConsumerUpdateArgs} args - Arguments to update one Consumer.
     * @example
     * // Update one Consumer
     * const consumer = await prisma.consumer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsumerUpdateArgs>(args: SelectSubset<T, ConsumerUpdateArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consumers.
     * @param {ConsumerDeleteManyArgs} args - Arguments to filter Consumers to delete.
     * @example
     * // Delete a few Consumers
     * const { count } = await prisma.consumer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsumerDeleteManyArgs>(args?: SelectSubset<T, ConsumerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consumers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consumers
     * const consumer = await prisma.consumer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsumerUpdateManyArgs>(args: SelectSubset<T, ConsumerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consumers and returns the data updated in the database.
     * @param {ConsumerUpdateManyAndReturnArgs} args - Arguments to update many Consumers.
     * @example
     * // Update many Consumers
     * const consumer = await prisma.consumer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consumers and only return the `id`
     * const consumerWithIdOnly = await prisma.consumer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsumerUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsumerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Consumer.
     * @param {ConsumerUpsertArgs} args - Arguments to update or create a Consumer.
     * @example
     * // Update or create a Consumer
     * const consumer = await prisma.consumer.upsert({
     *   create: {
     *     // ... data to create a Consumer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consumer we want to update
     *   }
     * })
     */
    upsert<T extends ConsumerUpsertArgs>(args: SelectSubset<T, ConsumerUpsertArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consumers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerCountArgs} args - Arguments to filter Consumers to count.
     * @example
     * // Count the number of Consumers
     * const count = await prisma.consumer.count({
     *   where: {
     *     // ... the filter for the Consumers we want to count
     *   }
     * })
    **/
    count<T extends ConsumerCountArgs>(
      args?: Subset<T, ConsumerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsumerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consumer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsumerAggregateArgs>(args: Subset<T, ConsumerAggregateArgs>): Prisma.PrismaPromise<GetConsumerAggregateType<T>>

    /**
     * Group by Consumer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsumerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsumerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsumerGroupByArgs['orderBy'] }
        : { orderBy?: ConsumerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsumerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsumerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consumer model
   */
  readonly fields: ConsumerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consumer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsumerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receipts<T extends Consumer$receiptsArgs<ExtArgs> = {}>(args?: Subset<T, Consumer$receiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consumer model
   */
  interface ConsumerFieldRefs {
    readonly id: FieldRef<"Consumer", 'String'>
    readonly barcode: FieldRef<"Consumer", 'String'>
    readonly userId: FieldRef<"Consumer", 'String'>
    readonly gender: FieldRef<"Consumer", 'Gender'>
    readonly dateOfBirth: FieldRef<"Consumer", 'DateTime'>
    readonly createdAt: FieldRef<"Consumer", 'DateTime'>
    readonly updatedAt: FieldRef<"Consumer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Consumer findUnique
   */
  export type ConsumerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumer to fetch.
     */
    where: ConsumerWhereUniqueInput
  }

  /**
   * Consumer findUniqueOrThrow
   */
  export type ConsumerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumer to fetch.
     */
    where: ConsumerWhereUniqueInput
  }

  /**
   * Consumer findFirst
   */
  export type ConsumerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumer to fetch.
     */
    where?: ConsumerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumers to fetch.
     */
    orderBy?: ConsumerOrderByWithRelationInput | ConsumerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consumers.
     */
    cursor?: ConsumerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consumers.
     */
    distinct?: ConsumerScalarFieldEnum | ConsumerScalarFieldEnum[]
  }

  /**
   * Consumer findFirstOrThrow
   */
  export type ConsumerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumer to fetch.
     */
    where?: ConsumerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumers to fetch.
     */
    orderBy?: ConsumerOrderByWithRelationInput | ConsumerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consumers.
     */
    cursor?: ConsumerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consumers.
     */
    distinct?: ConsumerScalarFieldEnum | ConsumerScalarFieldEnum[]
  }

  /**
   * Consumer findMany
   */
  export type ConsumerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter, which Consumers to fetch.
     */
    where?: ConsumerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consumers to fetch.
     */
    orderBy?: ConsumerOrderByWithRelationInput | ConsumerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consumers.
     */
    cursor?: ConsumerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consumers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consumers.
     */
    skip?: number
    distinct?: ConsumerScalarFieldEnum | ConsumerScalarFieldEnum[]
  }

  /**
   * Consumer create
   */
  export type ConsumerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * The data needed to create a Consumer.
     */
    data: XOR<ConsumerCreateInput, ConsumerUncheckedCreateInput>
  }

  /**
   * Consumer createMany
   */
  export type ConsumerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consumers.
     */
    data: ConsumerCreateManyInput | ConsumerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consumer createManyAndReturn
   */
  export type ConsumerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * The data used to create many Consumers.
     */
    data: ConsumerCreateManyInput | ConsumerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consumer update
   */
  export type ConsumerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * The data needed to update a Consumer.
     */
    data: XOR<ConsumerUpdateInput, ConsumerUncheckedUpdateInput>
    /**
     * Choose, which Consumer to update.
     */
    where: ConsumerWhereUniqueInput
  }

  /**
   * Consumer updateMany
   */
  export type ConsumerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consumers.
     */
    data: XOR<ConsumerUpdateManyMutationInput, ConsumerUncheckedUpdateManyInput>
    /**
     * Filter which Consumers to update
     */
    where?: ConsumerWhereInput
    /**
     * Limit how many Consumers to update.
     */
    limit?: number
  }

  /**
   * Consumer updateManyAndReturn
   */
  export type ConsumerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * The data used to update Consumers.
     */
    data: XOR<ConsumerUpdateManyMutationInput, ConsumerUncheckedUpdateManyInput>
    /**
     * Filter which Consumers to update
     */
    where?: ConsumerWhereInput
    /**
     * Limit how many Consumers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consumer upsert
   */
  export type ConsumerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * The filter to search for the Consumer to update in case it exists.
     */
    where: ConsumerWhereUniqueInput
    /**
     * In case the Consumer found by the `where` argument doesn't exist, create a new Consumer with this data.
     */
    create: XOR<ConsumerCreateInput, ConsumerUncheckedCreateInput>
    /**
     * In case the Consumer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsumerUpdateInput, ConsumerUncheckedUpdateInput>
  }

  /**
   * Consumer delete
   */
  export type ConsumerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
    /**
     * Filter which Consumer to delete.
     */
    where: ConsumerWhereUniqueInput
  }

  /**
   * Consumer deleteMany
   */
  export type ConsumerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consumers to delete
     */
    where?: ConsumerWhereInput
    /**
     * Limit how many Consumers to delete.
     */
    limit?: number
  }

  /**
   * Consumer.receipts
   */
  export type Consumer$receiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    cursor?: ReceiptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Consumer without action
   */
  export type ConsumerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consumer
     */
    select?: ConsumerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consumer
     */
    omit?: ConsumerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsumerInclude<ExtArgs> | null
  }


  /**
   * Model BusinessUserAccess
   */

  export type AggregateBusinessUserAccess = {
    _count: BusinessUserAccessCountAggregateOutputType | null
    _min: BusinessUserAccessMinAggregateOutputType | null
    _max: BusinessUserAccessMaxAggregateOutputType | null
  }

  export type BusinessUserAccessMinAggregateOutputType = {
    id: string | null
    userId: string | null
    accessLevel: $Enums.AccessLevel | null
    jobTitle: string | null
    merchantId: string | null
    brandId: string | null
    storeId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type BusinessUserAccessMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    accessLevel: $Enums.AccessLevel | null
    jobTitle: string | null
    merchantId: string | null
    brandId: string | null
    storeId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type BusinessUserAccessCountAggregateOutputType = {
    id: number
    userId: number
    accessLevel: number
    permissions: number
    jobTitle: number
    merchantId: number
    brandId: number
    storeId: number
    isActive: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type BusinessUserAccessMinAggregateInputType = {
    id?: true
    userId?: true
    accessLevel?: true
    jobTitle?: true
    merchantId?: true
    brandId?: true
    storeId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type BusinessUserAccessMaxAggregateInputType = {
    id?: true
    userId?: true
    accessLevel?: true
    jobTitle?: true
    merchantId?: true
    brandId?: true
    storeId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type BusinessUserAccessCountAggregateInputType = {
    id?: true
    userId?: true
    accessLevel?: true
    permissions?: true
    jobTitle?: true
    merchantId?: true
    brandId?: true
    storeId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type BusinessUserAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessUserAccess to aggregate.
     */
    where?: BusinessUserAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessUserAccesses to fetch.
     */
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessUserAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessUserAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessUserAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusinessUserAccesses
    **/
    _count?: true | BusinessUserAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessUserAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessUserAccessMaxAggregateInputType
  }

  export type GetBusinessUserAccessAggregateType<T extends BusinessUserAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinessUserAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessUserAccess[P]>
      : GetScalarType<T[P], AggregateBusinessUserAccess[P]>
  }




  export type BusinessUserAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessUserAccessWhereInput
    orderBy?: BusinessUserAccessOrderByWithAggregationInput | BusinessUserAccessOrderByWithAggregationInput[]
    by: BusinessUserAccessScalarFieldEnum[] | BusinessUserAccessScalarFieldEnum
    having?: BusinessUserAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessUserAccessCountAggregateInputType | true
    _min?: BusinessUserAccessMinAggregateInputType
    _max?: BusinessUserAccessMaxAggregateInputType
  }

  export type BusinessUserAccessGroupByOutputType = {
    id: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions: $Enums.Permission[]
    jobTitle: string | null
    merchantId: string | null
    brandId: string | null
    storeId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    _count: BusinessUserAccessCountAggregateOutputType | null
    _min: BusinessUserAccessMinAggregateOutputType | null
    _max: BusinessUserAccessMaxAggregateOutputType | null
  }

  type GetBusinessUserAccessGroupByPayload<T extends BusinessUserAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessUserAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessUserAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessUserAccessGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessUserAccessGroupByOutputType[P]>
        }
      >
    >


  export type BusinessUserAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accessLevel?: boolean
    permissions?: boolean
    jobTitle?: boolean
    merchantId?: boolean
    brandId?: boolean
    storeId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | BusinessUserAccess$merchantArgs<ExtArgs>
    brand?: boolean | BusinessUserAccess$brandArgs<ExtArgs>
    store?: boolean | BusinessUserAccess$storeArgs<ExtArgs>
    createdBy?: boolean | BusinessUserAccess$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["businessUserAccess"]>

  export type BusinessUserAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accessLevel?: boolean
    permissions?: boolean
    jobTitle?: boolean
    merchantId?: boolean
    brandId?: boolean
    storeId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | BusinessUserAccess$merchantArgs<ExtArgs>
    brand?: boolean | BusinessUserAccess$brandArgs<ExtArgs>
    store?: boolean | BusinessUserAccess$storeArgs<ExtArgs>
    createdBy?: boolean | BusinessUserAccess$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["businessUserAccess"]>

  export type BusinessUserAccessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accessLevel?: boolean
    permissions?: boolean
    jobTitle?: boolean
    merchantId?: boolean
    brandId?: boolean
    storeId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | BusinessUserAccess$merchantArgs<ExtArgs>
    brand?: boolean | BusinessUserAccess$brandArgs<ExtArgs>
    store?: boolean | BusinessUserAccess$storeArgs<ExtArgs>
    createdBy?: boolean | BusinessUserAccess$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["businessUserAccess"]>

  export type BusinessUserAccessSelectScalar = {
    id?: boolean
    userId?: boolean
    accessLevel?: boolean
    permissions?: boolean
    jobTitle?: boolean
    merchantId?: boolean
    brandId?: boolean
    storeId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type BusinessUserAccessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "accessLevel" | "permissions" | "jobTitle" | "merchantId" | "brandId" | "storeId" | "isActive" | "createdAt" | "updatedAt" | "createdById", ExtArgs["result"]["businessUserAccess"]>
  export type BusinessUserAccessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | BusinessUserAccess$merchantArgs<ExtArgs>
    brand?: boolean | BusinessUserAccess$brandArgs<ExtArgs>
    store?: boolean | BusinessUserAccess$storeArgs<ExtArgs>
    createdBy?: boolean | BusinessUserAccess$createdByArgs<ExtArgs>
  }
  export type BusinessUserAccessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | BusinessUserAccess$merchantArgs<ExtArgs>
    brand?: boolean | BusinessUserAccess$brandArgs<ExtArgs>
    store?: boolean | BusinessUserAccess$storeArgs<ExtArgs>
    createdBy?: boolean | BusinessUserAccess$createdByArgs<ExtArgs>
  }
  export type BusinessUserAccessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | BusinessUserAccess$merchantArgs<ExtArgs>
    brand?: boolean | BusinessUserAccess$brandArgs<ExtArgs>
    store?: boolean | BusinessUserAccess$storeArgs<ExtArgs>
    createdBy?: boolean | BusinessUserAccess$createdByArgs<ExtArgs>
  }

  export type $BusinessUserAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusinessUserAccess"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      merchant: Prisma.$MerchantPayload<ExtArgs> | null
      brand: Prisma.$BrandPayload<ExtArgs> | null
      store: Prisma.$StorePayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      accessLevel: $Enums.AccessLevel
      permissions: $Enums.Permission[]
      jobTitle: string | null
      merchantId: string | null
      brandId: string | null
      storeId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      createdById: string | null
    }, ExtArgs["result"]["businessUserAccess"]>
    composites: {}
  }

  type BusinessUserAccessGetPayload<S extends boolean | null | undefined | BusinessUserAccessDefaultArgs> = $Result.GetResult<Prisma.$BusinessUserAccessPayload, S>

  type BusinessUserAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BusinessUserAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BusinessUserAccessCountAggregateInputType | true
    }

  export interface BusinessUserAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessUserAccess'], meta: { name: 'BusinessUserAccess' } }
    /**
     * Find zero or one BusinessUserAccess that matches the filter.
     * @param {BusinessUserAccessFindUniqueArgs} args - Arguments to find a BusinessUserAccess
     * @example
     * // Get one BusinessUserAccess
     * const businessUserAccess = await prisma.businessUserAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessUserAccessFindUniqueArgs>(args: SelectSubset<T, BusinessUserAccessFindUniqueArgs<ExtArgs>>): Prisma__BusinessUserAccessClient<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BusinessUserAccess that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessUserAccessFindUniqueOrThrowArgs} args - Arguments to find a BusinessUserAccess
     * @example
     * // Get one BusinessUserAccess
     * const businessUserAccess = await prisma.businessUserAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessUserAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessUserAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessUserAccessClient<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessUserAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUserAccessFindFirstArgs} args - Arguments to find a BusinessUserAccess
     * @example
     * // Get one BusinessUserAccess
     * const businessUserAccess = await prisma.businessUserAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessUserAccessFindFirstArgs>(args?: SelectSubset<T, BusinessUserAccessFindFirstArgs<ExtArgs>>): Prisma__BusinessUserAccessClient<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessUserAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUserAccessFindFirstOrThrowArgs} args - Arguments to find a BusinessUserAccess
     * @example
     * // Get one BusinessUserAccess
     * const businessUserAccess = await prisma.businessUserAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessUserAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessUserAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessUserAccessClient<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BusinessUserAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUserAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessUserAccesses
     * const businessUserAccesses = await prisma.businessUserAccess.findMany()
     * 
     * // Get first 10 BusinessUserAccesses
     * const businessUserAccesses = await prisma.businessUserAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessUserAccessWithIdOnly = await prisma.businessUserAccess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessUserAccessFindManyArgs>(args?: SelectSubset<T, BusinessUserAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BusinessUserAccess.
     * @param {BusinessUserAccessCreateArgs} args - Arguments to create a BusinessUserAccess.
     * @example
     * // Create one BusinessUserAccess
     * const BusinessUserAccess = await prisma.businessUserAccess.create({
     *   data: {
     *     // ... data to create a BusinessUserAccess
     *   }
     * })
     * 
     */
    create<T extends BusinessUserAccessCreateArgs>(args: SelectSubset<T, BusinessUserAccessCreateArgs<ExtArgs>>): Prisma__BusinessUserAccessClient<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BusinessUserAccesses.
     * @param {BusinessUserAccessCreateManyArgs} args - Arguments to create many BusinessUserAccesses.
     * @example
     * // Create many BusinessUserAccesses
     * const businessUserAccess = await prisma.businessUserAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessUserAccessCreateManyArgs>(args?: SelectSubset<T, BusinessUserAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusinessUserAccesses and returns the data saved in the database.
     * @param {BusinessUserAccessCreateManyAndReturnArgs} args - Arguments to create many BusinessUserAccesses.
     * @example
     * // Create many BusinessUserAccesses
     * const businessUserAccess = await prisma.businessUserAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusinessUserAccesses and only return the `id`
     * const businessUserAccessWithIdOnly = await prisma.businessUserAccess.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessUserAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessUserAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BusinessUserAccess.
     * @param {BusinessUserAccessDeleteArgs} args - Arguments to delete one BusinessUserAccess.
     * @example
     * // Delete one BusinessUserAccess
     * const BusinessUserAccess = await prisma.businessUserAccess.delete({
     *   where: {
     *     // ... filter to delete one BusinessUserAccess
     *   }
     * })
     * 
     */
    delete<T extends BusinessUserAccessDeleteArgs>(args: SelectSubset<T, BusinessUserAccessDeleteArgs<ExtArgs>>): Prisma__BusinessUserAccessClient<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BusinessUserAccess.
     * @param {BusinessUserAccessUpdateArgs} args - Arguments to update one BusinessUserAccess.
     * @example
     * // Update one BusinessUserAccess
     * const businessUserAccess = await prisma.businessUserAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessUserAccessUpdateArgs>(args: SelectSubset<T, BusinessUserAccessUpdateArgs<ExtArgs>>): Prisma__BusinessUserAccessClient<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BusinessUserAccesses.
     * @param {BusinessUserAccessDeleteManyArgs} args - Arguments to filter BusinessUserAccesses to delete.
     * @example
     * // Delete a few BusinessUserAccesses
     * const { count } = await prisma.businessUserAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessUserAccessDeleteManyArgs>(args?: SelectSubset<T, BusinessUserAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessUserAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUserAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessUserAccesses
     * const businessUserAccess = await prisma.businessUserAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessUserAccessUpdateManyArgs>(args: SelectSubset<T, BusinessUserAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessUserAccesses and returns the data updated in the database.
     * @param {BusinessUserAccessUpdateManyAndReturnArgs} args - Arguments to update many BusinessUserAccesses.
     * @example
     * // Update many BusinessUserAccesses
     * const businessUserAccess = await prisma.businessUserAccess.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BusinessUserAccesses and only return the `id`
     * const businessUserAccessWithIdOnly = await prisma.businessUserAccess.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BusinessUserAccessUpdateManyAndReturnArgs>(args: SelectSubset<T, BusinessUserAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BusinessUserAccess.
     * @param {BusinessUserAccessUpsertArgs} args - Arguments to update or create a BusinessUserAccess.
     * @example
     * // Update or create a BusinessUserAccess
     * const businessUserAccess = await prisma.businessUserAccess.upsert({
     *   create: {
     *     // ... data to create a BusinessUserAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessUserAccess we want to update
     *   }
     * })
     */
    upsert<T extends BusinessUserAccessUpsertArgs>(args: SelectSubset<T, BusinessUserAccessUpsertArgs<ExtArgs>>): Prisma__BusinessUserAccessClient<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BusinessUserAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUserAccessCountArgs} args - Arguments to filter BusinessUserAccesses to count.
     * @example
     * // Count the number of BusinessUserAccesses
     * const count = await prisma.businessUserAccess.count({
     *   where: {
     *     // ... the filter for the BusinessUserAccesses we want to count
     *   }
     * })
    **/
    count<T extends BusinessUserAccessCountArgs>(
      args?: Subset<T, BusinessUserAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessUserAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusinessUserAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUserAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessUserAccessAggregateArgs>(args: Subset<T, BusinessUserAccessAggregateArgs>): Prisma.PrismaPromise<GetBusinessUserAccessAggregateType<T>>

    /**
     * Group by BusinessUserAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUserAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessUserAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessUserAccessGroupByArgs['orderBy'] }
        : { orderBy?: BusinessUserAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessUserAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessUserAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusinessUserAccess model
   */
  readonly fields: BusinessUserAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessUserAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessUserAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    merchant<T extends BusinessUserAccess$merchantArgs<ExtArgs> = {}>(args?: Subset<T, BusinessUserAccess$merchantArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    brand<T extends BusinessUserAccess$brandArgs<ExtArgs> = {}>(args?: Subset<T, BusinessUserAccess$brandArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    store<T extends BusinessUserAccess$storeArgs<ExtArgs> = {}>(args?: Subset<T, BusinessUserAccess$storeArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends BusinessUserAccess$createdByArgs<ExtArgs> = {}>(args?: Subset<T, BusinessUserAccess$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BusinessUserAccess model
   */
  interface BusinessUserAccessFieldRefs {
    readonly id: FieldRef<"BusinessUserAccess", 'String'>
    readonly userId: FieldRef<"BusinessUserAccess", 'String'>
    readonly accessLevel: FieldRef<"BusinessUserAccess", 'AccessLevel'>
    readonly permissions: FieldRef<"BusinessUserAccess", 'Permission[]'>
    readonly jobTitle: FieldRef<"BusinessUserAccess", 'String'>
    readonly merchantId: FieldRef<"BusinessUserAccess", 'String'>
    readonly brandId: FieldRef<"BusinessUserAccess", 'String'>
    readonly storeId: FieldRef<"BusinessUserAccess", 'String'>
    readonly isActive: FieldRef<"BusinessUserAccess", 'Boolean'>
    readonly createdAt: FieldRef<"BusinessUserAccess", 'DateTime'>
    readonly updatedAt: FieldRef<"BusinessUserAccess", 'DateTime'>
    readonly createdById: FieldRef<"BusinessUserAccess", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BusinessUserAccess findUnique
   */
  export type BusinessUserAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * Filter, which BusinessUserAccess to fetch.
     */
    where: BusinessUserAccessWhereUniqueInput
  }

  /**
   * BusinessUserAccess findUniqueOrThrow
   */
  export type BusinessUserAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * Filter, which BusinessUserAccess to fetch.
     */
    where: BusinessUserAccessWhereUniqueInput
  }

  /**
   * BusinessUserAccess findFirst
   */
  export type BusinessUserAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * Filter, which BusinessUserAccess to fetch.
     */
    where?: BusinessUserAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessUserAccesses to fetch.
     */
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessUserAccesses.
     */
    cursor?: BusinessUserAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessUserAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessUserAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessUserAccesses.
     */
    distinct?: BusinessUserAccessScalarFieldEnum | BusinessUserAccessScalarFieldEnum[]
  }

  /**
   * BusinessUserAccess findFirstOrThrow
   */
  export type BusinessUserAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * Filter, which BusinessUserAccess to fetch.
     */
    where?: BusinessUserAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessUserAccesses to fetch.
     */
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessUserAccesses.
     */
    cursor?: BusinessUserAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessUserAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessUserAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessUserAccesses.
     */
    distinct?: BusinessUserAccessScalarFieldEnum | BusinessUserAccessScalarFieldEnum[]
  }

  /**
   * BusinessUserAccess findMany
   */
  export type BusinessUserAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * Filter, which BusinessUserAccesses to fetch.
     */
    where?: BusinessUserAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessUserAccesses to fetch.
     */
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusinessUserAccesses.
     */
    cursor?: BusinessUserAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessUserAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessUserAccesses.
     */
    skip?: number
    distinct?: BusinessUserAccessScalarFieldEnum | BusinessUserAccessScalarFieldEnum[]
  }

  /**
   * BusinessUserAccess create
   */
  export type BusinessUserAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * The data needed to create a BusinessUserAccess.
     */
    data: XOR<BusinessUserAccessCreateInput, BusinessUserAccessUncheckedCreateInput>
  }

  /**
   * BusinessUserAccess createMany
   */
  export type BusinessUserAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusinessUserAccesses.
     */
    data: BusinessUserAccessCreateManyInput | BusinessUserAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusinessUserAccess createManyAndReturn
   */
  export type BusinessUserAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * The data used to create many BusinessUserAccesses.
     */
    data: BusinessUserAccessCreateManyInput | BusinessUserAccessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessUserAccess update
   */
  export type BusinessUserAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * The data needed to update a BusinessUserAccess.
     */
    data: XOR<BusinessUserAccessUpdateInput, BusinessUserAccessUncheckedUpdateInput>
    /**
     * Choose, which BusinessUserAccess to update.
     */
    where: BusinessUserAccessWhereUniqueInput
  }

  /**
   * BusinessUserAccess updateMany
   */
  export type BusinessUserAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusinessUserAccesses.
     */
    data: XOR<BusinessUserAccessUpdateManyMutationInput, BusinessUserAccessUncheckedUpdateManyInput>
    /**
     * Filter which BusinessUserAccesses to update
     */
    where?: BusinessUserAccessWhereInput
    /**
     * Limit how many BusinessUserAccesses to update.
     */
    limit?: number
  }

  /**
   * BusinessUserAccess updateManyAndReturn
   */
  export type BusinessUserAccessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * The data used to update BusinessUserAccesses.
     */
    data: XOR<BusinessUserAccessUpdateManyMutationInput, BusinessUserAccessUncheckedUpdateManyInput>
    /**
     * Filter which BusinessUserAccesses to update
     */
    where?: BusinessUserAccessWhereInput
    /**
     * Limit how many BusinessUserAccesses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessUserAccess upsert
   */
  export type BusinessUserAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * The filter to search for the BusinessUserAccess to update in case it exists.
     */
    where: BusinessUserAccessWhereUniqueInput
    /**
     * In case the BusinessUserAccess found by the `where` argument doesn't exist, create a new BusinessUserAccess with this data.
     */
    create: XOR<BusinessUserAccessCreateInput, BusinessUserAccessUncheckedCreateInput>
    /**
     * In case the BusinessUserAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessUserAccessUpdateInput, BusinessUserAccessUncheckedUpdateInput>
  }

  /**
   * BusinessUserAccess delete
   */
  export type BusinessUserAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    /**
     * Filter which BusinessUserAccess to delete.
     */
    where: BusinessUserAccessWhereUniqueInput
  }

  /**
   * BusinessUserAccess deleteMany
   */
  export type BusinessUserAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessUserAccesses to delete
     */
    where?: BusinessUserAccessWhereInput
    /**
     * Limit how many BusinessUserAccesses to delete.
     */
    limit?: number
  }

  /**
   * BusinessUserAccess.merchant
   */
  export type BusinessUserAccess$merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
  }

  /**
   * BusinessUserAccess.brand
   */
  export type BusinessUserAccess$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
  }

  /**
   * BusinessUserAccess.store
   */
  export type BusinessUserAccess$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
  }

  /**
   * BusinessUserAccess.createdBy
   */
  export type BusinessUserAccess$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * BusinessUserAccess without action
   */
  export type BusinessUserAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
  }


  /**
   * Model Currency
   */

  export type AggregateCurrency = {
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  export type CurrencyAvgAggregateOutputType = {
    decimals: number | null
    ISOnum: number | null
    ISOdigits: number | null
    numToBasic: number | null
  }

  export type CurrencySumAggregateOutputType = {
    decimals: number | null
    ISOnum: number | null
    ISOdigits: number | null
    numToBasic: number | null
  }

  export type CurrencyMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    symbol: string | null
    decimals: number | null
    demonym: string | null
    majorSingle: string | null
    majorPlural: string | null
    ISOnum: number | null
    symbolNative: string | null
    minorSingle: string | null
    minorPlural: string | null
    ISOdigits: number | null
    numToBasic: number | null
  }

  export type CurrencyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    symbol: string | null
    decimals: number | null
    demonym: string | null
    majorSingle: string | null
    majorPlural: string | null
    ISOnum: number | null
    symbolNative: string | null
    minorSingle: string | null
    minorPlural: string | null
    ISOdigits: number | null
    numToBasic: number | null
  }

  export type CurrencyCountAggregateOutputType = {
    id: number
    name: number
    code: number
    symbol: number
    decimals: number
    demonym: number
    majorSingle: number
    majorPlural: number
    ISOnum: number
    symbolNative: number
    minorSingle: number
    minorPlural: number
    ISOdigits: number
    numToBasic: number
    _all: number
  }


  export type CurrencyAvgAggregateInputType = {
    decimals?: true
    ISOnum?: true
    ISOdigits?: true
    numToBasic?: true
  }

  export type CurrencySumAggregateInputType = {
    decimals?: true
    ISOnum?: true
    ISOdigits?: true
    numToBasic?: true
  }

  export type CurrencyMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    symbol?: true
    decimals?: true
    demonym?: true
    majorSingle?: true
    majorPlural?: true
    ISOnum?: true
    symbolNative?: true
    minorSingle?: true
    minorPlural?: true
    ISOdigits?: true
    numToBasic?: true
  }

  export type CurrencyMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    symbol?: true
    decimals?: true
    demonym?: true
    majorSingle?: true
    majorPlural?: true
    ISOnum?: true
    symbolNative?: true
    minorSingle?: true
    minorPlural?: true
    ISOdigits?: true
    numToBasic?: true
  }

  export type CurrencyCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    symbol?: true
    decimals?: true
    demonym?: true
    majorSingle?: true
    majorPlural?: true
    ISOnum?: true
    symbolNative?: true
    minorSingle?: true
    minorPlural?: true
    ISOdigits?: true
    numToBasic?: true
    _all?: true
  }

  export type CurrencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currency to aggregate.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Currencies
    **/
    _count?: true | CurrencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrencyMaxAggregateInputType
  }

  export type GetCurrencyAggregateType<T extends CurrencyAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrency[P]>
      : GetScalarType<T[P], AggregateCurrency[P]>
  }




  export type CurrencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyWhereInput
    orderBy?: CurrencyOrderByWithAggregationInput | CurrencyOrderByWithAggregationInput[]
    by: CurrencyScalarFieldEnum[] | CurrencyScalarFieldEnum
    having?: CurrencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrencyCountAggregateInputType | true
    _avg?: CurrencyAvgAggregateInputType
    _sum?: CurrencySumAggregateInputType
    _min?: CurrencyMinAggregateInputType
    _max?: CurrencyMaxAggregateInputType
  }

  export type CurrencyGroupByOutputType = {
    id: string
    name: string
    code: string
    symbol: string | null
    decimals: number | null
    demonym: string | null
    majorSingle: string | null
    majorPlural: string | null
    ISOnum: number | null
    symbolNative: string
    minorSingle: string | null
    minorPlural: string | null
    ISOdigits: number | null
    numToBasic: number | null
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  type GetCurrencyGroupByPayload<T extends CurrencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurrencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
            : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
        }
      >
    >


  export type CurrencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    symbol?: boolean
    decimals?: boolean
    demonym?: boolean
    majorSingle?: boolean
    majorPlural?: boolean
    ISOnum?: boolean
    symbolNative?: boolean
    minorSingle?: boolean
    minorPlural?: boolean
    ISOdigits?: boolean
    numToBasic?: boolean
    countries?: boolean | Currency$countriesArgs<ExtArgs>
    stores?: boolean | Currency$storesArgs<ExtArgs>
    _count?: boolean | CurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    symbol?: boolean
    decimals?: boolean
    demonym?: boolean
    majorSingle?: boolean
    majorPlural?: boolean
    ISOnum?: boolean
    symbolNative?: boolean
    minorSingle?: boolean
    minorPlural?: boolean
    ISOdigits?: boolean
    numToBasic?: boolean
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    symbol?: boolean
    decimals?: boolean
    demonym?: boolean
    majorSingle?: boolean
    majorPlural?: boolean
    ISOnum?: boolean
    symbolNative?: boolean
    minorSingle?: boolean
    minorPlural?: boolean
    ISOdigits?: boolean
    numToBasic?: boolean
  }, ExtArgs["result"]["currency"]>

  export type CurrencySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    symbol?: boolean
    decimals?: boolean
    demonym?: boolean
    majorSingle?: boolean
    majorPlural?: boolean
    ISOnum?: boolean
    symbolNative?: boolean
    minorSingle?: boolean
    minorPlural?: boolean
    ISOdigits?: boolean
    numToBasic?: boolean
  }

  export type CurrencyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "symbol" | "decimals" | "demonym" | "majorSingle" | "majorPlural" | "ISOnum" | "symbolNative" | "minorSingle" | "minorPlural" | "ISOdigits" | "numToBasic", ExtArgs["result"]["currency"]>
  export type CurrencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    countries?: boolean | Currency$countriesArgs<ExtArgs>
    stores?: boolean | Currency$storesArgs<ExtArgs>
    _count?: boolean | CurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CurrencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CurrencyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CurrencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Currency"
    objects: {
      countries: Prisma.$CountryPayload<ExtArgs>[]
      stores: Prisma.$StorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      symbol: string | null
      decimals: number | null
      demonym: string | null
      majorSingle: string | null
      majorPlural: string | null
      ISOnum: number | null
      symbolNative: string
      minorSingle: string | null
      minorPlural: string | null
      ISOdigits: number | null
      numToBasic: number | null
    }, ExtArgs["result"]["currency"]>
    composites: {}
  }

  type CurrencyGetPayload<S extends boolean | null | undefined | CurrencyDefaultArgs> = $Result.GetResult<Prisma.$CurrencyPayload, S>

  type CurrencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CurrencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CurrencyCountAggregateInputType | true
    }

  export interface CurrencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Currency'], meta: { name: 'Currency' } }
    /**
     * Find zero or one Currency that matches the filter.
     * @param {CurrencyFindUniqueArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CurrencyFindUniqueArgs>(args: SelectSubset<T, CurrencyFindUniqueArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Currency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CurrencyFindUniqueOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CurrencyFindUniqueOrThrowArgs>(args: SelectSubset<T, CurrencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CurrencyFindFirstArgs>(args?: SelectSubset<T, CurrencyFindFirstArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Currency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstOrThrowArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CurrencyFindFirstOrThrowArgs>(args?: SelectSubset<T, CurrencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Currencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Currencies
     * const currencies = await prisma.currency.findMany()
     * 
     * // Get first 10 Currencies
     * const currencies = await prisma.currency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currencyWithIdOnly = await prisma.currency.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CurrencyFindManyArgs>(args?: SelectSubset<T, CurrencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Currency.
     * @param {CurrencyCreateArgs} args - Arguments to create a Currency.
     * @example
     * // Create one Currency
     * const Currency = await prisma.currency.create({
     *   data: {
     *     // ... data to create a Currency
     *   }
     * })
     * 
     */
    create<T extends CurrencyCreateArgs>(args: SelectSubset<T, CurrencyCreateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Currencies.
     * @param {CurrencyCreateManyArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CurrencyCreateManyArgs>(args?: SelectSubset<T, CurrencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Currencies and returns the data saved in the database.
     * @param {CurrencyCreateManyAndReturnArgs} args - Arguments to create many Currencies.
     * @example
     * // Create many Currencies
     * const currency = await prisma.currency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CurrencyCreateManyAndReturnArgs>(args?: SelectSubset<T, CurrencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Currency.
     * @param {CurrencyDeleteArgs} args - Arguments to delete one Currency.
     * @example
     * // Delete one Currency
     * const Currency = await prisma.currency.delete({
     *   where: {
     *     // ... filter to delete one Currency
     *   }
     * })
     * 
     */
    delete<T extends CurrencyDeleteArgs>(args: SelectSubset<T, CurrencyDeleteArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Currency.
     * @param {CurrencyUpdateArgs} args - Arguments to update one Currency.
     * @example
     * // Update one Currency
     * const currency = await prisma.currency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CurrencyUpdateArgs>(args: SelectSubset<T, CurrencyUpdateArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Currencies.
     * @param {CurrencyDeleteManyArgs} args - Arguments to filter Currencies to delete.
     * @example
     * // Delete a few Currencies
     * const { count } = await prisma.currency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CurrencyDeleteManyArgs>(args?: SelectSubset<T, CurrencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CurrencyUpdateManyArgs>(args: SelectSubset<T, CurrencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies and returns the data updated in the database.
     * @param {CurrencyUpdateManyAndReturnArgs} args - Arguments to update many Currencies.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Currencies and only return the `id`
     * const currencyWithIdOnly = await prisma.currency.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CurrencyUpdateManyAndReturnArgs>(args: SelectSubset<T, CurrencyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Currency.
     * @param {CurrencyUpsertArgs} args - Arguments to update or create a Currency.
     * @example
     * // Update or create a Currency
     * const currency = await prisma.currency.upsert({
     *   create: {
     *     // ... data to create a Currency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Currency we want to update
     *   }
     * })
     */
    upsert<T extends CurrencyUpsertArgs>(args: SelectSubset<T, CurrencyUpsertArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyCountArgs} args - Arguments to filter Currencies to count.
     * @example
     * // Count the number of Currencies
     * const count = await prisma.currency.count({
     *   where: {
     *     // ... the filter for the Currencies we want to count
     *   }
     * })
    **/
    count<T extends CurrencyCountArgs>(
      args?: Subset<T, CurrencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrencyAggregateArgs>(args: Subset<T, CurrencyAggregateArgs>): Prisma.PrismaPromise<GetCurrencyAggregateType<T>>

    /**
     * Group by Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrencyGroupByArgs['orderBy'] }
        : { orderBy?: CurrencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Currency model
   */
  readonly fields: CurrencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Currency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurrencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    countries<T extends Currency$countriesArgs<ExtArgs> = {}>(args?: Subset<T, Currency$countriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stores<T extends Currency$storesArgs<ExtArgs> = {}>(args?: Subset<T, Currency$storesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Currency model
   */
  interface CurrencyFieldRefs {
    readonly id: FieldRef<"Currency", 'String'>
    readonly name: FieldRef<"Currency", 'String'>
    readonly code: FieldRef<"Currency", 'String'>
    readonly symbol: FieldRef<"Currency", 'String'>
    readonly decimals: FieldRef<"Currency", 'Int'>
    readonly demonym: FieldRef<"Currency", 'String'>
    readonly majorSingle: FieldRef<"Currency", 'String'>
    readonly majorPlural: FieldRef<"Currency", 'String'>
    readonly ISOnum: FieldRef<"Currency", 'Int'>
    readonly symbolNative: FieldRef<"Currency", 'String'>
    readonly minorSingle: FieldRef<"Currency", 'String'>
    readonly minorPlural: FieldRef<"Currency", 'String'>
    readonly ISOdigits: FieldRef<"Currency", 'Int'>
    readonly numToBasic: FieldRef<"Currency", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Currency findUnique
   */
  export type CurrencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findUniqueOrThrow
   */
  export type CurrencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency findFirst
   */
  export type CurrencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findFirstOrThrow
   */
  export type CurrencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currency to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     */
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency findMany
   */
  export type CurrencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Currencies to fetch.
     */
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     */
    orderBy?: CurrencyOrderByWithRelationInput | CurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Currencies.
     */
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     */
    skip?: number
    distinct?: CurrencyScalarFieldEnum | CurrencyScalarFieldEnum[]
  }

  /**
   * Currency create
   */
  export type CurrencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Currency.
     */
    data: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
  }

  /**
   * Currency createMany
   */
  export type CurrencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency createManyAndReturn
   */
  export type CurrencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to create many Currencies.
     */
    data: CurrencyCreateManyInput | CurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Currency update
   */
  export type CurrencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Currency.
     */
    data: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
    /**
     * Choose, which Currency to update.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency updateMany
   */
  export type CurrencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency updateManyAndReturn
   */
  export type CurrencyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * The data used to update Currencies.
     */
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to update.
     */
    limit?: number
  }

  /**
   * Currency upsert
   */
  export type CurrencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Currency to update in case it exists.
     */
    where: CurrencyWhereUniqueInput
    /**
     * In case the Currency found by the `where` argument doesn't exist, create a new Currency with this data.
     */
    create: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
    /**
     * In case the Currency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
  }

  /**
   * Currency delete
   */
  export type CurrencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
    /**
     * Filter which Currency to delete.
     */
    where: CurrencyWhereUniqueInput
  }

  /**
   * Currency deleteMany
   */
  export type CurrencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Currencies to delete
     */
    where?: CurrencyWhereInput
    /**
     * Limit how many Currencies to delete.
     */
    limit?: number
  }

  /**
   * Currency.countries
   */
  export type Currency$countriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    cursor?: CountryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Currency.stores
   */
  export type Currency$storesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    cursor?: StoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Currency without action
   */
  export type CurrencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Currency
     */
    select?: CurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Currency
     */
    omit?: CurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyInclude<ExtArgs> | null
  }


  /**
   * Model Continent
   */

  export type AggregateContinent = {
    _count: ContinentCountAggregateOutputType | null
    _min: ContinentMinAggregateOutputType | null
    _max: ContinentMaxAggregateOutputType | null
  }

  export type ContinentMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ContinentMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ContinentCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ContinentMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ContinentMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ContinentCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ContinentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Continent to aggregate.
     */
    where?: ContinentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Continents to fetch.
     */
    orderBy?: ContinentOrderByWithRelationInput | ContinentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContinentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Continents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Continents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Continents
    **/
    _count?: true | ContinentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContinentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContinentMaxAggregateInputType
  }

  export type GetContinentAggregateType<T extends ContinentAggregateArgs> = {
        [P in keyof T & keyof AggregateContinent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContinent[P]>
      : GetScalarType<T[P], AggregateContinent[P]>
  }




  export type ContinentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContinentWhereInput
    orderBy?: ContinentOrderByWithAggregationInput | ContinentOrderByWithAggregationInput[]
    by: ContinentScalarFieldEnum[] | ContinentScalarFieldEnum
    having?: ContinentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContinentCountAggregateInputType | true
    _min?: ContinentMinAggregateInputType
    _max?: ContinentMaxAggregateInputType
  }

  export type ContinentGroupByOutputType = {
    id: string
    name: string
    _count: ContinentCountAggregateOutputType | null
    _min: ContinentMinAggregateOutputType | null
    _max: ContinentMaxAggregateOutputType | null
  }

  type GetContinentGroupByPayload<T extends ContinentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContinentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContinentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContinentGroupByOutputType[P]>
            : GetScalarType<T[P], ContinentGroupByOutputType[P]>
        }
      >
    >


  export type ContinentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    countries?: boolean | Continent$countriesArgs<ExtArgs>
    _count?: boolean | ContinentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["continent"]>

  export type ContinentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["continent"]>

  export type ContinentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["continent"]>

  export type ContinentSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ContinentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["continent"]>
  export type ContinentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    countries?: boolean | Continent$countriesArgs<ExtArgs>
    _count?: boolean | ContinentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContinentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ContinentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContinentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Continent"
    objects: {
      countries: Prisma.$CountryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["continent"]>
    composites: {}
  }

  type ContinentGetPayload<S extends boolean | null | undefined | ContinentDefaultArgs> = $Result.GetResult<Prisma.$ContinentPayload, S>

  type ContinentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContinentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContinentCountAggregateInputType | true
    }

  export interface ContinentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Continent'], meta: { name: 'Continent' } }
    /**
     * Find zero or one Continent that matches the filter.
     * @param {ContinentFindUniqueArgs} args - Arguments to find a Continent
     * @example
     * // Get one Continent
     * const continent = await prisma.continent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContinentFindUniqueArgs>(args: SelectSubset<T, ContinentFindUniqueArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Continent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContinentFindUniqueOrThrowArgs} args - Arguments to find a Continent
     * @example
     * // Get one Continent
     * const continent = await prisma.continent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContinentFindUniqueOrThrowArgs>(args: SelectSubset<T, ContinentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Continent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContinentFindFirstArgs} args - Arguments to find a Continent
     * @example
     * // Get one Continent
     * const continent = await prisma.continent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContinentFindFirstArgs>(args?: SelectSubset<T, ContinentFindFirstArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Continent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContinentFindFirstOrThrowArgs} args - Arguments to find a Continent
     * @example
     * // Get one Continent
     * const continent = await prisma.continent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContinentFindFirstOrThrowArgs>(args?: SelectSubset<T, ContinentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Continents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContinentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Continents
     * const continents = await prisma.continent.findMany()
     * 
     * // Get first 10 Continents
     * const continents = await prisma.continent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const continentWithIdOnly = await prisma.continent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContinentFindManyArgs>(args?: SelectSubset<T, ContinentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Continent.
     * @param {ContinentCreateArgs} args - Arguments to create a Continent.
     * @example
     * // Create one Continent
     * const Continent = await prisma.continent.create({
     *   data: {
     *     // ... data to create a Continent
     *   }
     * })
     * 
     */
    create<T extends ContinentCreateArgs>(args: SelectSubset<T, ContinentCreateArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Continents.
     * @param {ContinentCreateManyArgs} args - Arguments to create many Continents.
     * @example
     * // Create many Continents
     * const continent = await prisma.continent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContinentCreateManyArgs>(args?: SelectSubset<T, ContinentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Continents and returns the data saved in the database.
     * @param {ContinentCreateManyAndReturnArgs} args - Arguments to create many Continents.
     * @example
     * // Create many Continents
     * const continent = await prisma.continent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Continents and only return the `id`
     * const continentWithIdOnly = await prisma.continent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContinentCreateManyAndReturnArgs>(args?: SelectSubset<T, ContinentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Continent.
     * @param {ContinentDeleteArgs} args - Arguments to delete one Continent.
     * @example
     * // Delete one Continent
     * const Continent = await prisma.continent.delete({
     *   where: {
     *     // ... filter to delete one Continent
     *   }
     * })
     * 
     */
    delete<T extends ContinentDeleteArgs>(args: SelectSubset<T, ContinentDeleteArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Continent.
     * @param {ContinentUpdateArgs} args - Arguments to update one Continent.
     * @example
     * // Update one Continent
     * const continent = await prisma.continent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContinentUpdateArgs>(args: SelectSubset<T, ContinentUpdateArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Continents.
     * @param {ContinentDeleteManyArgs} args - Arguments to filter Continents to delete.
     * @example
     * // Delete a few Continents
     * const { count } = await prisma.continent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContinentDeleteManyArgs>(args?: SelectSubset<T, ContinentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Continents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContinentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Continents
     * const continent = await prisma.continent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContinentUpdateManyArgs>(args: SelectSubset<T, ContinentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Continents and returns the data updated in the database.
     * @param {ContinentUpdateManyAndReturnArgs} args - Arguments to update many Continents.
     * @example
     * // Update many Continents
     * const continent = await prisma.continent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Continents and only return the `id`
     * const continentWithIdOnly = await prisma.continent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContinentUpdateManyAndReturnArgs>(args: SelectSubset<T, ContinentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Continent.
     * @param {ContinentUpsertArgs} args - Arguments to update or create a Continent.
     * @example
     * // Update or create a Continent
     * const continent = await prisma.continent.upsert({
     *   create: {
     *     // ... data to create a Continent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Continent we want to update
     *   }
     * })
     */
    upsert<T extends ContinentUpsertArgs>(args: SelectSubset<T, ContinentUpsertArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Continents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContinentCountArgs} args - Arguments to filter Continents to count.
     * @example
     * // Count the number of Continents
     * const count = await prisma.continent.count({
     *   where: {
     *     // ... the filter for the Continents we want to count
     *   }
     * })
    **/
    count<T extends ContinentCountArgs>(
      args?: Subset<T, ContinentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContinentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Continent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContinentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContinentAggregateArgs>(args: Subset<T, ContinentAggregateArgs>): Prisma.PrismaPromise<GetContinentAggregateType<T>>

    /**
     * Group by Continent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContinentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContinentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContinentGroupByArgs['orderBy'] }
        : { orderBy?: ContinentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContinentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContinentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Continent model
   */
  readonly fields: ContinentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Continent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContinentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    countries<T extends Continent$countriesArgs<ExtArgs> = {}>(args?: Subset<T, Continent$countriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Continent model
   */
  interface ContinentFieldRefs {
    readonly id: FieldRef<"Continent", 'String'>
    readonly name: FieldRef<"Continent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Continent findUnique
   */
  export type ContinentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * Filter, which Continent to fetch.
     */
    where: ContinentWhereUniqueInput
  }

  /**
   * Continent findUniqueOrThrow
   */
  export type ContinentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * Filter, which Continent to fetch.
     */
    where: ContinentWhereUniqueInput
  }

  /**
   * Continent findFirst
   */
  export type ContinentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * Filter, which Continent to fetch.
     */
    where?: ContinentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Continents to fetch.
     */
    orderBy?: ContinentOrderByWithRelationInput | ContinentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Continents.
     */
    cursor?: ContinentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Continents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Continents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Continents.
     */
    distinct?: ContinentScalarFieldEnum | ContinentScalarFieldEnum[]
  }

  /**
   * Continent findFirstOrThrow
   */
  export type ContinentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * Filter, which Continent to fetch.
     */
    where?: ContinentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Continents to fetch.
     */
    orderBy?: ContinentOrderByWithRelationInput | ContinentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Continents.
     */
    cursor?: ContinentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Continents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Continents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Continents.
     */
    distinct?: ContinentScalarFieldEnum | ContinentScalarFieldEnum[]
  }

  /**
   * Continent findMany
   */
  export type ContinentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * Filter, which Continents to fetch.
     */
    where?: ContinentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Continents to fetch.
     */
    orderBy?: ContinentOrderByWithRelationInput | ContinentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Continents.
     */
    cursor?: ContinentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Continents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Continents.
     */
    skip?: number
    distinct?: ContinentScalarFieldEnum | ContinentScalarFieldEnum[]
  }

  /**
   * Continent create
   */
  export type ContinentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * The data needed to create a Continent.
     */
    data: XOR<ContinentCreateInput, ContinentUncheckedCreateInput>
  }

  /**
   * Continent createMany
   */
  export type ContinentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Continents.
     */
    data: ContinentCreateManyInput | ContinentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Continent createManyAndReturn
   */
  export type ContinentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * The data used to create many Continents.
     */
    data: ContinentCreateManyInput | ContinentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Continent update
   */
  export type ContinentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * The data needed to update a Continent.
     */
    data: XOR<ContinentUpdateInput, ContinentUncheckedUpdateInput>
    /**
     * Choose, which Continent to update.
     */
    where: ContinentWhereUniqueInput
  }

  /**
   * Continent updateMany
   */
  export type ContinentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Continents.
     */
    data: XOR<ContinentUpdateManyMutationInput, ContinentUncheckedUpdateManyInput>
    /**
     * Filter which Continents to update
     */
    where?: ContinentWhereInput
    /**
     * Limit how many Continents to update.
     */
    limit?: number
  }

  /**
   * Continent updateManyAndReturn
   */
  export type ContinentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * The data used to update Continents.
     */
    data: XOR<ContinentUpdateManyMutationInput, ContinentUncheckedUpdateManyInput>
    /**
     * Filter which Continents to update
     */
    where?: ContinentWhereInput
    /**
     * Limit how many Continents to update.
     */
    limit?: number
  }

  /**
   * Continent upsert
   */
  export type ContinentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * The filter to search for the Continent to update in case it exists.
     */
    where: ContinentWhereUniqueInput
    /**
     * In case the Continent found by the `where` argument doesn't exist, create a new Continent with this data.
     */
    create: XOR<ContinentCreateInput, ContinentUncheckedCreateInput>
    /**
     * In case the Continent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContinentUpdateInput, ContinentUncheckedUpdateInput>
  }

  /**
   * Continent delete
   */
  export type ContinentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
    /**
     * Filter which Continent to delete.
     */
    where: ContinentWhereUniqueInput
  }

  /**
   * Continent deleteMany
   */
  export type ContinentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Continents to delete
     */
    where?: ContinentWhereInput
    /**
     * Limit how many Continents to delete.
     */
    limit?: number
  }

  /**
   * Continent.countries
   */
  export type Continent$countriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    cursor?: CountryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Continent without action
   */
  export type ContinentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Continent
     */
    select?: ContinentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Continent
     */
    omit?: ContinentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContinentInclude<ExtArgs> | null
  }


  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type CountrySumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: string | null
    isoCode: string | null
    isoCode3: string | null
    name: string | null
    flag: string | null
    latitude: number | null
    longitude: number | null
    currencyId: string | null
    continentId: string | null
    phonePrefix: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CountryMaxAggregateOutputType = {
    id: string | null
    isoCode: string | null
    isoCode3: string | null
    name: string | null
    flag: string | null
    latitude: number | null
    longitude: number | null
    currencyId: string | null
    continentId: string | null
    phonePrefix: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    isoCode: number
    isoCode3: number
    name: number
    flag: number
    latitude: number
    longitude: number
    currencyId: number
    continentId: number
    phonePrefix: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type CountrySumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    isoCode?: true
    isoCode3?: true
    name?: true
    flag?: true
    latitude?: true
    longitude?: true
    currencyId?: true
    continentId?: true
    phonePrefix?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    isoCode?: true
    isoCode3?: true
    name?: true
    flag?: true
    latitude?: true
    longitude?: true
    currencyId?: true
    continentId?: true
    phonePrefix?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    isoCode?: true
    isoCode3?: true
    name?: true
    flag?: true
    latitude?: true
    longitude?: true
    currencyId?: true
    continentId?: true
    phonePrefix?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    continentId: string
    phonePrefix: string | null
    createdAt: Date
    updatedAt: Date
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    isoCode3?: boolean
    name?: boolean
    flag?: boolean
    latitude?: boolean
    longitude?: boolean
    currencyId?: boolean
    continentId?: boolean
    phonePrefix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    continent?: boolean | ContinentDefaultArgs<ExtArgs>
    regions?: boolean | Country$regionsArgs<ExtArgs>
    merchants?: boolean | Country$merchantsArgs<ExtArgs>
    brands?: boolean | Country$brandsArgs<ExtArgs>
    stores?: boolean | Country$storesArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    isoCode3?: boolean
    name?: boolean
    flag?: boolean
    latitude?: boolean
    longitude?: boolean
    currencyId?: boolean
    continentId?: boolean
    phonePrefix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    continent?: boolean | ContinentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isoCode?: boolean
    isoCode3?: boolean
    name?: boolean
    flag?: boolean
    latitude?: boolean
    longitude?: boolean
    currencyId?: boolean
    continentId?: boolean
    phonePrefix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    continent?: boolean | ContinentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    isoCode?: boolean
    isoCode3?: boolean
    name?: boolean
    flag?: boolean
    latitude?: boolean
    longitude?: boolean
    currencyId?: boolean
    continentId?: boolean
    phonePrefix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CountryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isoCode" | "isoCode3" | "name" | "flag" | "latitude" | "longitude" | "currencyId" | "continentId" | "phonePrefix" | "createdAt" | "updatedAt", ExtArgs["result"]["country"]>
  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    continent?: boolean | ContinentDefaultArgs<ExtArgs>
    regions?: boolean | Country$regionsArgs<ExtArgs>
    merchants?: boolean | Country$merchantsArgs<ExtArgs>
    brands?: boolean | Country$brandsArgs<ExtArgs>
    stores?: boolean | Country$storesArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CountryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    continent?: boolean | ContinentDefaultArgs<ExtArgs>
  }
  export type CountryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    continent?: boolean | ContinentDefaultArgs<ExtArgs>
  }

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      currency: Prisma.$CurrencyPayload<ExtArgs>
      continent: Prisma.$ContinentPayload<ExtArgs>
      regions: Prisma.$RegionPayload<ExtArgs>[]
      merchants: Prisma.$MerchantPayload<ExtArgs>[]
      brands: Prisma.$BrandPayload<ExtArgs>[]
      stores: Prisma.$StorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isoCode: string
      isoCode3: string
      name: string
      flag: string
      latitude: number
      longitude: number
      currencyId: string
      continentId: string
      phonePrefix: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountryFindUniqueArgs>(args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(args: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountryFindFirstArgs>(args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CountryFindManyArgs>(args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends CountryCreateArgs>(args: SelectSubset<T, CountryCreateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountryCreateManyArgs>(args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {CountryCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CountryCreateManyAndReturnArgs>(args?: SelectSubset<T, CountryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends CountryDeleteArgs>(args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountryUpdateArgs>(args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountryDeleteManyArgs>(args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountryUpdateManyArgs>(args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries and returns the data updated in the database.
     * @param {CountryUpdateManyAndReturnArgs} args - Arguments to update many Countries.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CountryUpdateManyAndReturnArgs>(args: SelectSubset<T, CountryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends CountryUpsertArgs>(args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    currency<T extends CurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CurrencyDefaultArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    continent<T extends ContinentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContinentDefaultArgs<ExtArgs>>): Prisma__ContinentClient<$Result.GetResult<Prisma.$ContinentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    regions<T extends Country$regionsArgs<ExtArgs> = {}>(args?: Subset<T, Country$regionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    merchants<T extends Country$merchantsArgs<ExtArgs> = {}>(args?: Subset<T, Country$merchantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    brands<T extends Country$brandsArgs<ExtArgs> = {}>(args?: Subset<T, Country$brandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stores<T extends Country$storesArgs<ExtArgs> = {}>(args?: Subset<T, Country$storesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Country model
   */
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'String'>
    readonly isoCode: FieldRef<"Country", 'String'>
    readonly isoCode3: FieldRef<"Country", 'String'>
    readonly name: FieldRef<"Country", 'String'>
    readonly flag: FieldRef<"Country", 'String'>
    readonly latitude: FieldRef<"Country", 'Float'>
    readonly longitude: FieldRef<"Country", 'Float'>
    readonly currencyId: FieldRef<"Country", 'String'>
    readonly continentId: FieldRef<"Country", 'String'>
    readonly phonePrefix: FieldRef<"Country", 'String'>
    readonly createdAt: FieldRef<"Country", 'DateTime'>
    readonly updatedAt: FieldRef<"Country", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country createManyAndReturn
   */
  export type CountryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country updateManyAndReturn
   */
  export type CountryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to delete.
     */
    limit?: number
  }

  /**
   * Country.regions
   */
  export type Country$regionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    cursor?: RegionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Country.merchants
   */
  export type Country$merchantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    cursor?: MerchantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Country.brands
   */
  export type Country$brandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Country.stores
   */
  export type Country$storesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    cursor?: StoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    countryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegionMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    countryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    code: number
    name: number
    countryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    countryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: string
    code: string
    name: string
    countryId: string
    createdAt: Date
    updatedAt: Date
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    merchants?: boolean | Region$merchantsArgs<ExtArgs>
    brands?: boolean | Region$brandsArgs<ExtArgs>
    stores?: boolean | Region$storesArgs<ExtArgs>
    users?: boolean | Region$usersArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    countryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RegionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "countryId" | "createdAt" | "updatedAt", ExtArgs["result"]["region"]>
  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    merchants?: boolean | Region$merchantsArgs<ExtArgs>
    brands?: boolean | Region$brandsArgs<ExtArgs>
    stores?: boolean | Region$storesArgs<ExtArgs>
    users?: boolean | Region$usersArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }
  export type RegionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs>
      merchants: Prisma.$MerchantPayload<ExtArgs>[]
      brands: Prisma.$BrandPayload<ExtArgs>[]
      stores: Prisma.$StorePayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      countryId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions and returns the data updated in the database.
     * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    merchants<T extends Region$merchantsArgs<ExtArgs> = {}>(args?: Subset<T, Region$merchantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    brands<T extends Region$brandsArgs<ExtArgs> = {}>(args?: Subset<T, Region$brandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stores<T extends Region$storesArgs<ExtArgs> = {}>(args?: Subset<T, Region$storesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Region$usersArgs<ExtArgs> = {}>(args?: Subset<T, Region$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'String'>
    readonly code: FieldRef<"Region", 'String'>
    readonly name: FieldRef<"Region", 'String'>
    readonly countryId: FieldRef<"Region", 'String'>
    readonly createdAt: FieldRef<"Region", 'DateTime'>
    readonly updatedAt: FieldRef<"Region", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region updateManyAndReturn
   */
  export type RegionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to delete.
     */
    limit?: number
  }

  /**
   * Region.merchants
   */
  export type Region$merchantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    cursor?: MerchantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Region.brands
   */
  export type Region$brandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Region.stores
   */
  export type Region$storesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    cursor?: StoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Region.users
   */
  export type Region$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model BusinessRegistration
   */

  export type AggregateBusinessRegistration = {
    _count: BusinessRegistrationCountAggregateOutputType | null
    _min: BusinessRegistrationMinAggregateOutputType | null
    _max: BusinessRegistrationMaxAggregateOutputType | null
  }

  export type BusinessRegistrationMinAggregateOutputType = {
    id: string | null
    type: $Enums.BusinessRegistrationType | null
    number: string | null
    issuingBody: string | null
    validFrom: Date | null
    validUntil: Date | null
    isActive: boolean | null
    merchantId: string | null
    brandId: string | null
    storeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BusinessRegistrationMaxAggregateOutputType = {
    id: string | null
    type: $Enums.BusinessRegistrationType | null
    number: string | null
    issuingBody: string | null
    validFrom: Date | null
    validUntil: Date | null
    isActive: boolean | null
    merchantId: string | null
    brandId: string | null
    storeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BusinessRegistrationCountAggregateOutputType = {
    id: number
    type: number
    number: number
    issuingBody: number
    validFrom: number
    validUntil: number
    isActive: number
    merchantId: number
    brandId: number
    storeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BusinessRegistrationMinAggregateInputType = {
    id?: true
    type?: true
    number?: true
    issuingBody?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    merchantId?: true
    brandId?: true
    storeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BusinessRegistrationMaxAggregateInputType = {
    id?: true
    type?: true
    number?: true
    issuingBody?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    merchantId?: true
    brandId?: true
    storeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BusinessRegistrationCountAggregateInputType = {
    id?: true
    type?: true
    number?: true
    issuingBody?: true
    validFrom?: true
    validUntil?: true
    isActive?: true
    merchantId?: true
    brandId?: true
    storeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BusinessRegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessRegistration to aggregate.
     */
    where?: BusinessRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessRegistrations to fetch.
     */
    orderBy?: BusinessRegistrationOrderByWithRelationInput | BusinessRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusinessRegistrations
    **/
    _count?: true | BusinessRegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessRegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessRegistrationMaxAggregateInputType
  }

  export type GetBusinessRegistrationAggregateType<T extends BusinessRegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinessRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessRegistration[P]>
      : GetScalarType<T[P], AggregateBusinessRegistration[P]>
  }




  export type BusinessRegistrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessRegistrationWhereInput
    orderBy?: BusinessRegistrationOrderByWithAggregationInput | BusinessRegistrationOrderByWithAggregationInput[]
    by: BusinessRegistrationScalarFieldEnum[] | BusinessRegistrationScalarFieldEnum
    having?: BusinessRegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessRegistrationCountAggregateInputType | true
    _min?: BusinessRegistrationMinAggregateInputType
    _max?: BusinessRegistrationMaxAggregateInputType
  }

  export type BusinessRegistrationGroupByOutputType = {
    id: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody: string | null
    validFrom: Date | null
    validUntil: Date | null
    isActive: boolean
    merchantId: string | null
    brandId: string | null
    storeId: string | null
    createdAt: Date
    updatedAt: Date
    _count: BusinessRegistrationCountAggregateOutputType | null
    _min: BusinessRegistrationMinAggregateOutputType | null
    _max: BusinessRegistrationMaxAggregateOutputType | null
  }

  type GetBusinessRegistrationGroupByPayload<T extends BusinessRegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessRegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessRegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessRegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessRegistrationGroupByOutputType[P]>
        }
      >
    >


  export type BusinessRegistrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    number?: boolean
    issuingBody?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    merchantId?: boolean
    brandId?: boolean
    storeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | BusinessRegistration$merchantArgs<ExtArgs>
    brand?: boolean | BusinessRegistration$brandArgs<ExtArgs>
    store?: boolean | BusinessRegistration$storeArgs<ExtArgs>
  }, ExtArgs["result"]["businessRegistration"]>

  export type BusinessRegistrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    number?: boolean
    issuingBody?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    merchantId?: boolean
    brandId?: boolean
    storeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | BusinessRegistration$merchantArgs<ExtArgs>
    brand?: boolean | BusinessRegistration$brandArgs<ExtArgs>
    store?: boolean | BusinessRegistration$storeArgs<ExtArgs>
  }, ExtArgs["result"]["businessRegistration"]>

  export type BusinessRegistrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    number?: boolean
    issuingBody?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    merchantId?: boolean
    brandId?: boolean
    storeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | BusinessRegistration$merchantArgs<ExtArgs>
    brand?: boolean | BusinessRegistration$brandArgs<ExtArgs>
    store?: boolean | BusinessRegistration$storeArgs<ExtArgs>
  }, ExtArgs["result"]["businessRegistration"]>

  export type BusinessRegistrationSelectScalar = {
    id?: boolean
    type?: boolean
    number?: boolean
    issuingBody?: boolean
    validFrom?: boolean
    validUntil?: boolean
    isActive?: boolean
    merchantId?: boolean
    brandId?: boolean
    storeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BusinessRegistrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "number" | "issuingBody" | "validFrom" | "validUntil" | "isActive" | "merchantId" | "brandId" | "storeId" | "createdAt" | "updatedAt", ExtArgs["result"]["businessRegistration"]>
  export type BusinessRegistrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | BusinessRegistration$merchantArgs<ExtArgs>
    brand?: boolean | BusinessRegistration$brandArgs<ExtArgs>
    store?: boolean | BusinessRegistration$storeArgs<ExtArgs>
  }
  export type BusinessRegistrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | BusinessRegistration$merchantArgs<ExtArgs>
    brand?: boolean | BusinessRegistration$brandArgs<ExtArgs>
    store?: boolean | BusinessRegistration$storeArgs<ExtArgs>
  }
  export type BusinessRegistrationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | BusinessRegistration$merchantArgs<ExtArgs>
    brand?: boolean | BusinessRegistration$brandArgs<ExtArgs>
    store?: boolean | BusinessRegistration$storeArgs<ExtArgs>
  }

  export type $BusinessRegistrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusinessRegistration"
    objects: {
      merchant: Prisma.$MerchantPayload<ExtArgs> | null
      brand: Prisma.$BrandPayload<ExtArgs> | null
      store: Prisma.$StorePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.BusinessRegistrationType
      number: string
      issuingBody: string | null
      validFrom: Date | null
      validUntil: Date | null
      isActive: boolean
      merchantId: string | null
      brandId: string | null
      storeId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["businessRegistration"]>
    composites: {}
  }

  type BusinessRegistrationGetPayload<S extends boolean | null | undefined | BusinessRegistrationDefaultArgs> = $Result.GetResult<Prisma.$BusinessRegistrationPayload, S>

  type BusinessRegistrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BusinessRegistrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BusinessRegistrationCountAggregateInputType | true
    }

  export interface BusinessRegistrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessRegistration'], meta: { name: 'BusinessRegistration' } }
    /**
     * Find zero or one BusinessRegistration that matches the filter.
     * @param {BusinessRegistrationFindUniqueArgs} args - Arguments to find a BusinessRegistration
     * @example
     * // Get one BusinessRegistration
     * const businessRegistration = await prisma.businessRegistration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessRegistrationFindUniqueArgs>(args: SelectSubset<T, BusinessRegistrationFindUniqueArgs<ExtArgs>>): Prisma__BusinessRegistrationClient<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BusinessRegistration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessRegistrationFindUniqueOrThrowArgs} args - Arguments to find a BusinessRegistration
     * @example
     * // Get one BusinessRegistration
     * const businessRegistration = await prisma.businessRegistration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessRegistrationFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessRegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessRegistrationClient<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessRegistration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRegistrationFindFirstArgs} args - Arguments to find a BusinessRegistration
     * @example
     * // Get one BusinessRegistration
     * const businessRegistration = await prisma.businessRegistration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessRegistrationFindFirstArgs>(args?: SelectSubset<T, BusinessRegistrationFindFirstArgs<ExtArgs>>): Prisma__BusinessRegistrationClient<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessRegistration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRegistrationFindFirstOrThrowArgs} args - Arguments to find a BusinessRegistration
     * @example
     * // Get one BusinessRegistration
     * const businessRegistration = await prisma.businessRegistration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessRegistrationFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessRegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessRegistrationClient<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BusinessRegistrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessRegistrations
     * const businessRegistrations = await prisma.businessRegistration.findMany()
     * 
     * // Get first 10 BusinessRegistrations
     * const businessRegistrations = await prisma.businessRegistration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessRegistrationWithIdOnly = await prisma.businessRegistration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessRegistrationFindManyArgs>(args?: SelectSubset<T, BusinessRegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BusinessRegistration.
     * @param {BusinessRegistrationCreateArgs} args - Arguments to create a BusinessRegistration.
     * @example
     * // Create one BusinessRegistration
     * const BusinessRegistration = await prisma.businessRegistration.create({
     *   data: {
     *     // ... data to create a BusinessRegistration
     *   }
     * })
     * 
     */
    create<T extends BusinessRegistrationCreateArgs>(args: SelectSubset<T, BusinessRegistrationCreateArgs<ExtArgs>>): Prisma__BusinessRegistrationClient<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BusinessRegistrations.
     * @param {BusinessRegistrationCreateManyArgs} args - Arguments to create many BusinessRegistrations.
     * @example
     * // Create many BusinessRegistrations
     * const businessRegistration = await prisma.businessRegistration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessRegistrationCreateManyArgs>(args?: SelectSubset<T, BusinessRegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusinessRegistrations and returns the data saved in the database.
     * @param {BusinessRegistrationCreateManyAndReturnArgs} args - Arguments to create many BusinessRegistrations.
     * @example
     * // Create many BusinessRegistrations
     * const businessRegistration = await prisma.businessRegistration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusinessRegistrations and only return the `id`
     * const businessRegistrationWithIdOnly = await prisma.businessRegistration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessRegistrationCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessRegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BusinessRegistration.
     * @param {BusinessRegistrationDeleteArgs} args - Arguments to delete one BusinessRegistration.
     * @example
     * // Delete one BusinessRegistration
     * const BusinessRegistration = await prisma.businessRegistration.delete({
     *   where: {
     *     // ... filter to delete one BusinessRegistration
     *   }
     * })
     * 
     */
    delete<T extends BusinessRegistrationDeleteArgs>(args: SelectSubset<T, BusinessRegistrationDeleteArgs<ExtArgs>>): Prisma__BusinessRegistrationClient<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BusinessRegistration.
     * @param {BusinessRegistrationUpdateArgs} args - Arguments to update one BusinessRegistration.
     * @example
     * // Update one BusinessRegistration
     * const businessRegistration = await prisma.businessRegistration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessRegistrationUpdateArgs>(args: SelectSubset<T, BusinessRegistrationUpdateArgs<ExtArgs>>): Prisma__BusinessRegistrationClient<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BusinessRegistrations.
     * @param {BusinessRegistrationDeleteManyArgs} args - Arguments to filter BusinessRegistrations to delete.
     * @example
     * // Delete a few BusinessRegistrations
     * const { count } = await prisma.businessRegistration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessRegistrationDeleteManyArgs>(args?: SelectSubset<T, BusinessRegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessRegistrations
     * const businessRegistration = await prisma.businessRegistration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessRegistrationUpdateManyArgs>(args: SelectSubset<T, BusinessRegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessRegistrations and returns the data updated in the database.
     * @param {BusinessRegistrationUpdateManyAndReturnArgs} args - Arguments to update many BusinessRegistrations.
     * @example
     * // Update many BusinessRegistrations
     * const businessRegistration = await prisma.businessRegistration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BusinessRegistrations and only return the `id`
     * const businessRegistrationWithIdOnly = await prisma.businessRegistration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BusinessRegistrationUpdateManyAndReturnArgs>(args: SelectSubset<T, BusinessRegistrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BusinessRegistration.
     * @param {BusinessRegistrationUpsertArgs} args - Arguments to update or create a BusinessRegistration.
     * @example
     * // Update or create a BusinessRegistration
     * const businessRegistration = await prisma.businessRegistration.upsert({
     *   create: {
     *     // ... data to create a BusinessRegistration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessRegistration we want to update
     *   }
     * })
     */
    upsert<T extends BusinessRegistrationUpsertArgs>(args: SelectSubset<T, BusinessRegistrationUpsertArgs<ExtArgs>>): Prisma__BusinessRegistrationClient<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BusinessRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRegistrationCountArgs} args - Arguments to filter BusinessRegistrations to count.
     * @example
     * // Count the number of BusinessRegistrations
     * const count = await prisma.businessRegistration.count({
     *   where: {
     *     // ... the filter for the BusinessRegistrations we want to count
     *   }
     * })
    **/
    count<T extends BusinessRegistrationCountArgs>(
      args?: Subset<T, BusinessRegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessRegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusinessRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessRegistrationAggregateArgs>(args: Subset<T, BusinessRegistrationAggregateArgs>): Prisma.PrismaPromise<GetBusinessRegistrationAggregateType<T>>

    /**
     * Group by BusinessRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessRegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessRegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessRegistrationGroupByArgs['orderBy'] }
        : { orderBy?: BusinessRegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusinessRegistration model
   */
  readonly fields: BusinessRegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessRegistration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessRegistrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    merchant<T extends BusinessRegistration$merchantArgs<ExtArgs> = {}>(args?: Subset<T, BusinessRegistration$merchantArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    brand<T extends BusinessRegistration$brandArgs<ExtArgs> = {}>(args?: Subset<T, BusinessRegistration$brandArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    store<T extends BusinessRegistration$storeArgs<ExtArgs> = {}>(args?: Subset<T, BusinessRegistration$storeArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BusinessRegistration model
   */
  interface BusinessRegistrationFieldRefs {
    readonly id: FieldRef<"BusinessRegistration", 'String'>
    readonly type: FieldRef<"BusinessRegistration", 'BusinessRegistrationType'>
    readonly number: FieldRef<"BusinessRegistration", 'String'>
    readonly issuingBody: FieldRef<"BusinessRegistration", 'String'>
    readonly validFrom: FieldRef<"BusinessRegistration", 'DateTime'>
    readonly validUntil: FieldRef<"BusinessRegistration", 'DateTime'>
    readonly isActive: FieldRef<"BusinessRegistration", 'Boolean'>
    readonly merchantId: FieldRef<"BusinessRegistration", 'String'>
    readonly brandId: FieldRef<"BusinessRegistration", 'String'>
    readonly storeId: FieldRef<"BusinessRegistration", 'String'>
    readonly createdAt: FieldRef<"BusinessRegistration", 'DateTime'>
    readonly updatedAt: FieldRef<"BusinessRegistration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BusinessRegistration findUnique
   */
  export type BusinessRegistrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRegistration to fetch.
     */
    where: BusinessRegistrationWhereUniqueInput
  }

  /**
   * BusinessRegistration findUniqueOrThrow
   */
  export type BusinessRegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRegistration to fetch.
     */
    where: BusinessRegistrationWhereUniqueInput
  }

  /**
   * BusinessRegistration findFirst
   */
  export type BusinessRegistrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRegistration to fetch.
     */
    where?: BusinessRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessRegistrations to fetch.
     */
    orderBy?: BusinessRegistrationOrderByWithRelationInput | BusinessRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessRegistrations.
     */
    cursor?: BusinessRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessRegistrations.
     */
    distinct?: BusinessRegistrationScalarFieldEnum | BusinessRegistrationScalarFieldEnum[]
  }

  /**
   * BusinessRegistration findFirstOrThrow
   */
  export type BusinessRegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRegistration to fetch.
     */
    where?: BusinessRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessRegistrations to fetch.
     */
    orderBy?: BusinessRegistrationOrderByWithRelationInput | BusinessRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessRegistrations.
     */
    cursor?: BusinessRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessRegistrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessRegistrations.
     */
    distinct?: BusinessRegistrationScalarFieldEnum | BusinessRegistrationScalarFieldEnum[]
  }

  /**
   * BusinessRegistration findMany
   */
  export type BusinessRegistrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * Filter, which BusinessRegistrations to fetch.
     */
    where?: BusinessRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessRegistrations to fetch.
     */
    orderBy?: BusinessRegistrationOrderByWithRelationInput | BusinessRegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusinessRegistrations.
     */
    cursor?: BusinessRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessRegistrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessRegistrations.
     */
    skip?: number
    distinct?: BusinessRegistrationScalarFieldEnum | BusinessRegistrationScalarFieldEnum[]
  }

  /**
   * BusinessRegistration create
   */
  export type BusinessRegistrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to create a BusinessRegistration.
     */
    data: XOR<BusinessRegistrationCreateInput, BusinessRegistrationUncheckedCreateInput>
  }

  /**
   * BusinessRegistration createMany
   */
  export type BusinessRegistrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusinessRegistrations.
     */
    data: BusinessRegistrationCreateManyInput | BusinessRegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusinessRegistration createManyAndReturn
   */
  export type BusinessRegistrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * The data used to create many BusinessRegistrations.
     */
    data: BusinessRegistrationCreateManyInput | BusinessRegistrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessRegistration update
   */
  export type BusinessRegistrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * The data needed to update a BusinessRegistration.
     */
    data: XOR<BusinessRegistrationUpdateInput, BusinessRegistrationUncheckedUpdateInput>
    /**
     * Choose, which BusinessRegistration to update.
     */
    where: BusinessRegistrationWhereUniqueInput
  }

  /**
   * BusinessRegistration updateMany
   */
  export type BusinessRegistrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusinessRegistrations.
     */
    data: XOR<BusinessRegistrationUpdateManyMutationInput, BusinessRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which BusinessRegistrations to update
     */
    where?: BusinessRegistrationWhereInput
    /**
     * Limit how many BusinessRegistrations to update.
     */
    limit?: number
  }

  /**
   * BusinessRegistration updateManyAndReturn
   */
  export type BusinessRegistrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * The data used to update BusinessRegistrations.
     */
    data: XOR<BusinessRegistrationUpdateManyMutationInput, BusinessRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which BusinessRegistrations to update
     */
    where?: BusinessRegistrationWhereInput
    /**
     * Limit how many BusinessRegistrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessRegistration upsert
   */
  export type BusinessRegistrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * The filter to search for the BusinessRegistration to update in case it exists.
     */
    where: BusinessRegistrationWhereUniqueInput
    /**
     * In case the BusinessRegistration found by the `where` argument doesn't exist, create a new BusinessRegistration with this data.
     */
    create: XOR<BusinessRegistrationCreateInput, BusinessRegistrationUncheckedCreateInput>
    /**
     * In case the BusinessRegistration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessRegistrationUpdateInput, BusinessRegistrationUncheckedUpdateInput>
  }

  /**
   * BusinessRegistration delete
   */
  export type BusinessRegistrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    /**
     * Filter which BusinessRegistration to delete.
     */
    where: BusinessRegistrationWhereUniqueInput
  }

  /**
   * BusinessRegistration deleteMany
   */
  export type BusinessRegistrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessRegistrations to delete
     */
    where?: BusinessRegistrationWhereInput
    /**
     * Limit how many BusinessRegistrations to delete.
     */
    limit?: number
  }

  /**
   * BusinessRegistration.merchant
   */
  export type BusinessRegistration$merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
  }

  /**
   * BusinessRegistration.brand
   */
  export type BusinessRegistration$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
  }

  /**
   * BusinessRegistration.store
   */
  export type BusinessRegistration$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
  }

  /**
   * BusinessRegistration without action
   */
  export type BusinessRegistrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
  }


  /**
   * Model Merchant
   */

  export type AggregateMerchant = {
    _count: MerchantCountAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  export type MerchantMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    status: $Enums.Status | null
    phoneNumber: string | null
    genericEmail: string | null
    invoiceEmail: string | null
    addressLine1: string | null
    addressLine2: string | null
    addressLine3: string | null
    city: string | null
    postalCode: string | null
    regionId: string | null
    countryId: string | null
    timezone: string | null
    logo: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MerchantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    status: $Enums.Status | null
    phoneNumber: string | null
    genericEmail: string | null
    invoiceEmail: string | null
    addressLine1: string | null
    addressLine2: string | null
    addressLine3: string | null
    city: string | null
    postalCode: string | null
    regionId: string | null
    countryId: string | null
    timezone: string | null
    logo: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MerchantCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    status: number
    phoneNumber: number
    genericEmail: number
    invoiceEmail: number
    addressLine1: number
    addressLine2: number
    addressLine3: number
    city: number
    postalCode: number
    regionId: number
    countryId: number
    timezone: number
    logo: number
    website: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MerchantMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    phoneNumber?: true
    genericEmail?: true
    invoiceEmail?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    postalCode?: true
    regionId?: true
    countryId?: true
    timezone?: true
    logo?: true
    website?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MerchantMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    phoneNumber?: true
    genericEmail?: true
    invoiceEmail?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    postalCode?: true
    regionId?: true
    countryId?: true
    timezone?: true
    logo?: true
    website?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MerchantCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    phoneNumber?: true
    genericEmail?: true
    invoiceEmail?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    postalCode?: true
    regionId?: true
    countryId?: true
    timezone?: true
    logo?: true
    website?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MerchantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Merchant to aggregate.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Merchants
    **/
    _count?: true | MerchantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerchantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerchantMaxAggregateInputType
  }

  export type GetMerchantAggregateType<T extends MerchantAggregateArgs> = {
        [P in keyof T & keyof AggregateMerchant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerchant[P]>
      : GetScalarType<T[P], AggregateMerchant[P]>
  }




  export type MerchantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithAggregationInput | MerchantOrderByWithAggregationInput[]
    by: MerchantScalarFieldEnum[] | MerchantScalarFieldEnum
    having?: MerchantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerchantCountAggregateInputType | true
    _min?: MerchantMinAggregateInputType
    _max?: MerchantMaxAggregateInputType
  }

  export type MerchantGroupByOutputType = {
    id: string
    name: string
    slug: string
    status: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail: string | null
    addressLine1: string
    addressLine2: string | null
    addressLine3: string | null
    city: string
    postalCode: string
    regionId: string | null
    countryId: string
    timezone: string | null
    logo: string | null
    website: string | null
    createdAt: Date
    updatedAt: Date
    _count: MerchantCountAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  type GetMerchantGroupByPayload<T extends MerchantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerchantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerchantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerchantGroupByOutputType[P]>
            : GetScalarType<T[P], MerchantGroupByOutputType[P]>
        }
      >
    >


  export type MerchantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    phoneNumber?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    postalCode?: boolean
    regionId?: boolean
    countryId?: boolean
    timezone?: boolean
    logo?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | Merchant$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    businessRegistrations?: boolean | Merchant$businessRegistrationsArgs<ExtArgs>
    brands?: boolean | Merchant$brandsArgs<ExtArgs>
    userAccess?: boolean | Merchant$userAccessArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>

  export type MerchantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    phoneNumber?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    postalCode?: boolean
    regionId?: boolean
    countryId?: boolean
    timezone?: boolean
    logo?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | Merchant$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>

  export type MerchantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    phoneNumber?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    postalCode?: boolean
    regionId?: boolean
    countryId?: boolean
    timezone?: boolean
    logo?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | Merchant$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>

  export type MerchantSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    phoneNumber?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    postalCode?: boolean
    regionId?: boolean
    countryId?: boolean
    timezone?: boolean
    logo?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MerchantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "status" | "phoneNumber" | "genericEmail" | "invoiceEmail" | "addressLine1" | "addressLine2" | "addressLine3" | "city" | "postalCode" | "regionId" | "countryId" | "timezone" | "logo" | "website" | "createdAt" | "updatedAt", ExtArgs["result"]["merchant"]>
  export type MerchantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | Merchant$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    businessRegistrations?: boolean | Merchant$businessRegistrationsArgs<ExtArgs>
    brands?: boolean | Merchant$brandsArgs<ExtArgs>
    userAccess?: boolean | Merchant$userAccessArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MerchantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | Merchant$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }
  export type MerchantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | Merchant$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $MerchantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Merchant"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs> | null
      country: Prisma.$CountryPayload<ExtArgs>
      businessRegistrations: Prisma.$BusinessRegistrationPayload<ExtArgs>[]
      brands: Prisma.$BrandPayload<ExtArgs>[]
      userAccess: Prisma.$BusinessUserAccessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      status: $Enums.Status
      phoneNumber: string
      genericEmail: string
      invoiceEmail: string | null
      addressLine1: string
      addressLine2: string | null
      addressLine3: string | null
      city: string
      postalCode: string
      regionId: string | null
      countryId: string
      timezone: string | null
      logo: string | null
      website: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["merchant"]>
    composites: {}
  }

  type MerchantGetPayload<S extends boolean | null | undefined | MerchantDefaultArgs> = $Result.GetResult<Prisma.$MerchantPayload, S>

  type MerchantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MerchantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MerchantCountAggregateInputType | true
    }

  export interface MerchantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Merchant'], meta: { name: 'Merchant' } }
    /**
     * Find zero or one Merchant that matches the filter.
     * @param {MerchantFindUniqueArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MerchantFindUniqueArgs>(args: SelectSubset<T, MerchantFindUniqueArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Merchant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MerchantFindUniqueOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MerchantFindUniqueOrThrowArgs>(args: SelectSubset<T, MerchantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Merchant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindFirstArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MerchantFindFirstArgs>(args?: SelectSubset<T, MerchantFindFirstArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Merchant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindFirstOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MerchantFindFirstOrThrowArgs>(args?: SelectSubset<T, MerchantFindFirstOrThrowArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Merchants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Merchants
     * const merchants = await prisma.merchant.findMany()
     * 
     * // Get first 10 Merchants
     * const merchants = await prisma.merchant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const merchantWithIdOnly = await prisma.merchant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MerchantFindManyArgs>(args?: SelectSubset<T, MerchantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Merchant.
     * @param {MerchantCreateArgs} args - Arguments to create a Merchant.
     * @example
     * // Create one Merchant
     * const Merchant = await prisma.merchant.create({
     *   data: {
     *     // ... data to create a Merchant
     *   }
     * })
     * 
     */
    create<T extends MerchantCreateArgs>(args: SelectSubset<T, MerchantCreateArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Merchants.
     * @param {MerchantCreateManyArgs} args - Arguments to create many Merchants.
     * @example
     * // Create many Merchants
     * const merchant = await prisma.merchant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MerchantCreateManyArgs>(args?: SelectSubset<T, MerchantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Merchants and returns the data saved in the database.
     * @param {MerchantCreateManyAndReturnArgs} args - Arguments to create many Merchants.
     * @example
     * // Create many Merchants
     * const merchant = await prisma.merchant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Merchants and only return the `id`
     * const merchantWithIdOnly = await prisma.merchant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MerchantCreateManyAndReturnArgs>(args?: SelectSubset<T, MerchantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Merchant.
     * @param {MerchantDeleteArgs} args - Arguments to delete one Merchant.
     * @example
     * // Delete one Merchant
     * const Merchant = await prisma.merchant.delete({
     *   where: {
     *     // ... filter to delete one Merchant
     *   }
     * })
     * 
     */
    delete<T extends MerchantDeleteArgs>(args: SelectSubset<T, MerchantDeleteArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Merchant.
     * @param {MerchantUpdateArgs} args - Arguments to update one Merchant.
     * @example
     * // Update one Merchant
     * const merchant = await prisma.merchant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MerchantUpdateArgs>(args: SelectSubset<T, MerchantUpdateArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Merchants.
     * @param {MerchantDeleteManyArgs} args - Arguments to filter Merchants to delete.
     * @example
     * // Delete a few Merchants
     * const { count } = await prisma.merchant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MerchantDeleteManyArgs>(args?: SelectSubset<T, MerchantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Merchants
     * const merchant = await prisma.merchant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MerchantUpdateManyArgs>(args: SelectSubset<T, MerchantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Merchants and returns the data updated in the database.
     * @param {MerchantUpdateManyAndReturnArgs} args - Arguments to update many Merchants.
     * @example
     * // Update many Merchants
     * const merchant = await prisma.merchant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Merchants and only return the `id`
     * const merchantWithIdOnly = await prisma.merchant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MerchantUpdateManyAndReturnArgs>(args: SelectSubset<T, MerchantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Merchant.
     * @param {MerchantUpsertArgs} args - Arguments to update or create a Merchant.
     * @example
     * // Update or create a Merchant
     * const merchant = await prisma.merchant.upsert({
     *   create: {
     *     // ... data to create a Merchant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Merchant we want to update
     *   }
     * })
     */
    upsert<T extends MerchantUpsertArgs>(args: SelectSubset<T, MerchantUpsertArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantCountArgs} args - Arguments to filter Merchants to count.
     * @example
     * // Count the number of Merchants
     * const count = await prisma.merchant.count({
     *   where: {
     *     // ... the filter for the Merchants we want to count
     *   }
     * })
    **/
    count<T extends MerchantCountArgs>(
      args?: Subset<T, MerchantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerchantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerchantAggregateArgs>(args: Subset<T, MerchantAggregateArgs>): Prisma.PrismaPromise<GetMerchantAggregateType<T>>

    /**
     * Group by Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MerchantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MerchantGroupByArgs['orderBy'] }
        : { orderBy?: MerchantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MerchantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerchantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Merchant model
   */
  readonly fields: MerchantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Merchant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MerchantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends Merchant$regionArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$regionArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    businessRegistrations<T extends Merchant$businessRegistrationsArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$businessRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    brands<T extends Merchant$brandsArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$brandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAccess<T extends Merchant$userAccessArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$userAccessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Merchant model
   */
  interface MerchantFieldRefs {
    readonly id: FieldRef<"Merchant", 'String'>
    readonly name: FieldRef<"Merchant", 'String'>
    readonly slug: FieldRef<"Merchant", 'String'>
    readonly status: FieldRef<"Merchant", 'Status'>
    readonly phoneNumber: FieldRef<"Merchant", 'String'>
    readonly genericEmail: FieldRef<"Merchant", 'String'>
    readonly invoiceEmail: FieldRef<"Merchant", 'String'>
    readonly addressLine1: FieldRef<"Merchant", 'String'>
    readonly addressLine2: FieldRef<"Merchant", 'String'>
    readonly addressLine3: FieldRef<"Merchant", 'String'>
    readonly city: FieldRef<"Merchant", 'String'>
    readonly postalCode: FieldRef<"Merchant", 'String'>
    readonly regionId: FieldRef<"Merchant", 'String'>
    readonly countryId: FieldRef<"Merchant", 'String'>
    readonly timezone: FieldRef<"Merchant", 'String'>
    readonly logo: FieldRef<"Merchant", 'String'>
    readonly website: FieldRef<"Merchant", 'String'>
    readonly createdAt: FieldRef<"Merchant", 'DateTime'>
    readonly updatedAt: FieldRef<"Merchant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Merchant findUnique
   */
  export type MerchantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant findUniqueOrThrow
   */
  export type MerchantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant findFirst
   */
  export type MerchantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant findFirstOrThrow
   */
  export type MerchantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant findMany
   */
  export type MerchantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchants to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant create
   */
  export type MerchantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The data needed to create a Merchant.
     */
    data: XOR<MerchantCreateInput, MerchantUncheckedCreateInput>
  }

  /**
   * Merchant createMany
   */
  export type MerchantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Merchants.
     */
    data: MerchantCreateManyInput | MerchantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Merchant createManyAndReturn
   */
  export type MerchantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * The data used to create many Merchants.
     */
    data: MerchantCreateManyInput | MerchantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Merchant update
   */
  export type MerchantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The data needed to update a Merchant.
     */
    data: XOR<MerchantUpdateInput, MerchantUncheckedUpdateInput>
    /**
     * Choose, which Merchant to update.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant updateMany
   */
  export type MerchantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Merchants.
     */
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyInput>
    /**
     * Filter which Merchants to update
     */
    where?: MerchantWhereInput
    /**
     * Limit how many Merchants to update.
     */
    limit?: number
  }

  /**
   * Merchant updateManyAndReturn
   */
  export type MerchantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * The data used to update Merchants.
     */
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyInput>
    /**
     * Filter which Merchants to update
     */
    where?: MerchantWhereInput
    /**
     * Limit how many Merchants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Merchant upsert
   */
  export type MerchantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The filter to search for the Merchant to update in case it exists.
     */
    where: MerchantWhereUniqueInput
    /**
     * In case the Merchant found by the `where` argument doesn't exist, create a new Merchant with this data.
     */
    create: XOR<MerchantCreateInput, MerchantUncheckedCreateInput>
    /**
     * In case the Merchant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MerchantUpdateInput, MerchantUncheckedUpdateInput>
  }

  /**
   * Merchant delete
   */
  export type MerchantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter which Merchant to delete.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant deleteMany
   */
  export type MerchantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Merchants to delete
     */
    where?: MerchantWhereInput
    /**
     * Limit how many Merchants to delete.
     */
    limit?: number
  }

  /**
   * Merchant.region
   */
  export type Merchant$regionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
  }

  /**
   * Merchant.businessRegistrations
   */
  export type Merchant$businessRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    where?: BusinessRegistrationWhereInput
    orderBy?: BusinessRegistrationOrderByWithRelationInput | BusinessRegistrationOrderByWithRelationInput[]
    cursor?: BusinessRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessRegistrationScalarFieldEnum | BusinessRegistrationScalarFieldEnum[]
  }

  /**
   * Merchant.brands
   */
  export type Merchant$brandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Merchant.userAccess
   */
  export type Merchant$userAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    where?: BusinessUserAccessWhereInput
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    cursor?: BusinessUserAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessUserAccessScalarFieldEnum | BusinessUserAccessScalarFieldEnum[]
  }

  /**
   * Merchant without action
   */
  export type MerchantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Merchant
     */
    omit?: MerchantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    status: $Enums.Status | null
    merchantId: string | null
    name: string | null
    slug: string | null
    genericEmail: string | null
    invoiceEmail: string | null
    tradingAsName: string | null
    logo: string | null
    website: string | null
    addressLine1: string | null
    addressLine2: string | null
    addressLine3: string | null
    city: string | null
    postalCode: string | null
    regionId: string | null
    countryId: string | null
    phoneNumber: string | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    status: $Enums.Status | null
    merchantId: string | null
    name: string | null
    slug: string | null
    genericEmail: string | null
    invoiceEmail: string | null
    tradingAsName: string | null
    logo: string | null
    website: string | null
    addressLine1: string | null
    addressLine2: string | null
    addressLine3: string | null
    city: string | null
    postalCode: string | null
    regionId: string | null
    countryId: string | null
    phoneNumber: string | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    status: number
    merchantId: number
    name: number
    slug: number
    genericEmail: number
    invoiceEmail: number
    tradingAsName: number
    logo: number
    website: number
    addressLine1: number
    addressLine2: number
    addressLine3: number
    city: number
    postalCode: number
    regionId: number
    countryId: number
    phoneNumber: number
    timezone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    status?: true
    merchantId?: true
    name?: true
    slug?: true
    genericEmail?: true
    invoiceEmail?: true
    tradingAsName?: true
    logo?: true
    website?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    postalCode?: true
    regionId?: true
    countryId?: true
    phoneNumber?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    status?: true
    merchantId?: true
    name?: true
    slug?: true
    genericEmail?: true
    invoiceEmail?: true
    tradingAsName?: true
    logo?: true
    website?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    postalCode?: true
    regionId?: true
    countryId?: true
    phoneNumber?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    status?: true
    merchantId?: true
    name?: true
    slug?: true
    genericEmail?: true
    invoiceEmail?: true
    tradingAsName?: true
    logo?: true
    website?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    postalCode?: true
    regionId?: true
    countryId?: true
    phoneNumber?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: string
    status: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail: string | null
    tradingAsName: string | null
    logo: string | null
    website: string | null
    addressLine1: string
    addressLine2: string | null
    addressLine3: string | null
    city: string
    postalCode: string
    regionId: string | null
    countryId: string
    phoneNumber: string
    timezone: string | null
    createdAt: Date
    updatedAt: Date
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    merchantId?: boolean
    name?: boolean
    slug?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    tradingAsName?: boolean
    logo?: boolean
    website?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    postalCode?: boolean
    regionId?: boolean
    countryId?: boolean
    phoneNumber?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    region?: boolean | Brand$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    businessRegistrations?: boolean | Brand$businessRegistrationsArgs<ExtArgs>
    stores?: boolean | Brand$storesArgs<ExtArgs>
    userAccess?: boolean | Brand$userAccessArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    merchantId?: boolean
    name?: boolean
    slug?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    tradingAsName?: boolean
    logo?: boolean
    website?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    postalCode?: boolean
    regionId?: boolean
    countryId?: boolean
    phoneNumber?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    region?: boolean | Brand$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    merchantId?: boolean
    name?: boolean
    slug?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    tradingAsName?: boolean
    logo?: boolean
    website?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    postalCode?: boolean
    regionId?: boolean
    countryId?: boolean
    phoneNumber?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    region?: boolean | Brand$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectScalar = {
    id?: boolean
    status?: boolean
    merchantId?: boolean
    name?: boolean
    slug?: boolean
    genericEmail?: boolean
    invoiceEmail?: boolean
    tradingAsName?: boolean
    logo?: boolean
    website?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    postalCode?: boolean
    regionId?: boolean
    countryId?: boolean
    phoneNumber?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "merchantId" | "name" | "slug" | "genericEmail" | "invoiceEmail" | "tradingAsName" | "logo" | "website" | "addressLine1" | "addressLine2" | "addressLine3" | "city" | "postalCode" | "regionId" | "countryId" | "phoneNumber" | "timezone" | "createdAt" | "updatedAt", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    region?: boolean | Brand$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    businessRegistrations?: boolean | Brand$businessRegistrationsArgs<ExtArgs>
    stores?: boolean | Brand$storesArgs<ExtArgs>
    userAccess?: boolean | Brand$userAccessArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    region?: boolean | Brand$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }
  export type BrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    merchant?: boolean | MerchantDefaultArgs<ExtArgs>
    region?: boolean | Brand$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      merchant: Prisma.$MerchantPayload<ExtArgs>
      region: Prisma.$RegionPayload<ExtArgs> | null
      country: Prisma.$CountryPayload<ExtArgs>
      businessRegistrations: Prisma.$BusinessRegistrationPayload<ExtArgs>[]
      stores: Prisma.$StorePayload<ExtArgs>[]
      userAccess: Prisma.$BusinessUserAccessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.Status
      merchantId: string
      name: string
      slug: string
      genericEmail: string
      invoiceEmail: string | null
      tradingAsName: string | null
      logo: string | null
      website: string | null
      addressLine1: string
      addressLine2: string | null
      addressLine3: string | null
      city: string
      postalCode: string
      regionId: string | null
      countryId: string
      phoneNumber: string
      timezone: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brands and returns the data saved in the database.
     * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands and returns the data updated in the database.
     * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    merchant<T extends MerchantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MerchantDefaultArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    region<T extends Brand$regionArgs<ExtArgs> = {}>(args?: Subset<T, Brand$regionArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    businessRegistrations<T extends Brand$businessRegistrationsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$businessRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stores<T extends Brand$storesArgs<ExtArgs> = {}>(args?: Subset<T, Brand$storesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAccess<T extends Brand$userAccessArgs<ExtArgs> = {}>(args?: Subset<T, Brand$userAccessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'String'>
    readonly status: FieldRef<"Brand", 'Status'>
    readonly merchantId: FieldRef<"Brand", 'String'>
    readonly name: FieldRef<"Brand", 'String'>
    readonly slug: FieldRef<"Brand", 'String'>
    readonly genericEmail: FieldRef<"Brand", 'String'>
    readonly invoiceEmail: FieldRef<"Brand", 'String'>
    readonly tradingAsName: FieldRef<"Brand", 'String'>
    readonly logo: FieldRef<"Brand", 'String'>
    readonly website: FieldRef<"Brand", 'String'>
    readonly addressLine1: FieldRef<"Brand", 'String'>
    readonly addressLine2: FieldRef<"Brand", 'String'>
    readonly addressLine3: FieldRef<"Brand", 'String'>
    readonly city: FieldRef<"Brand", 'String'>
    readonly postalCode: FieldRef<"Brand", 'String'>
    readonly regionId: FieldRef<"Brand", 'String'>
    readonly countryId: FieldRef<"Brand", 'String'>
    readonly phoneNumber: FieldRef<"Brand", 'String'>
    readonly timezone: FieldRef<"Brand", 'String'>
    readonly createdAt: FieldRef<"Brand", 'DateTime'>
    readonly updatedAt: FieldRef<"Brand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand createManyAndReturn
   */
  export type BrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand updateManyAndReturn
   */
  export type BrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.region
   */
  export type Brand$regionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
  }

  /**
   * Brand.businessRegistrations
   */
  export type Brand$businessRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    where?: BusinessRegistrationWhereInput
    orderBy?: BusinessRegistrationOrderByWithRelationInput | BusinessRegistrationOrderByWithRelationInput[]
    cursor?: BusinessRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessRegistrationScalarFieldEnum | BusinessRegistrationScalarFieldEnum[]
  }

  /**
   * Brand.stores
   */
  export type Brand$storesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    cursor?: StoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Brand.userAccess
   */
  export type Brand$userAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    where?: BusinessUserAccessWhereInput
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    cursor?: BusinessUserAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessUserAccessScalarFieldEnum | BusinessUserAccessScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Store
   */

  export type AggregateStore = {
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  export type StoreAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type StoreSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type StoreMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    status: $Enums.Status | null
    brandId: string | null
    addressLine1: string | null
    addressLine2: string | null
    addressLine3: string | null
    city: string | null
    regionId: string | null
    postalCode: string | null
    countryId: string | null
    formattedAddress: string | null
    latitude: number | null
    longitude: number | null
    phoneNumber: string | null
    timezone: string | null
    currencyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoreMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    status: $Enums.Status | null
    brandId: string | null
    addressLine1: string | null
    addressLine2: string | null
    addressLine3: string | null
    city: string | null
    regionId: string | null
    postalCode: string | null
    countryId: string | null
    formattedAddress: string | null
    latitude: number | null
    longitude: number | null
    phoneNumber: string | null
    timezone: string | null
    currencyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoreCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    status: number
    brandId: number
    addressLine1: number
    addressLine2: number
    addressLine3: number
    city: number
    regionId: number
    postalCode: number
    countryId: number
    formattedAddress: number
    latitude: number
    longitude: number
    phoneNumber: number
    timezone: number
    currencyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StoreAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type StoreSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type StoreMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    brandId?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    regionId?: true
    postalCode?: true
    countryId?: true
    formattedAddress?: true
    latitude?: true
    longitude?: true
    phoneNumber?: true
    timezone?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoreMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    brandId?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    regionId?: true
    postalCode?: true
    countryId?: true
    formattedAddress?: true
    latitude?: true
    longitude?: true
    phoneNumber?: true
    timezone?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoreCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    status?: true
    brandId?: true
    addressLine1?: true
    addressLine2?: true
    addressLine3?: true
    city?: true
    regionId?: true
    postalCode?: true
    countryId?: true
    formattedAddress?: true
    latitude?: true
    longitude?: true
    phoneNumber?: true
    timezone?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Store to aggregate.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stores
    **/
    _count?: true | StoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreMaxAggregateInputType
  }

  export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
        [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStore[P]>
      : GetScalarType<T[P], AggregateStore[P]>
  }




  export type StoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithAggregationInput | StoreOrderByWithAggregationInput[]
    by: StoreScalarFieldEnum[] | StoreScalarFieldEnum
    having?: StoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreCountAggregateInputType | true
    _avg?: StoreAvgAggregateInputType
    _sum?: StoreSumAggregateInputType
    _min?: StoreMinAggregateInputType
    _max?: StoreMaxAggregateInputType
  }

  export type StoreGroupByOutputType = {
    id: string
    name: string
    slug: string
    status: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2: string | null
    addressLine3: string | null
    city: string
    regionId: string | null
    postalCode: string
    countryId: string
    formattedAddress: string | null
    latitude: number | null
    longitude: number | null
    phoneNumber: string | null
    timezone: string | null
    currencyId: string
    createdAt: Date
    updatedAt: Date
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  type GetStoreGroupByPayload<T extends StoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreGroupByOutputType[P]>
            : GetScalarType<T[P], StoreGroupByOutputType[P]>
        }
      >
    >


  export type StoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    brandId?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    regionId?: boolean
    postalCode?: boolean
    countryId?: boolean
    formattedAddress?: boolean
    latitude?: boolean
    longitude?: boolean
    phoneNumber?: boolean
    timezone?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    region?: boolean | Store$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    businessRegistrations?: boolean | Store$businessRegistrationsArgs<ExtArgs>
    receipts?: boolean | Store$receiptsArgs<ExtArgs>
    userAccess?: boolean | Store$userAccessArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    brandId?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    regionId?: boolean
    postalCode?: boolean
    countryId?: boolean
    formattedAddress?: boolean
    latitude?: boolean
    longitude?: boolean
    phoneNumber?: boolean
    timezone?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    region?: boolean | Store$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    brandId?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    regionId?: boolean
    postalCode?: boolean
    countryId?: boolean
    formattedAddress?: boolean
    latitude?: boolean
    longitude?: boolean
    phoneNumber?: boolean
    timezone?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    region?: boolean | Store$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    status?: boolean
    brandId?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    addressLine3?: boolean
    city?: boolean
    regionId?: boolean
    postalCode?: boolean
    countryId?: boolean
    formattedAddress?: boolean
    latitude?: boolean
    longitude?: boolean
    phoneNumber?: boolean
    timezone?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "status" | "brandId" | "addressLine1" | "addressLine2" | "addressLine3" | "city" | "regionId" | "postalCode" | "countryId" | "formattedAddress" | "latitude" | "longitude" | "phoneNumber" | "timezone" | "currencyId" | "createdAt" | "updatedAt", ExtArgs["result"]["store"]>
  export type StoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    region?: boolean | Store$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
    businessRegistrations?: boolean | Store$businessRegistrationsArgs<ExtArgs>
    receipts?: boolean | Store$receiptsArgs<ExtArgs>
    userAccess?: boolean | Store$userAccessArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    region?: boolean | Store$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }
  export type StoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    region?: boolean | Store$regionArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    currency?: boolean | CurrencyDefaultArgs<ExtArgs>
  }

  export type $StorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Store"
    objects: {
      brand: Prisma.$BrandPayload<ExtArgs>
      region: Prisma.$RegionPayload<ExtArgs> | null
      country: Prisma.$CountryPayload<ExtArgs>
      currency: Prisma.$CurrencyPayload<ExtArgs>
      businessRegistrations: Prisma.$BusinessRegistrationPayload<ExtArgs>[]
      receipts: Prisma.$ReceiptPayload<ExtArgs>[]
      userAccess: Prisma.$BusinessUserAccessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      status: $Enums.Status
      brandId: string
      addressLine1: string
      addressLine2: string | null
      addressLine3: string | null
      city: string
      regionId: string | null
      postalCode: string
      countryId: string
      formattedAddress: string | null
      latitude: number | null
      longitude: number | null
      phoneNumber: string | null
      timezone: string | null
      currencyId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["store"]>
    composites: {}
  }

  type StoreGetPayload<S extends boolean | null | undefined | StoreDefaultArgs> = $Result.GetResult<Prisma.$StorePayload, S>

  type StoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoreCountAggregateInputType | true
    }

  export interface StoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Store'], meta: { name: 'Store' } }
    /**
     * Find zero or one Store that matches the filter.
     * @param {StoreFindUniqueArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoreFindUniqueArgs>(args: SelectSubset<T, StoreFindUniqueArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Store that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoreFindUniqueOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoreFindUniqueOrThrowArgs>(args: SelectSubset<T, StoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoreFindFirstArgs>(args?: SelectSubset<T, StoreFindFirstArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Store that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoreFindFirstOrThrowArgs>(args?: SelectSubset<T, StoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.store.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.store.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storeWithIdOnly = await prisma.store.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoreFindManyArgs>(args?: SelectSubset<T, StoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Store.
     * @param {StoreCreateArgs} args - Arguments to create a Store.
     * @example
     * // Create one Store
     * const Store = await prisma.store.create({
     *   data: {
     *     // ... data to create a Store
     *   }
     * })
     * 
     */
    create<T extends StoreCreateArgs>(args: SelectSubset<T, StoreCreateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stores.
     * @param {StoreCreateManyArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoreCreateManyArgs>(args?: SelectSubset<T, StoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stores and returns the data saved in the database.
     * @param {StoreCreateManyAndReturnArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stores and only return the `id`
     * const storeWithIdOnly = await prisma.store.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoreCreateManyAndReturnArgs>(args?: SelectSubset<T, StoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Store.
     * @param {StoreDeleteArgs} args - Arguments to delete one Store.
     * @example
     * // Delete one Store
     * const Store = await prisma.store.delete({
     *   where: {
     *     // ... filter to delete one Store
     *   }
     * })
     * 
     */
    delete<T extends StoreDeleteArgs>(args: SelectSubset<T, StoreDeleteArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Store.
     * @param {StoreUpdateArgs} args - Arguments to update one Store.
     * @example
     * // Update one Store
     * const store = await prisma.store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoreUpdateArgs>(args: SelectSubset<T, StoreUpdateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stores.
     * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoreDeleteManyArgs>(args?: SelectSubset<T, StoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoreUpdateManyArgs>(args: SelectSubset<T, StoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores and returns the data updated in the database.
     * @param {StoreUpdateManyAndReturnArgs} args - Arguments to update many Stores.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stores and only return the `id`
     * const storeWithIdOnly = await prisma.store.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StoreUpdateManyAndReturnArgs>(args: SelectSubset<T, StoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Store.
     * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
     * @example
     * // Update or create a Store
     * const store = await prisma.store.upsert({
     *   create: {
     *     // ... data to create a Store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Store we want to update
     *   }
     * })
     */
    upsert<T extends StoreUpsertArgs>(args: SelectSubset<T, StoreUpsertArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.store.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends StoreCountArgs>(
      args?: Subset<T, StoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreAggregateArgs>(args: Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

    /**
     * Group by Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreGroupByArgs['orderBy'] }
        : { orderBy?: StoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Store model
   */
  readonly fields: StoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    region<T extends Store$regionArgs<ExtArgs> = {}>(args?: Subset<T, Store$regionArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currency<T extends CurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CurrencyDefaultArgs<ExtArgs>>): Prisma__CurrencyClient<$Result.GetResult<Prisma.$CurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    businessRegistrations<T extends Store$businessRegistrationsArgs<ExtArgs> = {}>(args?: Subset<T, Store$businessRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receipts<T extends Store$receiptsArgs<ExtArgs> = {}>(args?: Subset<T, Store$receiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAccess<T extends Store$userAccessArgs<ExtArgs> = {}>(args?: Subset<T, Store$userAccessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessUserAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Store model
   */
  interface StoreFieldRefs {
    readonly id: FieldRef<"Store", 'String'>
    readonly name: FieldRef<"Store", 'String'>
    readonly slug: FieldRef<"Store", 'String'>
    readonly status: FieldRef<"Store", 'Status'>
    readonly brandId: FieldRef<"Store", 'String'>
    readonly addressLine1: FieldRef<"Store", 'String'>
    readonly addressLine2: FieldRef<"Store", 'String'>
    readonly addressLine3: FieldRef<"Store", 'String'>
    readonly city: FieldRef<"Store", 'String'>
    readonly regionId: FieldRef<"Store", 'String'>
    readonly postalCode: FieldRef<"Store", 'String'>
    readonly countryId: FieldRef<"Store", 'String'>
    readonly formattedAddress: FieldRef<"Store", 'String'>
    readonly latitude: FieldRef<"Store", 'Float'>
    readonly longitude: FieldRef<"Store", 'Float'>
    readonly phoneNumber: FieldRef<"Store", 'String'>
    readonly timezone: FieldRef<"Store", 'String'>
    readonly currencyId: FieldRef<"Store", 'String'>
    readonly createdAt: FieldRef<"Store", 'DateTime'>
    readonly updatedAt: FieldRef<"Store", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Store findUnique
   */
  export type StoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findUniqueOrThrow
   */
  export type StoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findFirst
   */
  export type StoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findFirstOrThrow
   */
  export type StoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findMany
   */
  export type StoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store create
   */
  export type StoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Store.
     */
    data: XOR<StoreCreateInput, StoreUncheckedCreateInput>
  }

  /**
   * Store createMany
   */
  export type StoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Store createManyAndReturn
   */
  export type StoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Store update
   */
  export type StoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Store.
     */
    data: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
    /**
     * Choose, which Store to update.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store updateMany
   */
  export type StoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to update.
     */
    limit?: number
  }

  /**
   * Store updateManyAndReturn
   */
  export type StoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Store upsert
   */
  export type StoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Store to update in case it exists.
     */
    where: StoreWhereUniqueInput
    /**
     * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
     */
    create: XOR<StoreCreateInput, StoreUncheckedCreateInput>
    /**
     * In case the Store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
  }

  /**
   * Store delete
   */
  export type StoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter which Store to delete.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store deleteMany
   */
  export type StoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stores to delete
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to delete.
     */
    limit?: number
  }

  /**
   * Store.region
   */
  export type Store$regionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
  }

  /**
   * Store.businessRegistrations
   */
  export type Store$businessRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessRegistration
     */
    select?: BusinessRegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessRegistration
     */
    omit?: BusinessRegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessRegistrationInclude<ExtArgs> | null
    where?: BusinessRegistrationWhereInput
    orderBy?: BusinessRegistrationOrderByWithRelationInput | BusinessRegistrationOrderByWithRelationInput[]
    cursor?: BusinessRegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessRegistrationScalarFieldEnum | BusinessRegistrationScalarFieldEnum[]
  }

  /**
   * Store.receipts
   */
  export type Store$receiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    cursor?: ReceiptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Store.userAccess
   */
  export type Store$userAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessUserAccess
     */
    select?: BusinessUserAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessUserAccess
     */
    omit?: BusinessUserAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessUserAccessInclude<ExtArgs> | null
    where?: BusinessUserAccessWhereInput
    orderBy?: BusinessUserAccessOrderByWithRelationInput | BusinessUserAccessOrderByWithRelationInput[]
    cursor?: BusinessUserAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessUserAccessScalarFieldEnum | BusinessUserAccessScalarFieldEnum[]
  }

  /**
   * Store without action
   */
  export type StoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
  }


  /**
   * Model Receipt
   */

  export type AggregateReceipt = {
    _count: ReceiptCountAggregateOutputType | null
    _avg: ReceiptAvgAggregateOutputType | null
    _sum: ReceiptSumAggregateOutputType | null
    _min: ReceiptMinAggregateOutputType | null
    _max: ReceiptMaxAggregateOutputType | null
  }

  export type ReceiptAvgAggregateOutputType = {
    subTotal: number | null
    totalTax: number | null
    cardSurcharge: number | null
    discount: number | null
    tip: number | null
    roundingAdjustment: number | null
    finalTotal: number | null
  }

  export type ReceiptSumAggregateOutputType = {
    subTotal: number | null
    totalTax: number | null
    cardSurcharge: number | null
    discount: number | null
    tip: number | null
    roundingAdjustment: number | null
    finalTotal: number | null
  }

  export type ReceiptMinAggregateOutputType = {
    id: string | null
    receiptNumber: string | null
    consumerId: string | null
    storeId: string | null
    subTotal: number | null
    totalTax: number | null
    cardSurcharge: number | null
    discount: number | null
    tip: number | null
    roundingAdjustment: number | null
    finalTotal: number | null
    receiptDateTime: Date | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptMaxAggregateOutputType = {
    id: string | null
    receiptNumber: string | null
    consumerId: string | null
    storeId: string | null
    subTotal: number | null
    totalTax: number | null
    cardSurcharge: number | null
    discount: number | null
    tip: number | null
    roundingAdjustment: number | null
    finalTotal: number | null
    receiptDateTime: Date | null
    timezone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptCountAggregateOutputType = {
    id: number
    receiptNumber: number
    consumerId: number
    storeId: number
    subTotal: number
    totalTax: number
    cardSurcharge: number
    discount: number
    tip: number
    roundingAdjustment: number
    finalTotal: number
    otherInformation: number
    receiptDateTime: number
    timezone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReceiptAvgAggregateInputType = {
    subTotal?: true
    totalTax?: true
    cardSurcharge?: true
    discount?: true
    tip?: true
    roundingAdjustment?: true
    finalTotal?: true
  }

  export type ReceiptSumAggregateInputType = {
    subTotal?: true
    totalTax?: true
    cardSurcharge?: true
    discount?: true
    tip?: true
    roundingAdjustment?: true
    finalTotal?: true
  }

  export type ReceiptMinAggregateInputType = {
    id?: true
    receiptNumber?: true
    consumerId?: true
    storeId?: true
    subTotal?: true
    totalTax?: true
    cardSurcharge?: true
    discount?: true
    tip?: true
    roundingAdjustment?: true
    finalTotal?: true
    receiptDateTime?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptMaxAggregateInputType = {
    id?: true
    receiptNumber?: true
    consumerId?: true
    storeId?: true
    subTotal?: true
    totalTax?: true
    cardSurcharge?: true
    discount?: true
    tip?: true
    roundingAdjustment?: true
    finalTotal?: true
    receiptDateTime?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptCountAggregateInputType = {
    id?: true
    receiptNumber?: true
    consumerId?: true
    storeId?: true
    subTotal?: true
    totalTax?: true
    cardSurcharge?: true
    discount?: true
    tip?: true
    roundingAdjustment?: true
    finalTotal?: true
    otherInformation?: true
    receiptDateTime?: true
    timezone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReceiptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receipt to aggregate.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Receipts
    **/
    _count?: true | ReceiptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptMaxAggregateInputType
  }

  export type GetReceiptAggregateType<T extends ReceiptAggregateArgs> = {
        [P in keyof T & keyof AggregateReceipt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceipt[P]>
      : GetScalarType<T[P], AggregateReceipt[P]>
  }




  export type ReceiptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithAggregationInput | ReceiptOrderByWithAggregationInput[]
    by: ReceiptScalarFieldEnum[] | ReceiptScalarFieldEnum
    having?: ReceiptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptCountAggregateInputType | true
    _avg?: ReceiptAvgAggregateInputType
    _sum?: ReceiptSumAggregateInputType
    _min?: ReceiptMinAggregateInputType
    _max?: ReceiptMaxAggregateInputType
  }

  export type ReceiptGroupByOutputType = {
    id: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    totalTax: number
    cardSurcharge: number | null
    discount: number | null
    tip: number | null
    roundingAdjustment: number | null
    finalTotal: number
    otherInformation: string[]
    receiptDateTime: Date
    timezone: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReceiptCountAggregateOutputType | null
    _avg: ReceiptAvgAggregateOutputType | null
    _sum: ReceiptSumAggregateOutputType | null
    _min: ReceiptMinAggregateOutputType | null
    _max: ReceiptMaxAggregateOutputType | null
  }

  type GetReceiptGroupByPayload<T extends ReceiptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptNumber?: boolean
    consumerId?: boolean
    storeId?: boolean
    subTotal?: boolean
    totalTax?: boolean
    cardSurcharge?: boolean
    discount?: boolean
    tip?: boolean
    roundingAdjustment?: boolean
    finalTotal?: boolean
    otherInformation?: boolean
    receiptDateTime?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    receiptItems?: boolean | Receipt$receiptItemsArgs<ExtArgs>
    receiptPayments?: boolean | Receipt$receiptPaymentsArgs<ExtArgs>
    receiptTaxes?: boolean | Receipt$receiptTaxesArgs<ExtArgs>
    _count?: boolean | ReceiptCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipt"]>

  export type ReceiptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptNumber?: boolean
    consumerId?: boolean
    storeId?: boolean
    subTotal?: boolean
    totalTax?: boolean
    cardSurcharge?: boolean
    discount?: boolean
    tip?: boolean
    roundingAdjustment?: boolean
    finalTotal?: boolean
    otherInformation?: boolean
    receiptDateTime?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipt"]>

  export type ReceiptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptNumber?: boolean
    consumerId?: boolean
    storeId?: boolean
    subTotal?: boolean
    totalTax?: boolean
    cardSurcharge?: boolean
    discount?: boolean
    tip?: boolean
    roundingAdjustment?: boolean
    finalTotal?: boolean
    otherInformation?: boolean
    receiptDateTime?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipt"]>

  export type ReceiptSelectScalar = {
    id?: boolean
    receiptNumber?: boolean
    consumerId?: boolean
    storeId?: boolean
    subTotal?: boolean
    totalTax?: boolean
    cardSurcharge?: boolean
    discount?: boolean
    tip?: boolean
    roundingAdjustment?: boolean
    finalTotal?: boolean
    otherInformation?: boolean
    receiptDateTime?: boolean
    timezone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReceiptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "receiptNumber" | "consumerId" | "storeId" | "subTotal" | "totalTax" | "cardSurcharge" | "discount" | "tip" | "roundingAdjustment" | "finalTotal" | "otherInformation" | "receiptDateTime" | "timezone" | "createdAt" | "updatedAt", ExtArgs["result"]["receipt"]>
  export type ReceiptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    receiptItems?: boolean | Receipt$receiptItemsArgs<ExtArgs>
    receiptPayments?: boolean | Receipt$receiptPaymentsArgs<ExtArgs>
    receiptTaxes?: boolean | Receipt$receiptTaxesArgs<ExtArgs>
    _count?: boolean | ReceiptCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReceiptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type ReceiptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consumer?: boolean | ConsumerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }

  export type $ReceiptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Receipt"
    objects: {
      consumer: Prisma.$ConsumerPayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
      receiptItems: Prisma.$ReceiptItemPayload<ExtArgs>[]
      receiptPayments: Prisma.$ReceiptPaymentPayload<ExtArgs>[]
      receiptTaxes: Prisma.$ReceiptTaxPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptNumber: string
      consumerId: string
      storeId: string
      subTotal: number
      totalTax: number
      cardSurcharge: number | null
      discount: number | null
      tip: number | null
      roundingAdjustment: number | null
      finalTotal: number
      otherInformation: string[]
      receiptDateTime: Date
      timezone: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["receipt"]>
    composites: {}
  }

  type ReceiptGetPayload<S extends boolean | null | undefined | ReceiptDefaultArgs> = $Result.GetResult<Prisma.$ReceiptPayload, S>

  type ReceiptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceiptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptCountAggregateInputType | true
    }

  export interface ReceiptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Receipt'], meta: { name: 'Receipt' } }
    /**
     * Find zero or one Receipt that matches the filter.
     * @param {ReceiptFindUniqueArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptFindUniqueArgs>(args: SelectSubset<T, ReceiptFindUniqueArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Receipt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceiptFindUniqueOrThrowArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receipt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindFirstArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptFindFirstArgs>(args?: SelectSubset<T, ReceiptFindFirstArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receipt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindFirstOrThrowArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Receipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receipts
     * const receipts = await prisma.receipt.findMany()
     * 
     * // Get first 10 Receipts
     * const receipts = await prisma.receipt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptWithIdOnly = await prisma.receipt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptFindManyArgs>(args?: SelectSubset<T, ReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Receipt.
     * @param {ReceiptCreateArgs} args - Arguments to create a Receipt.
     * @example
     * // Create one Receipt
     * const Receipt = await prisma.receipt.create({
     *   data: {
     *     // ... data to create a Receipt
     *   }
     * })
     * 
     */
    create<T extends ReceiptCreateArgs>(args: SelectSubset<T, ReceiptCreateArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Receipts.
     * @param {ReceiptCreateManyArgs} args - Arguments to create many Receipts.
     * @example
     * // Create many Receipts
     * const receipt = await prisma.receipt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptCreateManyArgs>(args?: SelectSubset<T, ReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Receipts and returns the data saved in the database.
     * @param {ReceiptCreateManyAndReturnArgs} args - Arguments to create many Receipts.
     * @example
     * // Create many Receipts
     * const receipt = await prisma.receipt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Receipts and only return the `id`
     * const receiptWithIdOnly = await prisma.receipt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Receipt.
     * @param {ReceiptDeleteArgs} args - Arguments to delete one Receipt.
     * @example
     * // Delete one Receipt
     * const Receipt = await prisma.receipt.delete({
     *   where: {
     *     // ... filter to delete one Receipt
     *   }
     * })
     * 
     */
    delete<T extends ReceiptDeleteArgs>(args: SelectSubset<T, ReceiptDeleteArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Receipt.
     * @param {ReceiptUpdateArgs} args - Arguments to update one Receipt.
     * @example
     * // Update one Receipt
     * const receipt = await prisma.receipt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptUpdateArgs>(args: SelectSubset<T, ReceiptUpdateArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Receipts.
     * @param {ReceiptDeleteManyArgs} args - Arguments to filter Receipts to delete.
     * @example
     * // Delete a few Receipts
     * const { count } = await prisma.receipt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptDeleteManyArgs>(args?: SelectSubset<T, ReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receipts
     * const receipt = await prisma.receipt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptUpdateManyArgs>(args: SelectSubset<T, ReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receipts and returns the data updated in the database.
     * @param {ReceiptUpdateManyAndReturnArgs} args - Arguments to update many Receipts.
     * @example
     * // Update many Receipts
     * const receipt = await prisma.receipt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Receipts and only return the `id`
     * const receiptWithIdOnly = await prisma.receipt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceiptUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceiptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Receipt.
     * @param {ReceiptUpsertArgs} args - Arguments to update or create a Receipt.
     * @example
     * // Update or create a Receipt
     * const receipt = await prisma.receipt.upsert({
     *   create: {
     *     // ... data to create a Receipt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receipt we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptUpsertArgs>(args: SelectSubset<T, ReceiptUpsertArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptCountArgs} args - Arguments to filter Receipts to count.
     * @example
     * // Count the number of Receipts
     * const count = await prisma.receipt.count({
     *   where: {
     *     // ... the filter for the Receipts we want to count
     *   }
     * })
    **/
    count<T extends ReceiptCountArgs>(
      args?: Subset<T, ReceiptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptAggregateArgs>(args: Subset<T, ReceiptAggregateArgs>): Prisma.PrismaPromise<GetReceiptAggregateType<T>>

    /**
     * Group by Receipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Receipt model
   */
  readonly fields: ReceiptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Receipt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consumer<T extends ConsumerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsumerDefaultArgs<ExtArgs>>): Prisma__ConsumerClient<$Result.GetResult<Prisma.$ConsumerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiptItems<T extends Receipt$receiptItemsArgs<ExtArgs> = {}>(args?: Subset<T, Receipt$receiptItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receiptPayments<T extends Receipt$receiptPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Receipt$receiptPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receiptTaxes<T extends Receipt$receiptTaxesArgs<ExtArgs> = {}>(args?: Subset<T, Receipt$receiptTaxesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Receipt model
   */
  interface ReceiptFieldRefs {
    readonly id: FieldRef<"Receipt", 'String'>
    readonly receiptNumber: FieldRef<"Receipt", 'String'>
    readonly consumerId: FieldRef<"Receipt", 'String'>
    readonly storeId: FieldRef<"Receipt", 'String'>
    readonly subTotal: FieldRef<"Receipt", 'Float'>
    readonly totalTax: FieldRef<"Receipt", 'Float'>
    readonly cardSurcharge: FieldRef<"Receipt", 'Float'>
    readonly discount: FieldRef<"Receipt", 'Float'>
    readonly tip: FieldRef<"Receipt", 'Float'>
    readonly roundingAdjustment: FieldRef<"Receipt", 'Float'>
    readonly finalTotal: FieldRef<"Receipt", 'Float'>
    readonly otherInformation: FieldRef<"Receipt", 'String[]'>
    readonly receiptDateTime: FieldRef<"Receipt", 'DateTime'>
    readonly timezone: FieldRef<"Receipt", 'String'>
    readonly createdAt: FieldRef<"Receipt", 'DateTime'>
    readonly updatedAt: FieldRef<"Receipt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Receipt findUnique
   */
  export type ReceiptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt findUniqueOrThrow
   */
  export type ReceiptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt findFirst
   */
  export type ReceiptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receipts.
     */
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt findFirstOrThrow
   */
  export type ReceiptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receipts.
     */
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt findMany
   */
  export type ReceiptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipts to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt create
   */
  export type ReceiptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The data needed to create a Receipt.
     */
    data: XOR<ReceiptCreateInput, ReceiptUncheckedCreateInput>
  }

  /**
   * Receipt createMany
   */
  export type ReceiptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Receipts.
     */
    data: ReceiptCreateManyInput | ReceiptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Receipt createManyAndReturn
   */
  export type ReceiptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * The data used to create many Receipts.
     */
    data: ReceiptCreateManyInput | ReceiptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Receipt update
   */
  export type ReceiptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The data needed to update a Receipt.
     */
    data: XOR<ReceiptUpdateInput, ReceiptUncheckedUpdateInput>
    /**
     * Choose, which Receipt to update.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt updateMany
   */
  export type ReceiptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Receipts.
     */
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyInput>
    /**
     * Filter which Receipts to update
     */
    where?: ReceiptWhereInput
    /**
     * Limit how many Receipts to update.
     */
    limit?: number
  }

  /**
   * Receipt updateManyAndReturn
   */
  export type ReceiptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * The data used to update Receipts.
     */
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyInput>
    /**
     * Filter which Receipts to update
     */
    where?: ReceiptWhereInput
    /**
     * Limit how many Receipts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Receipt upsert
   */
  export type ReceiptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The filter to search for the Receipt to update in case it exists.
     */
    where: ReceiptWhereUniqueInput
    /**
     * In case the Receipt found by the `where` argument doesn't exist, create a new Receipt with this data.
     */
    create: XOR<ReceiptCreateInput, ReceiptUncheckedCreateInput>
    /**
     * In case the Receipt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptUpdateInput, ReceiptUncheckedUpdateInput>
  }

  /**
   * Receipt delete
   */
  export type ReceiptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter which Receipt to delete.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt deleteMany
   */
  export type ReceiptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receipts to delete
     */
    where?: ReceiptWhereInput
    /**
     * Limit how many Receipts to delete.
     */
    limit?: number
  }

  /**
   * Receipt.receiptItems
   */
  export type Receipt$receiptItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    where?: ReceiptItemWhereInput
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    cursor?: ReceiptItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptItemScalarFieldEnum | ReceiptItemScalarFieldEnum[]
  }

  /**
   * Receipt.receiptPayments
   */
  export type Receipt$receiptPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    where?: ReceiptPaymentWhereInput
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    cursor?: ReceiptPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptPaymentScalarFieldEnum | ReceiptPaymentScalarFieldEnum[]
  }

  /**
   * Receipt.receiptTaxes
   */
  export type Receipt$receiptTaxesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    where?: ReceiptTaxWhereInput
    orderBy?: ReceiptTaxOrderByWithRelationInput | ReceiptTaxOrderByWithRelationInput[]
    cursor?: ReceiptTaxWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptTaxScalarFieldEnum | ReceiptTaxScalarFieldEnum[]
  }

  /**
   * Receipt without action
   */
  export type ReceiptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receipt
     */
    omit?: ReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
  }


  /**
   * Model ReceiptTax
   */

  export type AggregateReceiptTax = {
    _count: ReceiptTaxCountAggregateOutputType | null
    _avg: ReceiptTaxAvgAggregateOutputType | null
    _sum: ReceiptTaxSumAggregateOutputType | null
    _min: ReceiptTaxMinAggregateOutputType | null
    _max: ReceiptTaxMaxAggregateOutputType | null
  }

  export type ReceiptTaxAvgAggregateOutputType = {
    taxRate: number | null
    taxableAmount: number | null
    taxAmount: number | null
  }

  export type ReceiptTaxSumAggregateOutputType = {
    taxRate: number | null
    taxableAmount: number | null
    taxAmount: number | null
  }

  export type ReceiptTaxMinAggregateOutputType = {
    id: string | null
    receiptId: string | null
    taxType: $Enums.TaxType | null
    taxName: string | null
    taxRate: number | null
    taxableAmount: number | null
    taxAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptTaxMaxAggregateOutputType = {
    id: string | null
    receiptId: string | null
    taxType: $Enums.TaxType | null
    taxName: string | null
    taxRate: number | null
    taxableAmount: number | null
    taxAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptTaxCountAggregateOutputType = {
    id: number
    receiptId: number
    taxType: number
    taxName: number
    taxRate: number
    taxableAmount: number
    taxAmount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReceiptTaxAvgAggregateInputType = {
    taxRate?: true
    taxableAmount?: true
    taxAmount?: true
  }

  export type ReceiptTaxSumAggregateInputType = {
    taxRate?: true
    taxableAmount?: true
    taxAmount?: true
  }

  export type ReceiptTaxMinAggregateInputType = {
    id?: true
    receiptId?: true
    taxType?: true
    taxName?: true
    taxRate?: true
    taxableAmount?: true
    taxAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptTaxMaxAggregateInputType = {
    id?: true
    receiptId?: true
    taxType?: true
    taxName?: true
    taxRate?: true
    taxableAmount?: true
    taxAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptTaxCountAggregateInputType = {
    id?: true
    receiptId?: true
    taxType?: true
    taxName?: true
    taxRate?: true
    taxableAmount?: true
    taxAmount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReceiptTaxAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptTax to aggregate.
     */
    where?: ReceiptTaxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptTaxes to fetch.
     */
    orderBy?: ReceiptTaxOrderByWithRelationInput | ReceiptTaxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptTaxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptTaxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptTaxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptTaxes
    **/
    _count?: true | ReceiptTaxCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptTaxAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptTaxSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptTaxMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptTaxMaxAggregateInputType
  }

  export type GetReceiptTaxAggregateType<T extends ReceiptTaxAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptTax]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptTax[P]>
      : GetScalarType<T[P], AggregateReceiptTax[P]>
  }




  export type ReceiptTaxGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptTaxWhereInput
    orderBy?: ReceiptTaxOrderByWithAggregationInput | ReceiptTaxOrderByWithAggregationInput[]
    by: ReceiptTaxScalarFieldEnum[] | ReceiptTaxScalarFieldEnum
    having?: ReceiptTaxScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptTaxCountAggregateInputType | true
    _avg?: ReceiptTaxAvgAggregateInputType
    _sum?: ReceiptTaxSumAggregateInputType
    _min?: ReceiptTaxMinAggregateInputType
    _max?: ReceiptTaxMaxAggregateInputType
  }

  export type ReceiptTaxGroupByOutputType = {
    id: string
    receiptId: string
    taxType: $Enums.TaxType
    taxName: string
    taxRate: number
    taxableAmount: number
    taxAmount: number
    createdAt: Date
    updatedAt: Date
    _count: ReceiptTaxCountAggregateOutputType | null
    _avg: ReceiptTaxAvgAggregateOutputType | null
    _sum: ReceiptTaxSumAggregateOutputType | null
    _min: ReceiptTaxMinAggregateOutputType | null
    _max: ReceiptTaxMaxAggregateOutputType | null
  }

  type GetReceiptTaxGroupByPayload<T extends ReceiptTaxGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptTaxGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptTaxGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptTaxGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptTaxGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptTaxSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    taxType?: boolean
    taxName?: boolean
    taxRate?: boolean
    taxableAmount?: boolean
    taxAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptTax"]>

  export type ReceiptTaxSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    taxType?: boolean
    taxName?: boolean
    taxRate?: boolean
    taxableAmount?: boolean
    taxAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptTax"]>

  export type ReceiptTaxSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    taxType?: boolean
    taxName?: boolean
    taxRate?: boolean
    taxableAmount?: boolean
    taxAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptTax"]>

  export type ReceiptTaxSelectScalar = {
    id?: boolean
    receiptId?: boolean
    taxType?: boolean
    taxName?: boolean
    taxRate?: boolean
    taxableAmount?: boolean
    taxAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReceiptTaxOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "receiptId" | "taxType" | "taxName" | "taxRate" | "taxableAmount" | "taxAmount" | "createdAt" | "updatedAt", ExtArgs["result"]["receiptTax"]>
  export type ReceiptTaxInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptTaxIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptTaxIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }

  export type $ReceiptTaxPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptTax"
    objects: {
      receipt: Prisma.$ReceiptPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptId: string
      taxType: $Enums.TaxType
      taxName: string
      taxRate: number
      taxableAmount: number
      taxAmount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["receiptTax"]>
    composites: {}
  }

  type ReceiptTaxGetPayload<S extends boolean | null | undefined | ReceiptTaxDefaultArgs> = $Result.GetResult<Prisma.$ReceiptTaxPayload, S>

  type ReceiptTaxCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceiptTaxFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptTaxCountAggregateInputType | true
    }

  export interface ReceiptTaxDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptTax'], meta: { name: 'ReceiptTax' } }
    /**
     * Find zero or one ReceiptTax that matches the filter.
     * @param {ReceiptTaxFindUniqueArgs} args - Arguments to find a ReceiptTax
     * @example
     * // Get one ReceiptTax
     * const receiptTax = await prisma.receiptTax.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptTaxFindUniqueArgs>(args: SelectSubset<T, ReceiptTaxFindUniqueArgs<ExtArgs>>): Prisma__ReceiptTaxClient<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReceiptTax that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceiptTaxFindUniqueOrThrowArgs} args - Arguments to find a ReceiptTax
     * @example
     * // Get one ReceiptTax
     * const receiptTax = await prisma.receiptTax.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptTaxFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptTaxFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptTaxClient<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptTax that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptTaxFindFirstArgs} args - Arguments to find a ReceiptTax
     * @example
     * // Get one ReceiptTax
     * const receiptTax = await prisma.receiptTax.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptTaxFindFirstArgs>(args?: SelectSubset<T, ReceiptTaxFindFirstArgs<ExtArgs>>): Prisma__ReceiptTaxClient<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptTax that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptTaxFindFirstOrThrowArgs} args - Arguments to find a ReceiptTax
     * @example
     * // Get one ReceiptTax
     * const receiptTax = await prisma.receiptTax.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptTaxFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptTaxFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptTaxClient<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReceiptTaxes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptTaxFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptTaxes
     * const receiptTaxes = await prisma.receiptTax.findMany()
     * 
     * // Get first 10 ReceiptTaxes
     * const receiptTaxes = await prisma.receiptTax.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptTaxWithIdOnly = await prisma.receiptTax.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptTaxFindManyArgs>(args?: SelectSubset<T, ReceiptTaxFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReceiptTax.
     * @param {ReceiptTaxCreateArgs} args - Arguments to create a ReceiptTax.
     * @example
     * // Create one ReceiptTax
     * const ReceiptTax = await prisma.receiptTax.create({
     *   data: {
     *     // ... data to create a ReceiptTax
     *   }
     * })
     * 
     */
    create<T extends ReceiptTaxCreateArgs>(args: SelectSubset<T, ReceiptTaxCreateArgs<ExtArgs>>): Prisma__ReceiptTaxClient<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReceiptTaxes.
     * @param {ReceiptTaxCreateManyArgs} args - Arguments to create many ReceiptTaxes.
     * @example
     * // Create many ReceiptTaxes
     * const receiptTax = await prisma.receiptTax.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptTaxCreateManyArgs>(args?: SelectSubset<T, ReceiptTaxCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReceiptTaxes and returns the data saved in the database.
     * @param {ReceiptTaxCreateManyAndReturnArgs} args - Arguments to create many ReceiptTaxes.
     * @example
     * // Create many ReceiptTaxes
     * const receiptTax = await prisma.receiptTax.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReceiptTaxes and only return the `id`
     * const receiptTaxWithIdOnly = await prisma.receiptTax.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptTaxCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptTaxCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReceiptTax.
     * @param {ReceiptTaxDeleteArgs} args - Arguments to delete one ReceiptTax.
     * @example
     * // Delete one ReceiptTax
     * const ReceiptTax = await prisma.receiptTax.delete({
     *   where: {
     *     // ... filter to delete one ReceiptTax
     *   }
     * })
     * 
     */
    delete<T extends ReceiptTaxDeleteArgs>(args: SelectSubset<T, ReceiptTaxDeleteArgs<ExtArgs>>): Prisma__ReceiptTaxClient<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReceiptTax.
     * @param {ReceiptTaxUpdateArgs} args - Arguments to update one ReceiptTax.
     * @example
     * // Update one ReceiptTax
     * const receiptTax = await prisma.receiptTax.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptTaxUpdateArgs>(args: SelectSubset<T, ReceiptTaxUpdateArgs<ExtArgs>>): Prisma__ReceiptTaxClient<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReceiptTaxes.
     * @param {ReceiptTaxDeleteManyArgs} args - Arguments to filter ReceiptTaxes to delete.
     * @example
     * // Delete a few ReceiptTaxes
     * const { count } = await prisma.receiptTax.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptTaxDeleteManyArgs>(args?: SelectSubset<T, ReceiptTaxDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptTaxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptTaxUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptTaxes
     * const receiptTax = await prisma.receiptTax.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptTaxUpdateManyArgs>(args: SelectSubset<T, ReceiptTaxUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptTaxes and returns the data updated in the database.
     * @param {ReceiptTaxUpdateManyAndReturnArgs} args - Arguments to update many ReceiptTaxes.
     * @example
     * // Update many ReceiptTaxes
     * const receiptTax = await prisma.receiptTax.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReceiptTaxes and only return the `id`
     * const receiptTaxWithIdOnly = await prisma.receiptTax.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceiptTaxUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceiptTaxUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReceiptTax.
     * @param {ReceiptTaxUpsertArgs} args - Arguments to update or create a ReceiptTax.
     * @example
     * // Update or create a ReceiptTax
     * const receiptTax = await prisma.receiptTax.upsert({
     *   create: {
     *     // ... data to create a ReceiptTax
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptTax we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptTaxUpsertArgs>(args: SelectSubset<T, ReceiptTaxUpsertArgs<ExtArgs>>): Prisma__ReceiptTaxClient<$Result.GetResult<Prisma.$ReceiptTaxPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReceiptTaxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptTaxCountArgs} args - Arguments to filter ReceiptTaxes to count.
     * @example
     * // Count the number of ReceiptTaxes
     * const count = await prisma.receiptTax.count({
     *   where: {
     *     // ... the filter for the ReceiptTaxes we want to count
     *   }
     * })
    **/
    count<T extends ReceiptTaxCountArgs>(
      args?: Subset<T, ReceiptTaxCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptTaxCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptTax.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptTaxAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptTaxAggregateArgs>(args: Subset<T, ReceiptTaxAggregateArgs>): Prisma.PrismaPromise<GetReceiptTaxAggregateType<T>>

    /**
     * Group by ReceiptTax.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptTaxGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptTaxGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptTaxGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptTaxGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptTaxGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptTaxGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptTax model
   */
  readonly fields: ReceiptTaxFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptTax.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptTaxClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receipt<T extends ReceiptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReceiptDefaultArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptTax model
   */
  interface ReceiptTaxFieldRefs {
    readonly id: FieldRef<"ReceiptTax", 'String'>
    readonly receiptId: FieldRef<"ReceiptTax", 'String'>
    readonly taxType: FieldRef<"ReceiptTax", 'TaxType'>
    readonly taxName: FieldRef<"ReceiptTax", 'String'>
    readonly taxRate: FieldRef<"ReceiptTax", 'Float'>
    readonly taxableAmount: FieldRef<"ReceiptTax", 'Float'>
    readonly taxAmount: FieldRef<"ReceiptTax", 'Float'>
    readonly createdAt: FieldRef<"ReceiptTax", 'DateTime'>
    readonly updatedAt: FieldRef<"ReceiptTax", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptTax findUnique
   */
  export type ReceiptTaxFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptTax to fetch.
     */
    where: ReceiptTaxWhereUniqueInput
  }

  /**
   * ReceiptTax findUniqueOrThrow
   */
  export type ReceiptTaxFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptTax to fetch.
     */
    where: ReceiptTaxWhereUniqueInput
  }

  /**
   * ReceiptTax findFirst
   */
  export type ReceiptTaxFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptTax to fetch.
     */
    where?: ReceiptTaxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptTaxes to fetch.
     */
    orderBy?: ReceiptTaxOrderByWithRelationInput | ReceiptTaxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptTaxes.
     */
    cursor?: ReceiptTaxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptTaxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptTaxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptTaxes.
     */
    distinct?: ReceiptTaxScalarFieldEnum | ReceiptTaxScalarFieldEnum[]
  }

  /**
   * ReceiptTax findFirstOrThrow
   */
  export type ReceiptTaxFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptTax to fetch.
     */
    where?: ReceiptTaxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptTaxes to fetch.
     */
    orderBy?: ReceiptTaxOrderByWithRelationInput | ReceiptTaxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptTaxes.
     */
    cursor?: ReceiptTaxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptTaxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptTaxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptTaxes.
     */
    distinct?: ReceiptTaxScalarFieldEnum | ReceiptTaxScalarFieldEnum[]
  }

  /**
   * ReceiptTax findMany
   */
  export type ReceiptTaxFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptTaxes to fetch.
     */
    where?: ReceiptTaxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptTaxes to fetch.
     */
    orderBy?: ReceiptTaxOrderByWithRelationInput | ReceiptTaxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptTaxes.
     */
    cursor?: ReceiptTaxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptTaxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptTaxes.
     */
    skip?: number
    distinct?: ReceiptTaxScalarFieldEnum | ReceiptTaxScalarFieldEnum[]
  }

  /**
   * ReceiptTax create
   */
  export type ReceiptTaxCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * The data needed to create a ReceiptTax.
     */
    data: XOR<ReceiptTaxCreateInput, ReceiptTaxUncheckedCreateInput>
  }

  /**
   * ReceiptTax createMany
   */
  export type ReceiptTaxCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptTaxes.
     */
    data: ReceiptTaxCreateManyInput | ReceiptTaxCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptTax createManyAndReturn
   */
  export type ReceiptTaxCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * The data used to create many ReceiptTaxes.
     */
    data: ReceiptTaxCreateManyInput | ReceiptTaxCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptTax update
   */
  export type ReceiptTaxUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * The data needed to update a ReceiptTax.
     */
    data: XOR<ReceiptTaxUpdateInput, ReceiptTaxUncheckedUpdateInput>
    /**
     * Choose, which ReceiptTax to update.
     */
    where: ReceiptTaxWhereUniqueInput
  }

  /**
   * ReceiptTax updateMany
   */
  export type ReceiptTaxUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptTaxes.
     */
    data: XOR<ReceiptTaxUpdateManyMutationInput, ReceiptTaxUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptTaxes to update
     */
    where?: ReceiptTaxWhereInput
    /**
     * Limit how many ReceiptTaxes to update.
     */
    limit?: number
  }

  /**
   * ReceiptTax updateManyAndReturn
   */
  export type ReceiptTaxUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * The data used to update ReceiptTaxes.
     */
    data: XOR<ReceiptTaxUpdateManyMutationInput, ReceiptTaxUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptTaxes to update
     */
    where?: ReceiptTaxWhereInput
    /**
     * Limit how many ReceiptTaxes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptTax upsert
   */
  export type ReceiptTaxUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * The filter to search for the ReceiptTax to update in case it exists.
     */
    where: ReceiptTaxWhereUniqueInput
    /**
     * In case the ReceiptTax found by the `where` argument doesn't exist, create a new ReceiptTax with this data.
     */
    create: XOR<ReceiptTaxCreateInput, ReceiptTaxUncheckedCreateInput>
    /**
     * In case the ReceiptTax was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptTaxUpdateInput, ReceiptTaxUncheckedUpdateInput>
  }

  /**
   * ReceiptTax delete
   */
  export type ReceiptTaxDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
    /**
     * Filter which ReceiptTax to delete.
     */
    where: ReceiptTaxWhereUniqueInput
  }

  /**
   * ReceiptTax deleteMany
   */
  export type ReceiptTaxDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptTaxes to delete
     */
    where?: ReceiptTaxWhereInput
    /**
     * Limit how many ReceiptTaxes to delete.
     */
    limit?: number
  }

  /**
   * ReceiptTax without action
   */
  export type ReceiptTaxDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptTax
     */
    select?: ReceiptTaxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptTax
     */
    omit?: ReceiptTaxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptTaxInclude<ExtArgs> | null
  }


  /**
   * Model ReceiptPayment
   */

  export type AggregateReceiptPayment = {
    _count: ReceiptPaymentCountAggregateOutputType | null
    _avg: ReceiptPaymentAvgAggregateOutputType | null
    _sum: ReceiptPaymentSumAggregateOutputType | null
    _min: ReceiptPaymentMinAggregateOutputType | null
    _max: ReceiptPaymentMaxAggregateOutputType | null
  }

  export type ReceiptPaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type ReceiptPaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type ReceiptPaymentMinAggregateOutputType = {
    id: string | null
    receiptId: string | null
    paymentType: $Enums.PaymentType | null
    amount: number | null
    terminal: string | null
    reference: string | null
    cardNo: string | null
    authCode: string | null
    paymentMethod: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptPaymentMaxAggregateOutputType = {
    id: string | null
    receiptId: string | null
    paymentType: $Enums.PaymentType | null
    amount: number | null
    terminal: string | null
    reference: string | null
    cardNo: string | null
    authCode: string | null
    paymentMethod: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptPaymentCountAggregateOutputType = {
    id: number
    receiptId: number
    paymentType: number
    amount: number
    terminal: number
    reference: number
    cardNo: number
    authCode: number
    paymentMethod: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReceiptPaymentAvgAggregateInputType = {
    amount?: true
  }

  export type ReceiptPaymentSumAggregateInputType = {
    amount?: true
  }

  export type ReceiptPaymentMinAggregateInputType = {
    id?: true
    receiptId?: true
    paymentType?: true
    amount?: true
    terminal?: true
    reference?: true
    cardNo?: true
    authCode?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptPaymentMaxAggregateInputType = {
    id?: true
    receiptId?: true
    paymentType?: true
    amount?: true
    terminal?: true
    reference?: true
    cardNo?: true
    authCode?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptPaymentCountAggregateInputType = {
    id?: true
    receiptId?: true
    paymentType?: true
    amount?: true
    terminal?: true
    reference?: true
    cardNo?: true
    authCode?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReceiptPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptPayment to aggregate.
     */
    where?: ReceiptPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptPayments to fetch.
     */
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptPayments
    **/
    _count?: true | ReceiptPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptPaymentMaxAggregateInputType
  }

  export type GetReceiptPaymentAggregateType<T extends ReceiptPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptPayment[P]>
      : GetScalarType<T[P], AggregateReceiptPayment[P]>
  }




  export type ReceiptPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptPaymentWhereInput
    orderBy?: ReceiptPaymentOrderByWithAggregationInput | ReceiptPaymentOrderByWithAggregationInput[]
    by: ReceiptPaymentScalarFieldEnum[] | ReceiptPaymentScalarFieldEnum
    having?: ReceiptPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptPaymentCountAggregateInputType | true
    _avg?: ReceiptPaymentAvgAggregateInputType
    _sum?: ReceiptPaymentSumAggregateInputType
    _min?: ReceiptPaymentMinAggregateInputType
    _max?: ReceiptPaymentMaxAggregateInputType
  }

  export type ReceiptPaymentGroupByOutputType = {
    id: string
    receiptId: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal: string | null
    reference: string | null
    cardNo: string | null
    authCode: string | null
    paymentMethod: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReceiptPaymentCountAggregateOutputType | null
    _avg: ReceiptPaymentAvgAggregateOutputType | null
    _sum: ReceiptPaymentSumAggregateOutputType | null
    _min: ReceiptPaymentMinAggregateOutputType | null
    _max: ReceiptPaymentMaxAggregateOutputType | null
  }

  type GetReceiptPaymentGroupByPayload<T extends ReceiptPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptPaymentGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    paymentType?: boolean
    amount?: boolean
    terminal?: boolean
    reference?: boolean
    cardNo?: boolean
    authCode?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptPayment"]>

  export type ReceiptPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    paymentType?: boolean
    amount?: boolean
    terminal?: boolean
    reference?: boolean
    cardNo?: boolean
    authCode?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptPayment"]>

  export type ReceiptPaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    paymentType?: boolean
    amount?: boolean
    terminal?: boolean
    reference?: boolean
    cardNo?: boolean
    authCode?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptPayment"]>

  export type ReceiptPaymentSelectScalar = {
    id?: boolean
    receiptId?: boolean
    paymentType?: boolean
    amount?: boolean
    terminal?: boolean
    reference?: boolean
    cardNo?: boolean
    authCode?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReceiptPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "receiptId" | "paymentType" | "amount" | "terminal" | "reference" | "cardNo" | "authCode" | "paymentMethod" | "createdAt" | "updatedAt", ExtArgs["result"]["receiptPayment"]>
  export type ReceiptPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptPaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }

  export type $ReceiptPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptPayment"
    objects: {
      receipt: Prisma.$ReceiptPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptId: string
      paymentType: $Enums.PaymentType
      amount: number
      terminal: string | null
      reference: string | null
      cardNo: string | null
      authCode: string | null
      paymentMethod: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["receiptPayment"]>
    composites: {}
  }

  type ReceiptPaymentGetPayload<S extends boolean | null | undefined | ReceiptPaymentDefaultArgs> = $Result.GetResult<Prisma.$ReceiptPaymentPayload, S>

  type ReceiptPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceiptPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptPaymentCountAggregateInputType | true
    }

  export interface ReceiptPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptPayment'], meta: { name: 'ReceiptPayment' } }
    /**
     * Find zero or one ReceiptPayment that matches the filter.
     * @param {ReceiptPaymentFindUniqueArgs} args - Arguments to find a ReceiptPayment
     * @example
     * // Get one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptPaymentFindUniqueArgs>(args: SelectSubset<T, ReceiptPaymentFindUniqueArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReceiptPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceiptPaymentFindUniqueOrThrowArgs} args - Arguments to find a ReceiptPayment
     * @example
     * // Get one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentFindFirstArgs} args - Arguments to find a ReceiptPayment
     * @example
     * // Get one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptPaymentFindFirstArgs>(args?: SelectSubset<T, ReceiptPaymentFindFirstArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentFindFirstOrThrowArgs} args - Arguments to find a ReceiptPayment
     * @example
     * // Get one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReceiptPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptPayments
     * const receiptPayments = await prisma.receiptPayment.findMany()
     * 
     * // Get first 10 ReceiptPayments
     * const receiptPayments = await prisma.receiptPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptPaymentWithIdOnly = await prisma.receiptPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptPaymentFindManyArgs>(args?: SelectSubset<T, ReceiptPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReceiptPayment.
     * @param {ReceiptPaymentCreateArgs} args - Arguments to create a ReceiptPayment.
     * @example
     * // Create one ReceiptPayment
     * const ReceiptPayment = await prisma.receiptPayment.create({
     *   data: {
     *     // ... data to create a ReceiptPayment
     *   }
     * })
     * 
     */
    create<T extends ReceiptPaymentCreateArgs>(args: SelectSubset<T, ReceiptPaymentCreateArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReceiptPayments.
     * @param {ReceiptPaymentCreateManyArgs} args - Arguments to create many ReceiptPayments.
     * @example
     * // Create many ReceiptPayments
     * const receiptPayment = await prisma.receiptPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptPaymentCreateManyArgs>(args?: SelectSubset<T, ReceiptPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReceiptPayments and returns the data saved in the database.
     * @param {ReceiptPaymentCreateManyAndReturnArgs} args - Arguments to create many ReceiptPayments.
     * @example
     * // Create many ReceiptPayments
     * const receiptPayment = await prisma.receiptPayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReceiptPayments and only return the `id`
     * const receiptPaymentWithIdOnly = await prisma.receiptPayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReceiptPayment.
     * @param {ReceiptPaymentDeleteArgs} args - Arguments to delete one ReceiptPayment.
     * @example
     * // Delete one ReceiptPayment
     * const ReceiptPayment = await prisma.receiptPayment.delete({
     *   where: {
     *     // ... filter to delete one ReceiptPayment
     *   }
     * })
     * 
     */
    delete<T extends ReceiptPaymentDeleteArgs>(args: SelectSubset<T, ReceiptPaymentDeleteArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReceiptPayment.
     * @param {ReceiptPaymentUpdateArgs} args - Arguments to update one ReceiptPayment.
     * @example
     * // Update one ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptPaymentUpdateArgs>(args: SelectSubset<T, ReceiptPaymentUpdateArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReceiptPayments.
     * @param {ReceiptPaymentDeleteManyArgs} args - Arguments to filter ReceiptPayments to delete.
     * @example
     * // Delete a few ReceiptPayments
     * const { count } = await prisma.receiptPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptPaymentDeleteManyArgs>(args?: SelectSubset<T, ReceiptPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptPayments
     * const receiptPayment = await prisma.receiptPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptPaymentUpdateManyArgs>(args: SelectSubset<T, ReceiptPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptPayments and returns the data updated in the database.
     * @param {ReceiptPaymentUpdateManyAndReturnArgs} args - Arguments to update many ReceiptPayments.
     * @example
     * // Update many ReceiptPayments
     * const receiptPayment = await prisma.receiptPayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReceiptPayments and only return the `id`
     * const receiptPaymentWithIdOnly = await prisma.receiptPayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceiptPaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceiptPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReceiptPayment.
     * @param {ReceiptPaymentUpsertArgs} args - Arguments to update or create a ReceiptPayment.
     * @example
     * // Update or create a ReceiptPayment
     * const receiptPayment = await prisma.receiptPayment.upsert({
     *   create: {
     *     // ... data to create a ReceiptPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptPayment we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptPaymentUpsertArgs>(args: SelectSubset<T, ReceiptPaymentUpsertArgs<ExtArgs>>): Prisma__ReceiptPaymentClient<$Result.GetResult<Prisma.$ReceiptPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReceiptPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentCountArgs} args - Arguments to filter ReceiptPayments to count.
     * @example
     * // Count the number of ReceiptPayments
     * const count = await prisma.receiptPayment.count({
     *   where: {
     *     // ... the filter for the ReceiptPayments we want to count
     *   }
     * })
    **/
    count<T extends ReceiptPaymentCountArgs>(
      args?: Subset<T, ReceiptPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptPaymentAggregateArgs>(args: Subset<T, ReceiptPaymentAggregateArgs>): Prisma.PrismaPromise<GetReceiptPaymentAggregateType<T>>

    /**
     * Group by ReceiptPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptPaymentGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptPayment model
   */
  readonly fields: ReceiptPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receipt<T extends ReceiptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReceiptDefaultArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptPayment model
   */
  interface ReceiptPaymentFieldRefs {
    readonly id: FieldRef<"ReceiptPayment", 'String'>
    readonly receiptId: FieldRef<"ReceiptPayment", 'String'>
    readonly paymentType: FieldRef<"ReceiptPayment", 'PaymentType'>
    readonly amount: FieldRef<"ReceiptPayment", 'Float'>
    readonly terminal: FieldRef<"ReceiptPayment", 'String'>
    readonly reference: FieldRef<"ReceiptPayment", 'String'>
    readonly cardNo: FieldRef<"ReceiptPayment", 'String'>
    readonly authCode: FieldRef<"ReceiptPayment", 'String'>
    readonly paymentMethod: FieldRef<"ReceiptPayment", 'String'>
    readonly createdAt: FieldRef<"ReceiptPayment", 'DateTime'>
    readonly updatedAt: FieldRef<"ReceiptPayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptPayment findUnique
   */
  export type ReceiptPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayment to fetch.
     */
    where: ReceiptPaymentWhereUniqueInput
  }

  /**
   * ReceiptPayment findUniqueOrThrow
   */
  export type ReceiptPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayment to fetch.
     */
    where: ReceiptPaymentWhereUniqueInput
  }

  /**
   * ReceiptPayment findFirst
   */
  export type ReceiptPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayment to fetch.
     */
    where?: ReceiptPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptPayments to fetch.
     */
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptPayments.
     */
    cursor?: ReceiptPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptPayments.
     */
    distinct?: ReceiptPaymentScalarFieldEnum | ReceiptPaymentScalarFieldEnum[]
  }

  /**
   * ReceiptPayment findFirstOrThrow
   */
  export type ReceiptPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayment to fetch.
     */
    where?: ReceiptPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptPayments to fetch.
     */
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptPayments.
     */
    cursor?: ReceiptPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptPayments.
     */
    distinct?: ReceiptPaymentScalarFieldEnum | ReceiptPaymentScalarFieldEnum[]
  }

  /**
   * ReceiptPayment findMany
   */
  export type ReceiptPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptPayments to fetch.
     */
    where?: ReceiptPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptPayments to fetch.
     */
    orderBy?: ReceiptPaymentOrderByWithRelationInput | ReceiptPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptPayments.
     */
    cursor?: ReceiptPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptPayments.
     */
    skip?: number
    distinct?: ReceiptPaymentScalarFieldEnum | ReceiptPaymentScalarFieldEnum[]
  }

  /**
   * ReceiptPayment create
   */
  export type ReceiptPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a ReceiptPayment.
     */
    data: XOR<ReceiptPaymentCreateInput, ReceiptPaymentUncheckedCreateInput>
  }

  /**
   * ReceiptPayment createMany
   */
  export type ReceiptPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptPayments.
     */
    data: ReceiptPaymentCreateManyInput | ReceiptPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptPayment createManyAndReturn
   */
  export type ReceiptPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * The data used to create many ReceiptPayments.
     */
    data: ReceiptPaymentCreateManyInput | ReceiptPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptPayment update
   */
  export type ReceiptPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a ReceiptPayment.
     */
    data: XOR<ReceiptPaymentUpdateInput, ReceiptPaymentUncheckedUpdateInput>
    /**
     * Choose, which ReceiptPayment to update.
     */
    where: ReceiptPaymentWhereUniqueInput
  }

  /**
   * ReceiptPayment updateMany
   */
  export type ReceiptPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptPayments.
     */
    data: XOR<ReceiptPaymentUpdateManyMutationInput, ReceiptPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptPayments to update
     */
    where?: ReceiptPaymentWhereInput
    /**
     * Limit how many ReceiptPayments to update.
     */
    limit?: number
  }

  /**
   * ReceiptPayment updateManyAndReturn
   */
  export type ReceiptPaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * The data used to update ReceiptPayments.
     */
    data: XOR<ReceiptPaymentUpdateManyMutationInput, ReceiptPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptPayments to update
     */
    where?: ReceiptPaymentWhereInput
    /**
     * Limit how many ReceiptPayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptPayment upsert
   */
  export type ReceiptPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the ReceiptPayment to update in case it exists.
     */
    where: ReceiptPaymentWhereUniqueInput
    /**
     * In case the ReceiptPayment found by the `where` argument doesn't exist, create a new ReceiptPayment with this data.
     */
    create: XOR<ReceiptPaymentCreateInput, ReceiptPaymentUncheckedCreateInput>
    /**
     * In case the ReceiptPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptPaymentUpdateInput, ReceiptPaymentUncheckedUpdateInput>
  }

  /**
   * ReceiptPayment delete
   */
  export type ReceiptPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
    /**
     * Filter which ReceiptPayment to delete.
     */
    where: ReceiptPaymentWhereUniqueInput
  }

  /**
   * ReceiptPayment deleteMany
   */
  export type ReceiptPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptPayments to delete
     */
    where?: ReceiptPaymentWhereInput
    /**
     * Limit how many ReceiptPayments to delete.
     */
    limit?: number
  }

  /**
   * ReceiptPayment without action
   */
  export type ReceiptPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptPayment
     */
    select?: ReceiptPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptPayment
     */
    omit?: ReceiptPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptPaymentInclude<ExtArgs> | null
  }


  /**
   * Model ReceiptItem
   */

  export type AggregateReceiptItem = {
    _count: ReceiptItemCountAggregateOutputType | null
    _avg: ReceiptItemAvgAggregateOutputType | null
    _sum: ReceiptItemSumAggregateOutputType | null
    _min: ReceiptItemMinAggregateOutputType | null
    _max: ReceiptItemMaxAggregateOutputType | null
  }

  export type ReceiptItemAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    itemTotal: number | null
    itemDiscount: number | null
    taxAmount: number | null
    finalAmount: number | null
  }

  export type ReceiptItemSumAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    itemTotal: number | null
    itemDiscount: number | null
    taxAmount: number | null
    finalAmount: number | null
  }

  export type ReceiptItemMinAggregateOutputType = {
    id: string | null
    receiptId: string | null
    name: string | null
    sku: string | null
    description: string | null
    modelNumber: string | null
    category: string | null
    quantity: number | null
    unitPrice: number | null
    itemTotal: number | null
    itemDiscount: number | null
    taxAmount: number | null
    finalAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptItemMaxAggregateOutputType = {
    id: string | null
    receiptId: string | null
    name: string | null
    sku: string | null
    description: string | null
    modelNumber: string | null
    category: string | null
    quantity: number | null
    unitPrice: number | null
    itemTotal: number | null
    itemDiscount: number | null
    taxAmount: number | null
    finalAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReceiptItemCountAggregateOutputType = {
    id: number
    receiptId: number
    name: number
    sku: number
    description: number
    modelNumber: number
    category: number
    quantity: number
    unitPrice: number
    itemTotal: number
    itemDiscount: number
    taxAmount: number
    finalAmount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReceiptItemAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    itemTotal?: true
    itemDiscount?: true
    taxAmount?: true
    finalAmount?: true
  }

  export type ReceiptItemSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    itemTotal?: true
    itemDiscount?: true
    taxAmount?: true
    finalAmount?: true
  }

  export type ReceiptItemMinAggregateInputType = {
    id?: true
    receiptId?: true
    name?: true
    sku?: true
    description?: true
    modelNumber?: true
    category?: true
    quantity?: true
    unitPrice?: true
    itemTotal?: true
    itemDiscount?: true
    taxAmount?: true
    finalAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptItemMaxAggregateInputType = {
    id?: true
    receiptId?: true
    name?: true
    sku?: true
    description?: true
    modelNumber?: true
    category?: true
    quantity?: true
    unitPrice?: true
    itemTotal?: true
    itemDiscount?: true
    taxAmount?: true
    finalAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReceiptItemCountAggregateInputType = {
    id?: true
    receiptId?: true
    name?: true
    sku?: true
    description?: true
    modelNumber?: true
    category?: true
    quantity?: true
    unitPrice?: true
    itemTotal?: true
    itemDiscount?: true
    taxAmount?: true
    finalAmount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReceiptItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptItem to aggregate.
     */
    where?: ReceiptItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptItems to fetch.
     */
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptItems
    **/
    _count?: true | ReceiptItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptItemMaxAggregateInputType
  }

  export type GetReceiptItemAggregateType<T extends ReceiptItemAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptItem[P]>
      : GetScalarType<T[P], AggregateReceiptItem[P]>
  }




  export type ReceiptItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptItemWhereInput
    orderBy?: ReceiptItemOrderByWithAggregationInput | ReceiptItemOrderByWithAggregationInput[]
    by: ReceiptItemScalarFieldEnum[] | ReceiptItemScalarFieldEnum
    having?: ReceiptItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptItemCountAggregateInputType | true
    _avg?: ReceiptItemAvgAggregateInputType
    _sum?: ReceiptItemSumAggregateInputType
    _min?: ReceiptItemMinAggregateInputType
    _max?: ReceiptItemMaxAggregateInputType
  }

  export type ReceiptItemGroupByOutputType = {
    id: string
    receiptId: string
    name: string
    sku: string | null
    description: string | null
    modelNumber: string | null
    category: string | null
    quantity: number
    unitPrice: number
    itemTotal: number
    itemDiscount: number | null
    taxAmount: number
    finalAmount: number
    createdAt: Date
    updatedAt: Date
    _count: ReceiptItemCountAggregateOutputType | null
    _avg: ReceiptItemAvgAggregateOutputType | null
    _sum: ReceiptItemSumAggregateOutputType | null
    _min: ReceiptItemMinAggregateOutputType | null
    _max: ReceiptItemMaxAggregateOutputType | null
  }

  type GetReceiptItemGroupByPayload<T extends ReceiptItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptItemGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptItemGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    name?: boolean
    sku?: boolean
    description?: boolean
    modelNumber?: boolean
    category?: boolean
    quantity?: boolean
    unitPrice?: boolean
    itemTotal?: boolean
    itemDiscount?: boolean
    taxAmount?: boolean
    finalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptItem"]>

  export type ReceiptItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    name?: boolean
    sku?: boolean
    description?: boolean
    modelNumber?: boolean
    category?: boolean
    quantity?: boolean
    unitPrice?: boolean
    itemTotal?: boolean
    itemDiscount?: boolean
    taxAmount?: boolean
    finalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptItem"]>

  export type ReceiptItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    receiptId?: boolean
    name?: boolean
    sku?: boolean
    description?: boolean
    modelNumber?: boolean
    category?: boolean
    quantity?: boolean
    unitPrice?: boolean
    itemTotal?: boolean
    itemDiscount?: boolean
    taxAmount?: boolean
    finalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receiptItem"]>

  export type ReceiptItemSelectScalar = {
    id?: boolean
    receiptId?: boolean
    name?: boolean
    sku?: boolean
    description?: boolean
    modelNumber?: boolean
    category?: boolean
    quantity?: boolean
    unitPrice?: boolean
    itemTotal?: boolean
    itemDiscount?: boolean
    taxAmount?: boolean
    finalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReceiptItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "receiptId" | "name" | "sku" | "description" | "modelNumber" | "category" | "quantity" | "unitPrice" | "itemTotal" | "itemDiscount" | "taxAmount" | "finalAmount" | "createdAt" | "updatedAt", ExtArgs["result"]["receiptItem"]>
  export type ReceiptItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }
  export type ReceiptItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }

  export type $ReceiptItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptItem"
    objects: {
      receipt: Prisma.$ReceiptPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      receiptId: string
      name: string
      sku: string | null
      description: string | null
      modelNumber: string | null
      category: string | null
      quantity: number
      unitPrice: number
      itemTotal: number
      itemDiscount: number | null
      taxAmount: number
      finalAmount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["receiptItem"]>
    composites: {}
  }

  type ReceiptItemGetPayload<S extends boolean | null | undefined | ReceiptItemDefaultArgs> = $Result.GetResult<Prisma.$ReceiptItemPayload, S>

  type ReceiptItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceiptItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptItemCountAggregateInputType | true
    }

  export interface ReceiptItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptItem'], meta: { name: 'ReceiptItem' } }
    /**
     * Find zero or one ReceiptItem that matches the filter.
     * @param {ReceiptItemFindUniqueArgs} args - Arguments to find a ReceiptItem
     * @example
     * // Get one ReceiptItem
     * const receiptItem = await prisma.receiptItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptItemFindUniqueArgs>(args: SelectSubset<T, ReceiptItemFindUniqueArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReceiptItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceiptItemFindUniqueOrThrowArgs} args - Arguments to find a ReceiptItem
     * @example
     * // Get one ReceiptItem
     * const receiptItem = await prisma.receiptItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemFindFirstArgs} args - Arguments to find a ReceiptItem
     * @example
     * // Get one ReceiptItem
     * const receiptItem = await prisma.receiptItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptItemFindFirstArgs>(args?: SelectSubset<T, ReceiptItemFindFirstArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemFindFirstOrThrowArgs} args - Arguments to find a ReceiptItem
     * @example
     * // Get one ReceiptItem
     * const receiptItem = await prisma.receiptItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReceiptItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptItems
     * const receiptItems = await prisma.receiptItem.findMany()
     * 
     * // Get first 10 ReceiptItems
     * const receiptItems = await prisma.receiptItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptItemWithIdOnly = await prisma.receiptItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptItemFindManyArgs>(args?: SelectSubset<T, ReceiptItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReceiptItem.
     * @param {ReceiptItemCreateArgs} args - Arguments to create a ReceiptItem.
     * @example
     * // Create one ReceiptItem
     * const ReceiptItem = await prisma.receiptItem.create({
     *   data: {
     *     // ... data to create a ReceiptItem
     *   }
     * })
     * 
     */
    create<T extends ReceiptItemCreateArgs>(args: SelectSubset<T, ReceiptItemCreateArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReceiptItems.
     * @param {ReceiptItemCreateManyArgs} args - Arguments to create many ReceiptItems.
     * @example
     * // Create many ReceiptItems
     * const receiptItem = await prisma.receiptItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptItemCreateManyArgs>(args?: SelectSubset<T, ReceiptItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReceiptItems and returns the data saved in the database.
     * @param {ReceiptItemCreateManyAndReturnArgs} args - Arguments to create many ReceiptItems.
     * @example
     * // Create many ReceiptItems
     * const receiptItem = await prisma.receiptItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReceiptItems and only return the `id`
     * const receiptItemWithIdOnly = await prisma.receiptItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReceiptItem.
     * @param {ReceiptItemDeleteArgs} args - Arguments to delete one ReceiptItem.
     * @example
     * // Delete one ReceiptItem
     * const ReceiptItem = await prisma.receiptItem.delete({
     *   where: {
     *     // ... filter to delete one ReceiptItem
     *   }
     * })
     * 
     */
    delete<T extends ReceiptItemDeleteArgs>(args: SelectSubset<T, ReceiptItemDeleteArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReceiptItem.
     * @param {ReceiptItemUpdateArgs} args - Arguments to update one ReceiptItem.
     * @example
     * // Update one ReceiptItem
     * const receiptItem = await prisma.receiptItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptItemUpdateArgs>(args: SelectSubset<T, ReceiptItemUpdateArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReceiptItems.
     * @param {ReceiptItemDeleteManyArgs} args - Arguments to filter ReceiptItems to delete.
     * @example
     * // Delete a few ReceiptItems
     * const { count } = await prisma.receiptItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptItemDeleteManyArgs>(args?: SelectSubset<T, ReceiptItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptItems
     * const receiptItem = await prisma.receiptItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptItemUpdateManyArgs>(args: SelectSubset<T, ReceiptItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptItems and returns the data updated in the database.
     * @param {ReceiptItemUpdateManyAndReturnArgs} args - Arguments to update many ReceiptItems.
     * @example
     * // Update many ReceiptItems
     * const receiptItem = await prisma.receiptItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReceiptItems and only return the `id`
     * const receiptItemWithIdOnly = await prisma.receiptItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceiptItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceiptItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReceiptItem.
     * @param {ReceiptItemUpsertArgs} args - Arguments to update or create a ReceiptItem.
     * @example
     * // Update or create a ReceiptItem
     * const receiptItem = await prisma.receiptItem.upsert({
     *   create: {
     *     // ... data to create a ReceiptItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptItem we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptItemUpsertArgs>(args: SelectSubset<T, ReceiptItemUpsertArgs<ExtArgs>>): Prisma__ReceiptItemClient<$Result.GetResult<Prisma.$ReceiptItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReceiptItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemCountArgs} args - Arguments to filter ReceiptItems to count.
     * @example
     * // Count the number of ReceiptItems
     * const count = await prisma.receiptItem.count({
     *   where: {
     *     // ... the filter for the ReceiptItems we want to count
     *   }
     * })
    **/
    count<T extends ReceiptItemCountArgs>(
      args?: Subset<T, ReceiptItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptItemAggregateArgs>(args: Subset<T, ReceiptItemAggregateArgs>): Prisma.PrismaPromise<GetReceiptItemAggregateType<T>>

    /**
     * Group by ReceiptItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptItemGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptItem model
   */
  readonly fields: ReceiptItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receipt<T extends ReceiptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReceiptDefaultArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptItem model
   */
  interface ReceiptItemFieldRefs {
    readonly id: FieldRef<"ReceiptItem", 'String'>
    readonly receiptId: FieldRef<"ReceiptItem", 'String'>
    readonly name: FieldRef<"ReceiptItem", 'String'>
    readonly sku: FieldRef<"ReceiptItem", 'String'>
    readonly description: FieldRef<"ReceiptItem", 'String'>
    readonly modelNumber: FieldRef<"ReceiptItem", 'String'>
    readonly category: FieldRef<"ReceiptItem", 'String'>
    readonly quantity: FieldRef<"ReceiptItem", 'Float'>
    readonly unitPrice: FieldRef<"ReceiptItem", 'Float'>
    readonly itemTotal: FieldRef<"ReceiptItem", 'Float'>
    readonly itemDiscount: FieldRef<"ReceiptItem", 'Float'>
    readonly taxAmount: FieldRef<"ReceiptItem", 'Float'>
    readonly finalAmount: FieldRef<"ReceiptItem", 'Float'>
    readonly createdAt: FieldRef<"ReceiptItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ReceiptItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptItem findUnique
   */
  export type ReceiptItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItem to fetch.
     */
    where: ReceiptItemWhereUniqueInput
  }

  /**
   * ReceiptItem findUniqueOrThrow
   */
  export type ReceiptItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItem to fetch.
     */
    where: ReceiptItemWhereUniqueInput
  }

  /**
   * ReceiptItem findFirst
   */
  export type ReceiptItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItem to fetch.
     */
    where?: ReceiptItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptItems to fetch.
     */
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptItems.
     */
    cursor?: ReceiptItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptItems.
     */
    distinct?: ReceiptItemScalarFieldEnum | ReceiptItemScalarFieldEnum[]
  }

  /**
   * ReceiptItem findFirstOrThrow
   */
  export type ReceiptItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItem to fetch.
     */
    where?: ReceiptItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptItems to fetch.
     */
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptItems.
     */
    cursor?: ReceiptItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptItems.
     */
    distinct?: ReceiptItemScalarFieldEnum | ReceiptItemScalarFieldEnum[]
  }

  /**
   * ReceiptItem findMany
   */
  export type ReceiptItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptItems to fetch.
     */
    where?: ReceiptItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptItems to fetch.
     */
    orderBy?: ReceiptItemOrderByWithRelationInput | ReceiptItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptItems.
     */
    cursor?: ReceiptItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptItems.
     */
    skip?: number
    distinct?: ReceiptItemScalarFieldEnum | ReceiptItemScalarFieldEnum[]
  }

  /**
   * ReceiptItem create
   */
  export type ReceiptItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ReceiptItem.
     */
    data: XOR<ReceiptItemCreateInput, ReceiptItemUncheckedCreateInput>
  }

  /**
   * ReceiptItem createMany
   */
  export type ReceiptItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptItems.
     */
    data: ReceiptItemCreateManyInput | ReceiptItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReceiptItem createManyAndReturn
   */
  export type ReceiptItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * The data used to create many ReceiptItems.
     */
    data: ReceiptItemCreateManyInput | ReceiptItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptItem update
   */
  export type ReceiptItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ReceiptItem.
     */
    data: XOR<ReceiptItemUpdateInput, ReceiptItemUncheckedUpdateInput>
    /**
     * Choose, which ReceiptItem to update.
     */
    where: ReceiptItemWhereUniqueInput
  }

  /**
   * ReceiptItem updateMany
   */
  export type ReceiptItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptItems.
     */
    data: XOR<ReceiptItemUpdateManyMutationInput, ReceiptItemUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptItems to update
     */
    where?: ReceiptItemWhereInput
    /**
     * Limit how many ReceiptItems to update.
     */
    limit?: number
  }

  /**
   * ReceiptItem updateManyAndReturn
   */
  export type ReceiptItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * The data used to update ReceiptItems.
     */
    data: XOR<ReceiptItemUpdateManyMutationInput, ReceiptItemUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptItems to update
     */
    where?: ReceiptItemWhereInput
    /**
     * Limit how many ReceiptItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptItem upsert
   */
  export type ReceiptItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ReceiptItem to update in case it exists.
     */
    where: ReceiptItemWhereUniqueInput
    /**
     * In case the ReceiptItem found by the `where` argument doesn't exist, create a new ReceiptItem with this data.
     */
    create: XOR<ReceiptItemCreateInput, ReceiptItemUncheckedCreateInput>
    /**
     * In case the ReceiptItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptItemUpdateInput, ReceiptItemUncheckedUpdateInput>
  }

  /**
   * ReceiptItem delete
   */
  export type ReceiptItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
    /**
     * Filter which ReceiptItem to delete.
     */
    where: ReceiptItemWhereUniqueInput
  }

  /**
   * ReceiptItem deleteMany
   */
  export type ReceiptItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptItems to delete
     */
    where?: ReceiptItemWhereInput
    /**
     * Limit how many ReceiptItems to delete.
     */
    limit?: number
  }

  /**
   * ReceiptItem without action
   */
  export type ReceiptItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptItem
     */
    select?: ReceiptItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptItem
     */
    omit?: ReceiptItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptItemInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: number | null
    userId: string | null
    action: string | null
    category: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    action: string | null
    category: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    category: number
    description: number
    ipAddress: number
    userAgent: number
    metadata: number
    sessionId: number
    createdAt: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    category?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    category?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    category?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    metadata?: true
    sessionId?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: number
    userId: string | null
    action: string
    category: string
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    metadata: JsonValue
    sessionId: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    category?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    sessionId?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    category?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    sessionId?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    category?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    sessionId?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    category?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    sessionId?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "category" | "description" | "ipAddress" | "userAgent" | "metadata" | "sessionId" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string | null
      action: string
      category: string
      description: string | null
      ipAddress: string | null
      userAgent: string | null
      metadata: Prisma.JsonValue
      sessionId: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'Int'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly category: FieldRef<"AuditLog", 'String'>
    readonly description: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly metadata: FieldRef<"AuditLog", 'Json'>
    readonly sessionId: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    image: string | null
    imageName: string | null
    imageType: $Enums.ImageType | null
    relatedEntity: string | null
    bucket: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    image: string | null
    imageName: string | null
    imageType: $Enums.ImageType | null
    relatedEntity: string | null
    bucket: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    image: number
    imageName: number
    imageType: number
    relatedEntity: number
    bucket: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    image?: true
    imageName?: true
    imageType?: true
    relatedEntity?: true
    bucket?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    image?: true
    imageName?: true
    imageType?: true
    relatedEntity?: true
    bucket?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    image?: true
    imageName?: true
    imageType?: true
    relatedEntity?: true
    bucket?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    image: string
    imageName: string
    imageType: $Enums.ImageType
    relatedEntity: string | null
    bucket: string
    createdAt: Date | null
    updatedAt: Date | null
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    imageName?: boolean
    imageType?: boolean
    relatedEntity?: boolean
    bucket?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    imageName?: boolean
    imageType?: boolean
    relatedEntity?: boolean
    bucket?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    imageName?: boolean
    imageType?: boolean
    relatedEntity?: boolean
    bucket?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    image?: boolean
    imageName?: boolean
    imageType?: boolean
    relatedEntity?: boolean
    bucket?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "image" | "imageName" | "imageType" | "relatedEntity" | "bucket" | "createdAt" | "updatedAt", ExtArgs["result"]["image"]>

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      image: string
      imageName: string
      imageType: $Enums.ImageType
      relatedEntity: string | null
      bucket: string
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly image: FieldRef<"Image", 'String'>
    readonly imageName: FieldRef<"Image", 'String'>
    readonly imageType: FieldRef<"Image", 'ImageType'>
    readonly relatedEntity: FieldRef<"Image", 'String'>
    readonly bucket: FieldRef<"Image", 'String'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly updatedAt: FieldRef<"Image", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    lastName: 'lastName',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    role: 'role',
    postalCode: 'postalCode',
    city: 'city',
    regionId: 'regionId',
    phoneNumber: 'phoneNumber',
    phoneVerified: 'phoneVerified',
    timezone: 'timezone',
    locale: 'locale',
    status: 'status',
    createdById: 'createdById'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expiresAt: 'expiresAt',
    token: 'token',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    impersonatedBy: 'impersonatedBy',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    accountId: 'accountId',
    providerId: 'providerId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    userId: 'userId'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const EmailChangeRecordScalarFieldEnum: {
    id: 'id',
    email: 'email',
    newEmail: 'newEmail',
    otp: 'otp',
    expiresAt: 'expiresAt',
    attempts: 'attempts',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type EmailChangeRecordScalarFieldEnum = (typeof EmailChangeRecordScalarFieldEnum)[keyof typeof EmailChangeRecordScalarFieldEnum]


  export const PhoneChangeRecordScalarFieldEnum: {
    id: 'id',
    phoneNumber: 'phoneNumber',
    newPhoneNumber: 'newPhoneNumber',
    otp: 'otp',
    expiresAt: 'expiresAt',
    attempts: 'attempts',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type PhoneChangeRecordScalarFieldEnum = (typeof PhoneChangeRecordScalarFieldEnum)[keyof typeof PhoneChangeRecordScalarFieldEnum]


  export const RateLimitScalarFieldEnum: {
    id: 'id',
    key: 'key',
    count: 'count',
    resetTime: 'resetTime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RateLimitScalarFieldEnum = (typeof RateLimitScalarFieldEnum)[keyof typeof RateLimitScalarFieldEnum]


  export const ConsumerScalarFieldEnum: {
    id: 'id',
    barcode: 'barcode',
    userId: 'userId',
    gender: 'gender',
    dateOfBirth: 'dateOfBirth',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConsumerScalarFieldEnum = (typeof ConsumerScalarFieldEnum)[keyof typeof ConsumerScalarFieldEnum]


  export const BusinessUserAccessScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    accessLevel: 'accessLevel',
    permissions: 'permissions',
    jobTitle: 'jobTitle',
    merchantId: 'merchantId',
    brandId: 'brandId',
    storeId: 'storeId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type BusinessUserAccessScalarFieldEnum = (typeof BusinessUserAccessScalarFieldEnum)[keyof typeof BusinessUserAccessScalarFieldEnum]


  export const CurrencyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    symbol: 'symbol',
    decimals: 'decimals',
    demonym: 'demonym',
    majorSingle: 'majorSingle',
    majorPlural: 'majorPlural',
    ISOnum: 'ISOnum',
    symbolNative: 'symbolNative',
    minorSingle: 'minorSingle',
    minorPlural: 'minorPlural',
    ISOdigits: 'ISOdigits',
    numToBasic: 'numToBasic'
  };

  export type CurrencyScalarFieldEnum = (typeof CurrencyScalarFieldEnum)[keyof typeof CurrencyScalarFieldEnum]


  export const ContinentScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ContinentScalarFieldEnum = (typeof ContinentScalarFieldEnum)[keyof typeof ContinentScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    isoCode: 'isoCode',
    isoCode3: 'isoCode3',
    name: 'name',
    flag: 'flag',
    latitude: 'latitude',
    longitude: 'longitude',
    currencyId: 'currencyId',
    continentId: 'continentId',
    phonePrefix: 'phonePrefix',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    countryId: 'countryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const BusinessRegistrationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    number: 'number',
    issuingBody: 'issuingBody',
    validFrom: 'validFrom',
    validUntil: 'validUntil',
    isActive: 'isActive',
    merchantId: 'merchantId',
    brandId: 'brandId',
    storeId: 'storeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BusinessRegistrationScalarFieldEnum = (typeof BusinessRegistrationScalarFieldEnum)[keyof typeof BusinessRegistrationScalarFieldEnum]


  export const MerchantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    status: 'status',
    phoneNumber: 'phoneNumber',
    genericEmail: 'genericEmail',
    invoiceEmail: 'invoiceEmail',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    addressLine3: 'addressLine3',
    city: 'city',
    postalCode: 'postalCode',
    regionId: 'regionId',
    countryId: 'countryId',
    timezone: 'timezone',
    logo: 'logo',
    website: 'website',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MerchantScalarFieldEnum = (typeof MerchantScalarFieldEnum)[keyof typeof MerchantScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    status: 'status',
    merchantId: 'merchantId',
    name: 'name',
    slug: 'slug',
    genericEmail: 'genericEmail',
    invoiceEmail: 'invoiceEmail',
    tradingAsName: 'tradingAsName',
    logo: 'logo',
    website: 'website',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    addressLine3: 'addressLine3',
    city: 'city',
    postalCode: 'postalCode',
    regionId: 'regionId',
    countryId: 'countryId',
    phoneNumber: 'phoneNumber',
    timezone: 'timezone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const StoreScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    status: 'status',
    brandId: 'brandId',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    addressLine3: 'addressLine3',
    city: 'city',
    regionId: 'regionId',
    postalCode: 'postalCode',
    countryId: 'countryId',
    formattedAddress: 'formattedAddress',
    latitude: 'latitude',
    longitude: 'longitude',
    phoneNumber: 'phoneNumber',
    timezone: 'timezone',
    currencyId: 'currencyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


  export const ReceiptScalarFieldEnum: {
    id: 'id',
    receiptNumber: 'receiptNumber',
    consumerId: 'consumerId',
    storeId: 'storeId',
    subTotal: 'subTotal',
    totalTax: 'totalTax',
    cardSurcharge: 'cardSurcharge',
    discount: 'discount',
    tip: 'tip',
    roundingAdjustment: 'roundingAdjustment',
    finalTotal: 'finalTotal',
    otherInformation: 'otherInformation',
    receiptDateTime: 'receiptDateTime',
    timezone: 'timezone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReceiptScalarFieldEnum = (typeof ReceiptScalarFieldEnum)[keyof typeof ReceiptScalarFieldEnum]


  export const ReceiptTaxScalarFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    taxType: 'taxType',
    taxName: 'taxName',
    taxRate: 'taxRate',
    taxableAmount: 'taxableAmount',
    taxAmount: 'taxAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReceiptTaxScalarFieldEnum = (typeof ReceiptTaxScalarFieldEnum)[keyof typeof ReceiptTaxScalarFieldEnum]


  export const ReceiptPaymentScalarFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    paymentType: 'paymentType',
    amount: 'amount',
    terminal: 'terminal',
    reference: 'reference',
    cardNo: 'cardNo',
    authCode: 'authCode',
    paymentMethod: 'paymentMethod',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReceiptPaymentScalarFieldEnum = (typeof ReceiptPaymentScalarFieldEnum)[keyof typeof ReceiptPaymentScalarFieldEnum]


  export const ReceiptItemScalarFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    name: 'name',
    sku: 'sku',
    description: 'description',
    modelNumber: 'modelNumber',
    category: 'category',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    itemTotal: 'itemTotal',
    itemDiscount: 'itemDiscount',
    taxAmount: 'taxAmount',
    finalAmount: 'finalAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReceiptItemScalarFieldEnum = (typeof ReceiptItemScalarFieldEnum)[keyof typeof ReceiptItemScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    category: 'category',
    description: 'description',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    metadata: 'metadata',
    sessionId: 'sessionId',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    image: 'image',
    imageName: 'imageName',
    imageType: 'imageType',
    relatedEntity: 'relatedEntity',
    bucket: 'bucket',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    lastName: 'lastName',
    email: 'email',
    image: 'image',
    postalCode: 'postalCode',
    city: 'city',
    regionId: 'regionId',
    phoneNumber: 'phoneNumber',
    timezone: 'timezone',
    locale: 'locale',
    createdById: 'createdById'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    token: 'token',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    impersonatedBy: 'impersonatedBy',
    userId: 'userId'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const AccountOrderByRelevanceFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    scope: 'scope',
    password: 'password',
    userId: 'userId'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const VerificationOrderByRelevanceFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value'
  };

  export type VerificationOrderByRelevanceFieldEnum = (typeof VerificationOrderByRelevanceFieldEnum)[keyof typeof VerificationOrderByRelevanceFieldEnum]


  export const EmailChangeRecordOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    newEmail: 'newEmail',
    otp: 'otp',
    userId: 'userId'
  };

  export type EmailChangeRecordOrderByRelevanceFieldEnum = (typeof EmailChangeRecordOrderByRelevanceFieldEnum)[keyof typeof EmailChangeRecordOrderByRelevanceFieldEnum]


  export const PhoneChangeRecordOrderByRelevanceFieldEnum: {
    id: 'id',
    phoneNumber: 'phoneNumber',
    newPhoneNumber: 'newPhoneNumber',
    otp: 'otp',
    userId: 'userId'
  };

  export type PhoneChangeRecordOrderByRelevanceFieldEnum = (typeof PhoneChangeRecordOrderByRelevanceFieldEnum)[keyof typeof PhoneChangeRecordOrderByRelevanceFieldEnum]


  export const RateLimitOrderByRelevanceFieldEnum: {
    id: 'id',
    key: 'key'
  };

  export type RateLimitOrderByRelevanceFieldEnum = (typeof RateLimitOrderByRelevanceFieldEnum)[keyof typeof RateLimitOrderByRelevanceFieldEnum]


  export const ConsumerOrderByRelevanceFieldEnum: {
    id: 'id',
    barcode: 'barcode',
    userId: 'userId'
  };

  export type ConsumerOrderByRelevanceFieldEnum = (typeof ConsumerOrderByRelevanceFieldEnum)[keyof typeof ConsumerOrderByRelevanceFieldEnum]


  export const BusinessUserAccessOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    jobTitle: 'jobTitle',
    merchantId: 'merchantId',
    brandId: 'brandId',
    storeId: 'storeId',
    createdById: 'createdById'
  };

  export type BusinessUserAccessOrderByRelevanceFieldEnum = (typeof BusinessUserAccessOrderByRelevanceFieldEnum)[keyof typeof BusinessUserAccessOrderByRelevanceFieldEnum]


  export const CurrencyOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    symbol: 'symbol',
    demonym: 'demonym',
    majorSingle: 'majorSingle',
    majorPlural: 'majorPlural',
    symbolNative: 'symbolNative',
    minorSingle: 'minorSingle',
    minorPlural: 'minorPlural'
  };

  export type CurrencyOrderByRelevanceFieldEnum = (typeof CurrencyOrderByRelevanceFieldEnum)[keyof typeof CurrencyOrderByRelevanceFieldEnum]


  export const ContinentOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ContinentOrderByRelevanceFieldEnum = (typeof ContinentOrderByRelevanceFieldEnum)[keyof typeof ContinentOrderByRelevanceFieldEnum]


  export const CountryOrderByRelevanceFieldEnum: {
    id: 'id',
    isoCode: 'isoCode',
    isoCode3: 'isoCode3',
    name: 'name',
    flag: 'flag',
    currencyId: 'currencyId',
    continentId: 'continentId',
    phonePrefix: 'phonePrefix'
  };

  export type CountryOrderByRelevanceFieldEnum = (typeof CountryOrderByRelevanceFieldEnum)[keyof typeof CountryOrderByRelevanceFieldEnum]


  export const RegionOrderByRelevanceFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    countryId: 'countryId'
  };

  export type RegionOrderByRelevanceFieldEnum = (typeof RegionOrderByRelevanceFieldEnum)[keyof typeof RegionOrderByRelevanceFieldEnum]


  export const BusinessRegistrationOrderByRelevanceFieldEnum: {
    id: 'id',
    number: 'number',
    issuingBody: 'issuingBody',
    merchantId: 'merchantId',
    brandId: 'brandId',
    storeId: 'storeId'
  };

  export type BusinessRegistrationOrderByRelevanceFieldEnum = (typeof BusinessRegistrationOrderByRelevanceFieldEnum)[keyof typeof BusinessRegistrationOrderByRelevanceFieldEnum]


  export const MerchantOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    phoneNumber: 'phoneNumber',
    genericEmail: 'genericEmail',
    invoiceEmail: 'invoiceEmail',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    addressLine3: 'addressLine3',
    city: 'city',
    postalCode: 'postalCode',
    regionId: 'regionId',
    countryId: 'countryId',
    timezone: 'timezone',
    logo: 'logo',
    website: 'website'
  };

  export type MerchantOrderByRelevanceFieldEnum = (typeof MerchantOrderByRelevanceFieldEnum)[keyof typeof MerchantOrderByRelevanceFieldEnum]


  export const BrandOrderByRelevanceFieldEnum: {
    id: 'id',
    merchantId: 'merchantId',
    name: 'name',
    slug: 'slug',
    genericEmail: 'genericEmail',
    invoiceEmail: 'invoiceEmail',
    tradingAsName: 'tradingAsName',
    logo: 'logo',
    website: 'website',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    addressLine3: 'addressLine3',
    city: 'city',
    postalCode: 'postalCode',
    regionId: 'regionId',
    countryId: 'countryId',
    phoneNumber: 'phoneNumber',
    timezone: 'timezone'
  };

  export type BrandOrderByRelevanceFieldEnum = (typeof BrandOrderByRelevanceFieldEnum)[keyof typeof BrandOrderByRelevanceFieldEnum]


  export const StoreOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    brandId: 'brandId',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    addressLine3: 'addressLine3',
    city: 'city',
    regionId: 'regionId',
    postalCode: 'postalCode',
    countryId: 'countryId',
    formattedAddress: 'formattedAddress',
    phoneNumber: 'phoneNumber',
    timezone: 'timezone',
    currencyId: 'currencyId'
  };

  export type StoreOrderByRelevanceFieldEnum = (typeof StoreOrderByRelevanceFieldEnum)[keyof typeof StoreOrderByRelevanceFieldEnum]


  export const ReceiptOrderByRelevanceFieldEnum: {
    id: 'id',
    receiptNumber: 'receiptNumber',
    consumerId: 'consumerId',
    storeId: 'storeId',
    otherInformation: 'otherInformation',
    timezone: 'timezone'
  };

  export type ReceiptOrderByRelevanceFieldEnum = (typeof ReceiptOrderByRelevanceFieldEnum)[keyof typeof ReceiptOrderByRelevanceFieldEnum]


  export const ReceiptTaxOrderByRelevanceFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    taxName: 'taxName'
  };

  export type ReceiptTaxOrderByRelevanceFieldEnum = (typeof ReceiptTaxOrderByRelevanceFieldEnum)[keyof typeof ReceiptTaxOrderByRelevanceFieldEnum]


  export const ReceiptPaymentOrderByRelevanceFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    terminal: 'terminal',
    reference: 'reference',
    cardNo: 'cardNo',
    authCode: 'authCode',
    paymentMethod: 'paymentMethod'
  };

  export type ReceiptPaymentOrderByRelevanceFieldEnum = (typeof ReceiptPaymentOrderByRelevanceFieldEnum)[keyof typeof ReceiptPaymentOrderByRelevanceFieldEnum]


  export const ReceiptItemOrderByRelevanceFieldEnum: {
    id: 'id',
    receiptId: 'receiptId',
    name: 'name',
    sku: 'sku',
    description: 'description',
    modelNumber: 'modelNumber',
    category: 'category'
  };

  export type ReceiptItemOrderByRelevanceFieldEnum = (typeof ReceiptItemOrderByRelevanceFieldEnum)[keyof typeof ReceiptItemOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const AuditLogOrderByRelevanceFieldEnum: {
    userId: 'userId',
    action: 'action',
    category: 'category',
    description: 'description',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    sessionId: 'sessionId'
  };

  export type AuditLogOrderByRelevanceFieldEnum = (typeof AuditLogOrderByRelevanceFieldEnum)[keyof typeof AuditLogOrderByRelevanceFieldEnum]


  export const ImageOrderByRelevanceFieldEnum: {
    id: 'id',
    image: 'image',
    imageName: 'imageName',
    relatedEntity: 'relatedEntity',
    bucket: 'bucket'
  };

  export type ImageOrderByRelevanceFieldEnum = (typeof ImageOrderByRelevanceFieldEnum)[keyof typeof ImageOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'AccessLevel'
   */
  export type EnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccessLevel'>
    


  /**
   * Reference to a field of type 'AccessLevel[]'
   */
  export type ListEnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccessLevel[]'>
    


  /**
   * Reference to a field of type 'Permission[]'
   */
  export type ListEnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission[]'>
    


  /**
   * Reference to a field of type 'Permission'
   */
  export type EnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'BusinessRegistrationType'
   */
  export type EnumBusinessRegistrationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessRegistrationType'>
    


  /**
   * Reference to a field of type 'BusinessRegistrationType[]'
   */
  export type ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessRegistrationType[]'>
    


  /**
   * Reference to a field of type 'TaxType'
   */
  export type EnumTaxTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaxType'>
    


  /**
   * Reference to a field of type 'TaxType[]'
   */
  export type ListEnumTaxTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaxType[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'ImageType'
   */
  export type EnumImageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ImageType'>
    


  /**
   * Reference to a field of type 'ImageType[]'
   */
  export type ListEnumImageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ImageType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    name?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    postalCode?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    regionId?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    phoneVerified?: BoolFilter<"User"> | boolean
    timezone?: StringNullableFilter<"User"> | string | null
    locale?: StringNullableFilter<"User"> | string | null
    status?: EnumStatusFilter<"User"> | $Enums.Status
    createdById?: StringNullableFilter<"User"> | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    consumerProfile?: XOR<ConsumerNullableScalarRelationFilter, ConsumerWhereInput> | null
    businessAccess?: BusinessUserAccessListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdUsers?: UserListRelationFilter
    createdAccessRecords?: BusinessUserAccessListRelationFilter
    emailChangeRecords?: EmailChangeRecordListRelationFilter
    phoneChangeRecords?: PhoneChangeRecordListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    postalCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    regionId?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    phoneVerified?: SortOrder
    timezone?: SortOrderInput | SortOrder
    locale?: SortOrderInput | SortOrder
    status?: SortOrder
    createdById?: SortOrderInput | SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    region?: RegionOrderByWithRelationInput
    consumerProfile?: ConsumerOrderByWithRelationInput
    businessAccess?: BusinessUserAccessOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    createdUsers?: UserOrderByRelationAggregateInput
    createdAccessRecords?: BusinessUserAccessOrderByRelationAggregateInput
    emailChangeRecords?: EmailChangeRecordOrderByRelationAggregateInput
    phoneChangeRecords?: PhoneChangeRecordOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    name?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    postalCode?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    regionId?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    phoneVerified?: BoolFilter<"User"> | boolean
    timezone?: StringNullableFilter<"User"> | string | null
    locale?: StringNullableFilter<"User"> | string | null
    status?: EnumStatusFilter<"User"> | $Enums.Status
    createdById?: StringNullableFilter<"User"> | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    consumerProfile?: XOR<ConsumerNullableScalarRelationFilter, ConsumerWhereInput> | null
    businessAccess?: BusinessUserAccessListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdUsers?: UserListRelationFilter
    createdAccessRecords?: BusinessUserAccessListRelationFilter
    emailChangeRecords?: EmailChangeRecordListRelationFilter
    phoneChangeRecords?: PhoneChangeRecordListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    postalCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    regionId?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    phoneVerified?: SortOrder
    timezone?: SortOrderInput | SortOrder
    locale?: SortOrderInput | SortOrder
    status?: SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    name?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    postalCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    city?: StringNullableWithAggregatesFilter<"User"> | string | null
    regionId?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneVerified?: BoolWithAggregatesFilter<"User"> | boolean
    timezone?: StringNullableWithAggregatesFilter<"User"> | string | null
    locale?: StringNullableWithAggregatesFilter<"User"> | string | null
    status?: EnumStatusWithAggregatesFilter<"User"> | $Enums.Status
    createdById?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    token?: StringWithAggregatesFilter<"Session"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    impersonatedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userId?: StringWithAggregatesFilter<"Session"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    userId?: StringFilter<"Account"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    userId?: StringFilter<"Account"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    userId?: StringWithAggregatesFilter<"Account"> | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    _relevance?: VerificationOrderByRelevanceInput
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    createdAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Verification"> | Date | string | null
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Verification"> | Date | string | null
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
  }

  export type EmailChangeRecordWhereInput = {
    AND?: EmailChangeRecordWhereInput | EmailChangeRecordWhereInput[]
    OR?: EmailChangeRecordWhereInput[]
    NOT?: EmailChangeRecordWhereInput | EmailChangeRecordWhereInput[]
    id?: StringFilter<"EmailChangeRecord"> | string
    email?: StringFilter<"EmailChangeRecord"> | string
    newEmail?: StringFilter<"EmailChangeRecord"> | string
    otp?: StringFilter<"EmailChangeRecord"> | string
    expiresAt?: DateTimeFilter<"EmailChangeRecord"> | Date | string
    attempts?: IntFilter<"EmailChangeRecord"> | number
    createdAt?: DateTimeFilter<"EmailChangeRecord"> | Date | string
    userId?: StringFilter<"EmailChangeRecord"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EmailChangeRecordOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    newEmail?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: EmailChangeRecordOrderByRelevanceInput
  }

  export type EmailChangeRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailChangeRecordWhereInput | EmailChangeRecordWhereInput[]
    OR?: EmailChangeRecordWhereInput[]
    NOT?: EmailChangeRecordWhereInput | EmailChangeRecordWhereInput[]
    email?: StringFilter<"EmailChangeRecord"> | string
    newEmail?: StringFilter<"EmailChangeRecord"> | string
    otp?: StringFilter<"EmailChangeRecord"> | string
    expiresAt?: DateTimeFilter<"EmailChangeRecord"> | Date | string
    attempts?: IntFilter<"EmailChangeRecord"> | number
    createdAt?: DateTimeFilter<"EmailChangeRecord"> | Date | string
    userId?: StringFilter<"EmailChangeRecord"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type EmailChangeRecordOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    newEmail?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: EmailChangeRecordCountOrderByAggregateInput
    _avg?: EmailChangeRecordAvgOrderByAggregateInput
    _max?: EmailChangeRecordMaxOrderByAggregateInput
    _min?: EmailChangeRecordMinOrderByAggregateInput
    _sum?: EmailChangeRecordSumOrderByAggregateInput
  }

  export type EmailChangeRecordScalarWhereWithAggregatesInput = {
    AND?: EmailChangeRecordScalarWhereWithAggregatesInput | EmailChangeRecordScalarWhereWithAggregatesInput[]
    OR?: EmailChangeRecordScalarWhereWithAggregatesInput[]
    NOT?: EmailChangeRecordScalarWhereWithAggregatesInput | EmailChangeRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailChangeRecord"> | string
    email?: StringWithAggregatesFilter<"EmailChangeRecord"> | string
    newEmail?: StringWithAggregatesFilter<"EmailChangeRecord"> | string
    otp?: StringWithAggregatesFilter<"EmailChangeRecord"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"EmailChangeRecord"> | Date | string
    attempts?: IntWithAggregatesFilter<"EmailChangeRecord"> | number
    createdAt?: DateTimeWithAggregatesFilter<"EmailChangeRecord"> | Date | string
    userId?: StringWithAggregatesFilter<"EmailChangeRecord"> | string
  }

  export type PhoneChangeRecordWhereInput = {
    AND?: PhoneChangeRecordWhereInput | PhoneChangeRecordWhereInput[]
    OR?: PhoneChangeRecordWhereInput[]
    NOT?: PhoneChangeRecordWhereInput | PhoneChangeRecordWhereInput[]
    id?: StringFilter<"PhoneChangeRecord"> | string
    phoneNumber?: StringNullableFilter<"PhoneChangeRecord"> | string | null
    newPhoneNumber?: StringFilter<"PhoneChangeRecord"> | string
    otp?: StringFilter<"PhoneChangeRecord"> | string
    expiresAt?: DateTimeFilter<"PhoneChangeRecord"> | Date | string
    attempts?: IntFilter<"PhoneChangeRecord"> | number
    createdAt?: DateTimeFilter<"PhoneChangeRecord"> | Date | string
    userId?: StringFilter<"PhoneChangeRecord"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PhoneChangeRecordOrderByWithRelationInput = {
    id?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    newPhoneNumber?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: PhoneChangeRecordOrderByRelevanceInput
  }

  export type PhoneChangeRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PhoneChangeRecordWhereInput | PhoneChangeRecordWhereInput[]
    OR?: PhoneChangeRecordWhereInput[]
    NOT?: PhoneChangeRecordWhereInput | PhoneChangeRecordWhereInput[]
    phoneNumber?: StringNullableFilter<"PhoneChangeRecord"> | string | null
    newPhoneNumber?: StringFilter<"PhoneChangeRecord"> | string
    otp?: StringFilter<"PhoneChangeRecord"> | string
    expiresAt?: DateTimeFilter<"PhoneChangeRecord"> | Date | string
    attempts?: IntFilter<"PhoneChangeRecord"> | number
    createdAt?: DateTimeFilter<"PhoneChangeRecord"> | Date | string
    userId?: StringFilter<"PhoneChangeRecord"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PhoneChangeRecordOrderByWithAggregationInput = {
    id?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    newPhoneNumber?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: PhoneChangeRecordCountOrderByAggregateInput
    _avg?: PhoneChangeRecordAvgOrderByAggregateInput
    _max?: PhoneChangeRecordMaxOrderByAggregateInput
    _min?: PhoneChangeRecordMinOrderByAggregateInput
    _sum?: PhoneChangeRecordSumOrderByAggregateInput
  }

  export type PhoneChangeRecordScalarWhereWithAggregatesInput = {
    AND?: PhoneChangeRecordScalarWhereWithAggregatesInput | PhoneChangeRecordScalarWhereWithAggregatesInput[]
    OR?: PhoneChangeRecordScalarWhereWithAggregatesInput[]
    NOT?: PhoneChangeRecordScalarWhereWithAggregatesInput | PhoneChangeRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PhoneChangeRecord"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"PhoneChangeRecord"> | string | null
    newPhoneNumber?: StringWithAggregatesFilter<"PhoneChangeRecord"> | string
    otp?: StringWithAggregatesFilter<"PhoneChangeRecord"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"PhoneChangeRecord"> | Date | string
    attempts?: IntWithAggregatesFilter<"PhoneChangeRecord"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PhoneChangeRecord"> | Date | string
    userId?: StringWithAggregatesFilter<"PhoneChangeRecord"> | string
  }

  export type RateLimitWhereInput = {
    AND?: RateLimitWhereInput | RateLimitWhereInput[]
    OR?: RateLimitWhereInput[]
    NOT?: RateLimitWhereInput | RateLimitWhereInput[]
    id?: StringFilter<"RateLimit"> | string
    key?: StringFilter<"RateLimit"> | string
    count?: IntFilter<"RateLimit"> | number
    resetTime?: DateTimeFilter<"RateLimit"> | Date | string
    createdAt?: DateTimeFilter<"RateLimit"> | Date | string
    updatedAt?: DateTimeFilter<"RateLimit"> | Date | string
  }

  export type RateLimitOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    count?: SortOrder
    resetTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: RateLimitOrderByRelevanceInput
  }

  export type RateLimitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: RateLimitWhereInput | RateLimitWhereInput[]
    OR?: RateLimitWhereInput[]
    NOT?: RateLimitWhereInput | RateLimitWhereInput[]
    count?: IntFilter<"RateLimit"> | number
    resetTime?: DateTimeFilter<"RateLimit"> | Date | string
    createdAt?: DateTimeFilter<"RateLimit"> | Date | string
    updatedAt?: DateTimeFilter<"RateLimit"> | Date | string
  }, "id" | "key">

  export type RateLimitOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    count?: SortOrder
    resetTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RateLimitCountOrderByAggregateInput
    _avg?: RateLimitAvgOrderByAggregateInput
    _max?: RateLimitMaxOrderByAggregateInput
    _min?: RateLimitMinOrderByAggregateInput
    _sum?: RateLimitSumOrderByAggregateInput
  }

  export type RateLimitScalarWhereWithAggregatesInput = {
    AND?: RateLimitScalarWhereWithAggregatesInput | RateLimitScalarWhereWithAggregatesInput[]
    OR?: RateLimitScalarWhereWithAggregatesInput[]
    NOT?: RateLimitScalarWhereWithAggregatesInput | RateLimitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RateLimit"> | string
    key?: StringWithAggregatesFilter<"RateLimit"> | string
    count?: IntWithAggregatesFilter<"RateLimit"> | number
    resetTime?: DateTimeWithAggregatesFilter<"RateLimit"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RateLimit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RateLimit"> | Date | string
  }

  export type ConsumerWhereInput = {
    AND?: ConsumerWhereInput | ConsumerWhereInput[]
    OR?: ConsumerWhereInput[]
    NOT?: ConsumerWhereInput | ConsumerWhereInput[]
    id?: StringFilter<"Consumer"> | string
    barcode?: StringFilter<"Consumer"> | string
    userId?: StringFilter<"Consumer"> | string
    gender?: EnumGenderNullableFilter<"Consumer"> | $Enums.Gender | null
    dateOfBirth?: DateTimeNullableFilter<"Consumer"> | Date | string | null
    createdAt?: DateTimeFilter<"Consumer"> | Date | string
    updatedAt?: DateTimeFilter<"Consumer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    receipts?: ReceiptListRelationFilter
  }

  export type ConsumerOrderByWithRelationInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    receipts?: ReceiptOrderByRelationAggregateInput
    _relevance?: ConsumerOrderByRelevanceInput
  }

  export type ConsumerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    barcode?: string
    userId?: string
    AND?: ConsumerWhereInput | ConsumerWhereInput[]
    OR?: ConsumerWhereInput[]
    NOT?: ConsumerWhereInput | ConsumerWhereInput[]
    gender?: EnumGenderNullableFilter<"Consumer"> | $Enums.Gender | null
    dateOfBirth?: DateTimeNullableFilter<"Consumer"> | Date | string | null
    createdAt?: DateTimeFilter<"Consumer"> | Date | string
    updatedAt?: DateTimeFilter<"Consumer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    receipts?: ReceiptListRelationFilter
  }, "id" | "barcode" | "userId">

  export type ConsumerOrderByWithAggregationInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConsumerCountOrderByAggregateInput
    _max?: ConsumerMaxOrderByAggregateInput
    _min?: ConsumerMinOrderByAggregateInput
  }

  export type ConsumerScalarWhereWithAggregatesInput = {
    AND?: ConsumerScalarWhereWithAggregatesInput | ConsumerScalarWhereWithAggregatesInput[]
    OR?: ConsumerScalarWhereWithAggregatesInput[]
    NOT?: ConsumerScalarWhereWithAggregatesInput | ConsumerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Consumer"> | string
    barcode?: StringWithAggregatesFilter<"Consumer"> | string
    userId?: StringWithAggregatesFilter<"Consumer"> | string
    gender?: EnumGenderNullableWithAggregatesFilter<"Consumer"> | $Enums.Gender | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Consumer"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Consumer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Consumer"> | Date | string
  }

  export type BusinessUserAccessWhereInput = {
    AND?: BusinessUserAccessWhereInput | BusinessUserAccessWhereInput[]
    OR?: BusinessUserAccessWhereInput[]
    NOT?: BusinessUserAccessWhereInput | BusinessUserAccessWhereInput[]
    id?: StringFilter<"BusinessUserAccess"> | string
    userId?: StringFilter<"BusinessUserAccess"> | string
    accessLevel?: EnumAccessLevelFilter<"BusinessUserAccess"> | $Enums.AccessLevel
    permissions?: EnumPermissionNullableListFilter<"BusinessUserAccess">
    jobTitle?: StringNullableFilter<"BusinessUserAccess"> | string | null
    merchantId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    brandId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    storeId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    isActive?: BoolFilter<"BusinessUserAccess"> | boolean
    createdAt?: DateTimeFilter<"BusinessUserAccess"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessUserAccess"> | Date | string
    createdById?: StringNullableFilter<"BusinessUserAccess"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    merchant?: XOR<MerchantNullableScalarRelationFilter, MerchantWhereInput> | null
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, StoreWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type BusinessUserAccessOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    accessLevel?: SortOrder
    permissions?: SortOrder
    jobTitle?: SortOrderInput | SortOrder
    merchantId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    storeId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    merchant?: MerchantOrderByWithRelationInput
    brand?: BrandOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    _relevance?: BusinessUserAccessOrderByRelevanceInput
  }

  export type BusinessUserAccessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_merchantId_brandId_storeId?: BusinessUserAccessUserIdMerchantIdBrandIdStoreIdCompoundUniqueInput
    AND?: BusinessUserAccessWhereInput | BusinessUserAccessWhereInput[]
    OR?: BusinessUserAccessWhereInput[]
    NOT?: BusinessUserAccessWhereInput | BusinessUserAccessWhereInput[]
    userId?: StringFilter<"BusinessUserAccess"> | string
    accessLevel?: EnumAccessLevelFilter<"BusinessUserAccess"> | $Enums.AccessLevel
    permissions?: EnumPermissionNullableListFilter<"BusinessUserAccess">
    jobTitle?: StringNullableFilter<"BusinessUserAccess"> | string | null
    merchantId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    brandId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    storeId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    isActive?: BoolFilter<"BusinessUserAccess"> | boolean
    createdAt?: DateTimeFilter<"BusinessUserAccess"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessUserAccess"> | Date | string
    createdById?: StringNullableFilter<"BusinessUserAccess"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    merchant?: XOR<MerchantNullableScalarRelationFilter, MerchantWhereInput> | null
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, StoreWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "userId_merchantId_brandId_storeId">

  export type BusinessUserAccessOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    accessLevel?: SortOrder
    permissions?: SortOrder
    jobTitle?: SortOrderInput | SortOrder
    merchantId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    storeId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: BusinessUserAccessCountOrderByAggregateInput
    _max?: BusinessUserAccessMaxOrderByAggregateInput
    _min?: BusinessUserAccessMinOrderByAggregateInput
  }

  export type BusinessUserAccessScalarWhereWithAggregatesInput = {
    AND?: BusinessUserAccessScalarWhereWithAggregatesInput | BusinessUserAccessScalarWhereWithAggregatesInput[]
    OR?: BusinessUserAccessScalarWhereWithAggregatesInput[]
    NOT?: BusinessUserAccessScalarWhereWithAggregatesInput | BusinessUserAccessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BusinessUserAccess"> | string
    userId?: StringWithAggregatesFilter<"BusinessUserAccess"> | string
    accessLevel?: EnumAccessLevelWithAggregatesFilter<"BusinessUserAccess"> | $Enums.AccessLevel
    permissions?: EnumPermissionNullableListFilter<"BusinessUserAccess">
    jobTitle?: StringNullableWithAggregatesFilter<"BusinessUserAccess"> | string | null
    merchantId?: StringNullableWithAggregatesFilter<"BusinessUserAccess"> | string | null
    brandId?: StringNullableWithAggregatesFilter<"BusinessUserAccess"> | string | null
    storeId?: StringNullableWithAggregatesFilter<"BusinessUserAccess"> | string | null
    isActive?: BoolWithAggregatesFilter<"BusinessUserAccess"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BusinessUserAccess"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BusinessUserAccess"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"BusinessUserAccess"> | string | null
  }

  export type CurrencyWhereInput = {
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    id?: StringFilter<"Currency"> | string
    name?: StringFilter<"Currency"> | string
    code?: StringFilter<"Currency"> | string
    symbol?: StringNullableFilter<"Currency"> | string | null
    decimals?: IntNullableFilter<"Currency"> | number | null
    demonym?: StringNullableFilter<"Currency"> | string | null
    majorSingle?: StringNullableFilter<"Currency"> | string | null
    majorPlural?: StringNullableFilter<"Currency"> | string | null
    ISOnum?: IntNullableFilter<"Currency"> | number | null
    symbolNative?: StringFilter<"Currency"> | string
    minorSingle?: StringNullableFilter<"Currency"> | string | null
    minorPlural?: StringNullableFilter<"Currency"> | string | null
    ISOdigits?: IntNullableFilter<"Currency"> | number | null
    numToBasic?: IntNullableFilter<"Currency"> | number | null
    countries?: CountryListRelationFilter
    stores?: StoreListRelationFilter
  }

  export type CurrencyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    symbol?: SortOrderInput | SortOrder
    decimals?: SortOrderInput | SortOrder
    demonym?: SortOrderInput | SortOrder
    majorSingle?: SortOrderInput | SortOrder
    majorPlural?: SortOrderInput | SortOrder
    ISOnum?: SortOrderInput | SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrderInput | SortOrder
    minorPlural?: SortOrderInput | SortOrder
    ISOdigits?: SortOrderInput | SortOrder
    numToBasic?: SortOrderInput | SortOrder
    countries?: CountryOrderByRelationAggregateInput
    stores?: StoreOrderByRelationAggregateInput
    _relevance?: CurrencyOrderByRelevanceInput
  }

  export type CurrencyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: CurrencyWhereInput | CurrencyWhereInput[]
    OR?: CurrencyWhereInput[]
    NOT?: CurrencyWhereInput | CurrencyWhereInput[]
    symbol?: StringNullableFilter<"Currency"> | string | null
    decimals?: IntNullableFilter<"Currency"> | number | null
    demonym?: StringNullableFilter<"Currency"> | string | null
    majorSingle?: StringNullableFilter<"Currency"> | string | null
    majorPlural?: StringNullableFilter<"Currency"> | string | null
    ISOnum?: IntNullableFilter<"Currency"> | number | null
    symbolNative?: StringFilter<"Currency"> | string
    minorSingle?: StringNullableFilter<"Currency"> | string | null
    minorPlural?: StringNullableFilter<"Currency"> | string | null
    ISOdigits?: IntNullableFilter<"Currency"> | number | null
    numToBasic?: IntNullableFilter<"Currency"> | number | null
    countries?: CountryListRelationFilter
    stores?: StoreListRelationFilter
  }, "id" | "name" | "code">

  export type CurrencyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    symbol?: SortOrderInput | SortOrder
    decimals?: SortOrderInput | SortOrder
    demonym?: SortOrderInput | SortOrder
    majorSingle?: SortOrderInput | SortOrder
    majorPlural?: SortOrderInput | SortOrder
    ISOnum?: SortOrderInput | SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrderInput | SortOrder
    minorPlural?: SortOrderInput | SortOrder
    ISOdigits?: SortOrderInput | SortOrder
    numToBasic?: SortOrderInput | SortOrder
    _count?: CurrencyCountOrderByAggregateInput
    _avg?: CurrencyAvgOrderByAggregateInput
    _max?: CurrencyMaxOrderByAggregateInput
    _min?: CurrencyMinOrderByAggregateInput
    _sum?: CurrencySumOrderByAggregateInput
  }

  export type CurrencyScalarWhereWithAggregatesInput = {
    AND?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    OR?: CurrencyScalarWhereWithAggregatesInput[]
    NOT?: CurrencyScalarWhereWithAggregatesInput | CurrencyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Currency"> | string
    name?: StringWithAggregatesFilter<"Currency"> | string
    code?: StringWithAggregatesFilter<"Currency"> | string
    symbol?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    decimals?: IntNullableWithAggregatesFilter<"Currency"> | number | null
    demonym?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    majorSingle?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    majorPlural?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    ISOnum?: IntNullableWithAggregatesFilter<"Currency"> | number | null
    symbolNative?: StringWithAggregatesFilter<"Currency"> | string
    minorSingle?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    minorPlural?: StringNullableWithAggregatesFilter<"Currency"> | string | null
    ISOdigits?: IntNullableWithAggregatesFilter<"Currency"> | number | null
    numToBasic?: IntNullableWithAggregatesFilter<"Currency"> | number | null
  }

  export type ContinentWhereInput = {
    AND?: ContinentWhereInput | ContinentWhereInput[]
    OR?: ContinentWhereInput[]
    NOT?: ContinentWhereInput | ContinentWhereInput[]
    id?: StringFilter<"Continent"> | string
    name?: StringFilter<"Continent"> | string
    countries?: CountryListRelationFilter
  }

  export type ContinentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    countries?: CountryOrderByRelationAggregateInput
    _relevance?: ContinentOrderByRelevanceInput
  }

  export type ContinentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ContinentWhereInput | ContinentWhereInput[]
    OR?: ContinentWhereInput[]
    NOT?: ContinentWhereInput | ContinentWhereInput[]
    countries?: CountryListRelationFilter
  }, "id" | "name">

  export type ContinentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ContinentCountOrderByAggregateInput
    _max?: ContinentMaxOrderByAggregateInput
    _min?: ContinentMinOrderByAggregateInput
  }

  export type ContinentScalarWhereWithAggregatesInput = {
    AND?: ContinentScalarWhereWithAggregatesInput | ContinentScalarWhereWithAggregatesInput[]
    OR?: ContinentScalarWhereWithAggregatesInput[]
    NOT?: ContinentScalarWhereWithAggregatesInput | ContinentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Continent"> | string
    name?: StringWithAggregatesFilter<"Continent"> | string
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: StringFilter<"Country"> | string
    isoCode?: StringFilter<"Country"> | string
    isoCode3?: StringFilter<"Country"> | string
    name?: StringFilter<"Country"> | string
    flag?: StringFilter<"Country"> | string
    latitude?: FloatFilter<"Country"> | number
    longitude?: FloatFilter<"Country"> | number
    currencyId?: StringFilter<"Country"> | string
    continentId?: StringFilter<"Country"> | string
    phonePrefix?: StringNullableFilter<"Country"> | string | null
    createdAt?: DateTimeFilter<"Country"> | Date | string
    updatedAt?: DateTimeFilter<"Country"> | Date | string
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    continent?: XOR<ContinentScalarRelationFilter, ContinentWhereInput>
    regions?: RegionListRelationFilter
    merchants?: MerchantListRelationFilter
    brands?: BrandListRelationFilter
    stores?: StoreListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    isoCode?: SortOrder
    isoCode3?: SortOrder
    name?: SortOrder
    flag?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    currencyId?: SortOrder
    continentId?: SortOrder
    phonePrefix?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currency?: CurrencyOrderByWithRelationInput
    continent?: ContinentOrderByWithRelationInput
    regions?: RegionOrderByRelationAggregateInput
    merchants?: MerchantOrderByRelationAggregateInput
    brands?: BrandOrderByRelationAggregateInput
    stores?: StoreOrderByRelationAggregateInput
    _relevance?: CountryOrderByRelevanceInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    isoCode?: string
    isoCode3?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    name?: StringFilter<"Country"> | string
    flag?: StringFilter<"Country"> | string
    latitude?: FloatFilter<"Country"> | number
    longitude?: FloatFilter<"Country"> | number
    currencyId?: StringFilter<"Country"> | string
    continentId?: StringFilter<"Country"> | string
    phonePrefix?: StringNullableFilter<"Country"> | string | null
    createdAt?: DateTimeFilter<"Country"> | Date | string
    updatedAt?: DateTimeFilter<"Country"> | Date | string
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    continent?: XOR<ContinentScalarRelationFilter, ContinentWhereInput>
    regions?: RegionListRelationFilter
    merchants?: MerchantListRelationFilter
    brands?: BrandListRelationFilter
    stores?: StoreListRelationFilter
  }, "id" | "isoCode" | "isoCode3">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    isoCode?: SortOrder
    isoCode3?: SortOrder
    name?: SortOrder
    flag?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    currencyId?: SortOrder
    continentId?: SortOrder
    phonePrefix?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Country"> | string
    isoCode?: StringWithAggregatesFilter<"Country"> | string
    isoCode3?: StringWithAggregatesFilter<"Country"> | string
    name?: StringWithAggregatesFilter<"Country"> | string
    flag?: StringWithAggregatesFilter<"Country"> | string
    latitude?: FloatWithAggregatesFilter<"Country"> | number
    longitude?: FloatWithAggregatesFilter<"Country"> | number
    currencyId?: StringWithAggregatesFilter<"Country"> | string
    continentId?: StringWithAggregatesFilter<"Country"> | string
    phonePrefix?: StringNullableWithAggregatesFilter<"Country"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Country"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Country"> | Date | string
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: StringFilter<"Region"> | string
    code?: StringFilter<"Region"> | string
    name?: StringFilter<"Region"> | string
    countryId?: StringFilter<"Region"> | string
    createdAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    merchants?: MerchantListRelationFilter
    brands?: BrandListRelationFilter
    stores?: StoreListRelationFilter
    users?: UserListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    country?: CountryOrderByWithRelationInput
    merchants?: MerchantOrderByRelationAggregateInput
    brands?: BrandOrderByRelationAggregateInput
    stores?: StoreOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    _relevance?: RegionOrderByRelevanceInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    countryId_code?: RegionCountryIdCodeCompoundUniqueInput
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    code?: StringFilter<"Region"> | string
    name?: StringFilter<"Region"> | string
    countryId?: StringFilter<"Region"> | string
    createdAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    merchants?: MerchantListRelationFilter
    brands?: BrandListRelationFilter
    stores?: StoreListRelationFilter
    users?: UserListRelationFilter
  }, "id" | "countryId_code">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Region"> | string
    code?: StringWithAggregatesFilter<"Region"> | string
    name?: StringWithAggregatesFilter<"Region"> | string
    countryId?: StringWithAggregatesFilter<"Region"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
  }

  export type BusinessRegistrationWhereInput = {
    AND?: BusinessRegistrationWhereInput | BusinessRegistrationWhereInput[]
    OR?: BusinessRegistrationWhereInput[]
    NOT?: BusinessRegistrationWhereInput | BusinessRegistrationWhereInput[]
    id?: StringFilter<"BusinessRegistration"> | string
    type?: EnumBusinessRegistrationTypeFilter<"BusinessRegistration"> | $Enums.BusinessRegistrationType
    number?: StringFilter<"BusinessRegistration"> | string
    issuingBody?: StringNullableFilter<"BusinessRegistration"> | string | null
    validFrom?: DateTimeNullableFilter<"BusinessRegistration"> | Date | string | null
    validUntil?: DateTimeNullableFilter<"BusinessRegistration"> | Date | string | null
    isActive?: BoolFilter<"BusinessRegistration"> | boolean
    merchantId?: StringNullableFilter<"BusinessRegistration"> | string | null
    brandId?: StringNullableFilter<"BusinessRegistration"> | string | null
    storeId?: StringNullableFilter<"BusinessRegistration"> | string | null
    createdAt?: DateTimeFilter<"BusinessRegistration"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessRegistration"> | Date | string
    merchant?: XOR<MerchantNullableScalarRelationFilter, MerchantWhereInput> | null
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, StoreWhereInput> | null
  }

  export type BusinessRegistrationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    number?: SortOrder
    issuingBody?: SortOrderInput | SortOrder
    validFrom?: SortOrderInput | SortOrder
    validUntil?: SortOrderInput | SortOrder
    isActive?: SortOrder
    merchantId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    storeId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    merchant?: MerchantOrderByWithRelationInput
    brand?: BrandOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    _relevance?: BusinessRegistrationOrderByRelevanceInput
  }

  export type BusinessRegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    type_number_merchantId?: BusinessRegistrationTypeNumberMerchantIdCompoundUniqueInput
    type_number_brandId?: BusinessRegistrationTypeNumberBrandIdCompoundUniqueInput
    type_number_storeId?: BusinessRegistrationTypeNumberStoreIdCompoundUniqueInput
    AND?: BusinessRegistrationWhereInput | BusinessRegistrationWhereInput[]
    OR?: BusinessRegistrationWhereInput[]
    NOT?: BusinessRegistrationWhereInput | BusinessRegistrationWhereInput[]
    type?: EnumBusinessRegistrationTypeFilter<"BusinessRegistration"> | $Enums.BusinessRegistrationType
    number?: StringFilter<"BusinessRegistration"> | string
    issuingBody?: StringNullableFilter<"BusinessRegistration"> | string | null
    validFrom?: DateTimeNullableFilter<"BusinessRegistration"> | Date | string | null
    validUntil?: DateTimeNullableFilter<"BusinessRegistration"> | Date | string | null
    isActive?: BoolFilter<"BusinessRegistration"> | boolean
    merchantId?: StringNullableFilter<"BusinessRegistration"> | string | null
    brandId?: StringNullableFilter<"BusinessRegistration"> | string | null
    storeId?: StringNullableFilter<"BusinessRegistration"> | string | null
    createdAt?: DateTimeFilter<"BusinessRegistration"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessRegistration"> | Date | string
    merchant?: XOR<MerchantNullableScalarRelationFilter, MerchantWhereInput> | null
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, StoreWhereInput> | null
  }, "id" | "type_number_merchantId" | "type_number_brandId" | "type_number_storeId">

  export type BusinessRegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    number?: SortOrder
    issuingBody?: SortOrderInput | SortOrder
    validFrom?: SortOrderInput | SortOrder
    validUntil?: SortOrderInput | SortOrder
    isActive?: SortOrder
    merchantId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    storeId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BusinessRegistrationCountOrderByAggregateInput
    _max?: BusinessRegistrationMaxOrderByAggregateInput
    _min?: BusinessRegistrationMinOrderByAggregateInput
  }

  export type BusinessRegistrationScalarWhereWithAggregatesInput = {
    AND?: BusinessRegistrationScalarWhereWithAggregatesInput | BusinessRegistrationScalarWhereWithAggregatesInput[]
    OR?: BusinessRegistrationScalarWhereWithAggregatesInput[]
    NOT?: BusinessRegistrationScalarWhereWithAggregatesInput | BusinessRegistrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BusinessRegistration"> | string
    type?: EnumBusinessRegistrationTypeWithAggregatesFilter<"BusinessRegistration"> | $Enums.BusinessRegistrationType
    number?: StringWithAggregatesFilter<"BusinessRegistration"> | string
    issuingBody?: StringNullableWithAggregatesFilter<"BusinessRegistration"> | string | null
    validFrom?: DateTimeNullableWithAggregatesFilter<"BusinessRegistration"> | Date | string | null
    validUntil?: DateTimeNullableWithAggregatesFilter<"BusinessRegistration"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"BusinessRegistration"> | boolean
    merchantId?: StringNullableWithAggregatesFilter<"BusinessRegistration"> | string | null
    brandId?: StringNullableWithAggregatesFilter<"BusinessRegistration"> | string | null
    storeId?: StringNullableWithAggregatesFilter<"BusinessRegistration"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BusinessRegistration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BusinessRegistration"> | Date | string
  }

  export type MerchantWhereInput = {
    AND?: MerchantWhereInput | MerchantWhereInput[]
    OR?: MerchantWhereInput[]
    NOT?: MerchantWhereInput | MerchantWhereInput[]
    id?: StringFilter<"Merchant"> | string
    name?: StringFilter<"Merchant"> | string
    slug?: StringFilter<"Merchant"> | string
    status?: EnumStatusFilter<"Merchant"> | $Enums.Status
    phoneNumber?: StringFilter<"Merchant"> | string
    genericEmail?: StringFilter<"Merchant"> | string
    invoiceEmail?: StringNullableFilter<"Merchant"> | string | null
    addressLine1?: StringFilter<"Merchant"> | string
    addressLine2?: StringNullableFilter<"Merchant"> | string | null
    addressLine3?: StringNullableFilter<"Merchant"> | string | null
    city?: StringFilter<"Merchant"> | string
    postalCode?: StringFilter<"Merchant"> | string
    regionId?: StringNullableFilter<"Merchant"> | string | null
    countryId?: StringFilter<"Merchant"> | string
    timezone?: StringNullableFilter<"Merchant"> | string | null
    logo?: StringNullableFilter<"Merchant"> | string | null
    website?: StringNullableFilter<"Merchant"> | string | null
    createdAt?: DateTimeFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeFilter<"Merchant"> | Date | string
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    businessRegistrations?: BusinessRegistrationListRelationFilter
    brands?: BrandListRelationFilter
    userAccess?: BusinessUserAccessListRelationFilter
  }

  export type MerchantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrderInput | SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    addressLine3?: SortOrderInput | SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrderInput | SortOrder
    countryId?: SortOrder
    timezone?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: RegionOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    businessRegistrations?: BusinessRegistrationOrderByRelationAggregateInput
    brands?: BrandOrderByRelationAggregateInput
    userAccess?: BusinessUserAccessOrderByRelationAggregateInput
    _relevance?: MerchantOrderByRelevanceInput
  }

  export type MerchantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: MerchantWhereInput | MerchantWhereInput[]
    OR?: MerchantWhereInput[]
    NOT?: MerchantWhereInput | MerchantWhereInput[]
    name?: StringFilter<"Merchant"> | string
    status?: EnumStatusFilter<"Merchant"> | $Enums.Status
    phoneNumber?: StringFilter<"Merchant"> | string
    genericEmail?: StringFilter<"Merchant"> | string
    invoiceEmail?: StringNullableFilter<"Merchant"> | string | null
    addressLine1?: StringFilter<"Merchant"> | string
    addressLine2?: StringNullableFilter<"Merchant"> | string | null
    addressLine3?: StringNullableFilter<"Merchant"> | string | null
    city?: StringFilter<"Merchant"> | string
    postalCode?: StringFilter<"Merchant"> | string
    regionId?: StringNullableFilter<"Merchant"> | string | null
    countryId?: StringFilter<"Merchant"> | string
    timezone?: StringNullableFilter<"Merchant"> | string | null
    logo?: StringNullableFilter<"Merchant"> | string | null
    website?: StringNullableFilter<"Merchant"> | string | null
    createdAt?: DateTimeFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeFilter<"Merchant"> | Date | string
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    businessRegistrations?: BusinessRegistrationListRelationFilter
    brands?: BrandListRelationFilter
    userAccess?: BusinessUserAccessListRelationFilter
  }, "id" | "slug">

  export type MerchantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrderInput | SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    addressLine3?: SortOrderInput | SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrderInput | SortOrder
    countryId?: SortOrder
    timezone?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MerchantCountOrderByAggregateInput
    _max?: MerchantMaxOrderByAggregateInput
    _min?: MerchantMinOrderByAggregateInput
  }

  export type MerchantScalarWhereWithAggregatesInput = {
    AND?: MerchantScalarWhereWithAggregatesInput | MerchantScalarWhereWithAggregatesInput[]
    OR?: MerchantScalarWhereWithAggregatesInput[]
    NOT?: MerchantScalarWhereWithAggregatesInput | MerchantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Merchant"> | string
    name?: StringWithAggregatesFilter<"Merchant"> | string
    slug?: StringWithAggregatesFilter<"Merchant"> | string
    status?: EnumStatusWithAggregatesFilter<"Merchant"> | $Enums.Status
    phoneNumber?: StringWithAggregatesFilter<"Merchant"> | string
    genericEmail?: StringWithAggregatesFilter<"Merchant"> | string
    invoiceEmail?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    addressLine1?: StringWithAggregatesFilter<"Merchant"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    addressLine3?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    city?: StringWithAggregatesFilter<"Merchant"> | string
    postalCode?: StringWithAggregatesFilter<"Merchant"> | string
    regionId?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    countryId?: StringWithAggregatesFilter<"Merchant"> | string
    timezone?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    website?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Merchant"> | Date | string
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: StringFilter<"Brand"> | string
    status?: EnumStatusFilter<"Brand"> | $Enums.Status
    merchantId?: StringFilter<"Brand"> | string
    name?: StringFilter<"Brand"> | string
    slug?: StringFilter<"Brand"> | string
    genericEmail?: StringFilter<"Brand"> | string
    invoiceEmail?: StringNullableFilter<"Brand"> | string | null
    tradingAsName?: StringNullableFilter<"Brand"> | string | null
    logo?: StringNullableFilter<"Brand"> | string | null
    website?: StringNullableFilter<"Brand"> | string | null
    addressLine1?: StringFilter<"Brand"> | string
    addressLine2?: StringNullableFilter<"Brand"> | string | null
    addressLine3?: StringNullableFilter<"Brand"> | string | null
    city?: StringFilter<"Brand"> | string
    postalCode?: StringFilter<"Brand"> | string
    regionId?: StringNullableFilter<"Brand"> | string | null
    countryId?: StringFilter<"Brand"> | string
    phoneNumber?: StringFilter<"Brand"> | string
    timezone?: StringNullableFilter<"Brand"> | string | null
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    merchant?: XOR<MerchantScalarRelationFilter, MerchantWhereInput>
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    businessRegistrations?: BusinessRegistrationListRelationFilter
    stores?: StoreListRelationFilter
    userAccess?: BusinessUserAccessListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrderInput | SortOrder
    tradingAsName?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    addressLine3?: SortOrderInput | SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrderInput | SortOrder
    countryId?: SortOrder
    phoneNumber?: SortOrder
    timezone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    merchant?: MerchantOrderByWithRelationInput
    region?: RegionOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    businessRegistrations?: BusinessRegistrationOrderByRelationAggregateInput
    stores?: StoreOrderByRelationAggregateInput
    userAccess?: BusinessUserAccessOrderByRelationAggregateInput
    _relevance?: BrandOrderByRelevanceInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    status?: EnumStatusFilter<"Brand"> | $Enums.Status
    merchantId?: StringFilter<"Brand"> | string
    name?: StringFilter<"Brand"> | string
    genericEmail?: StringFilter<"Brand"> | string
    invoiceEmail?: StringNullableFilter<"Brand"> | string | null
    tradingAsName?: StringNullableFilter<"Brand"> | string | null
    logo?: StringNullableFilter<"Brand"> | string | null
    website?: StringNullableFilter<"Brand"> | string | null
    addressLine1?: StringFilter<"Brand"> | string
    addressLine2?: StringNullableFilter<"Brand"> | string | null
    addressLine3?: StringNullableFilter<"Brand"> | string | null
    city?: StringFilter<"Brand"> | string
    postalCode?: StringFilter<"Brand"> | string
    regionId?: StringNullableFilter<"Brand"> | string | null
    countryId?: StringFilter<"Brand"> | string
    phoneNumber?: StringFilter<"Brand"> | string
    timezone?: StringNullableFilter<"Brand"> | string | null
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    merchant?: XOR<MerchantScalarRelationFilter, MerchantWhereInput>
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    businessRegistrations?: BusinessRegistrationListRelationFilter
    stores?: StoreListRelationFilter
    userAccess?: BusinessUserAccessListRelationFilter
  }, "id" | "slug">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrderInput | SortOrder
    tradingAsName?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    addressLine3?: SortOrderInput | SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrderInput | SortOrder
    countryId?: SortOrder
    phoneNumber?: SortOrder
    timezone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Brand"> | string
    status?: EnumStatusWithAggregatesFilter<"Brand"> | $Enums.Status
    merchantId?: StringWithAggregatesFilter<"Brand"> | string
    name?: StringWithAggregatesFilter<"Brand"> | string
    slug?: StringWithAggregatesFilter<"Brand"> | string
    genericEmail?: StringWithAggregatesFilter<"Brand"> | string
    invoiceEmail?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    tradingAsName?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    website?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    addressLine1?: StringWithAggregatesFilter<"Brand"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    addressLine3?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    city?: StringWithAggregatesFilter<"Brand"> | string
    postalCode?: StringWithAggregatesFilter<"Brand"> | string
    regionId?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    countryId?: StringWithAggregatesFilter<"Brand"> | string
    phoneNumber?: StringWithAggregatesFilter<"Brand"> | string
    timezone?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
  }

  export type StoreWhereInput = {
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    id?: StringFilter<"Store"> | string
    name?: StringFilter<"Store"> | string
    slug?: StringFilter<"Store"> | string
    status?: EnumStatusFilter<"Store"> | $Enums.Status
    brandId?: StringFilter<"Store"> | string
    addressLine1?: StringFilter<"Store"> | string
    addressLine2?: StringNullableFilter<"Store"> | string | null
    addressLine3?: StringNullableFilter<"Store"> | string | null
    city?: StringFilter<"Store"> | string
    regionId?: StringNullableFilter<"Store"> | string | null
    postalCode?: StringFilter<"Store"> | string
    countryId?: StringFilter<"Store"> | string
    formattedAddress?: StringNullableFilter<"Store"> | string | null
    latitude?: FloatNullableFilter<"Store"> | number | null
    longitude?: FloatNullableFilter<"Store"> | number | null
    phoneNumber?: StringNullableFilter<"Store"> | string | null
    timezone?: StringNullableFilter<"Store"> | string | null
    currencyId?: StringFilter<"Store"> | string
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    businessRegistrations?: BusinessRegistrationListRelationFilter
    receipts?: ReceiptListRelationFilter
    userAccess?: BusinessUserAccessListRelationFilter
  }

  export type StoreOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    addressLine3?: SortOrderInput | SortOrder
    city?: SortOrder
    regionId?: SortOrderInput | SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brand?: BrandOrderByWithRelationInput
    region?: RegionOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    currency?: CurrencyOrderByWithRelationInput
    businessRegistrations?: BusinessRegistrationOrderByRelationAggregateInput
    receipts?: ReceiptOrderByRelationAggregateInput
    userAccess?: BusinessUserAccessOrderByRelationAggregateInput
    _relevance?: StoreOrderByRelevanceInput
  }

  export type StoreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    name?: StringFilter<"Store"> | string
    status?: EnumStatusFilter<"Store"> | $Enums.Status
    brandId?: StringFilter<"Store"> | string
    addressLine1?: StringFilter<"Store"> | string
    addressLine2?: StringNullableFilter<"Store"> | string | null
    addressLine3?: StringNullableFilter<"Store"> | string | null
    city?: StringFilter<"Store"> | string
    regionId?: StringNullableFilter<"Store"> | string | null
    postalCode?: StringFilter<"Store"> | string
    countryId?: StringFilter<"Store"> | string
    formattedAddress?: StringNullableFilter<"Store"> | string | null
    latitude?: FloatNullableFilter<"Store"> | number | null
    longitude?: FloatNullableFilter<"Store"> | number | null
    phoneNumber?: StringNullableFilter<"Store"> | string | null
    timezone?: StringNullableFilter<"Store"> | string | null
    currencyId?: StringFilter<"Store"> | string
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    region?: XOR<RegionNullableScalarRelationFilter, RegionWhereInput> | null
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    currency?: XOR<CurrencyScalarRelationFilter, CurrencyWhereInput>
    businessRegistrations?: BusinessRegistrationListRelationFilter
    receipts?: ReceiptListRelationFilter
    userAccess?: BusinessUserAccessListRelationFilter
  }, "id" | "slug">

  export type StoreOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    addressLine3?: SortOrderInput | SortOrder
    city?: SortOrder
    regionId?: SortOrderInput | SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StoreCountOrderByAggregateInput
    _avg?: StoreAvgOrderByAggregateInput
    _max?: StoreMaxOrderByAggregateInput
    _min?: StoreMinOrderByAggregateInput
    _sum?: StoreSumOrderByAggregateInput
  }

  export type StoreScalarWhereWithAggregatesInput = {
    AND?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    OR?: StoreScalarWhereWithAggregatesInput[]
    NOT?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Store"> | string
    name?: StringWithAggregatesFilter<"Store"> | string
    slug?: StringWithAggregatesFilter<"Store"> | string
    status?: EnumStatusWithAggregatesFilter<"Store"> | $Enums.Status
    brandId?: StringWithAggregatesFilter<"Store"> | string
    addressLine1?: StringWithAggregatesFilter<"Store"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"Store"> | string | null
    addressLine3?: StringNullableWithAggregatesFilter<"Store"> | string | null
    city?: StringWithAggregatesFilter<"Store"> | string
    regionId?: StringNullableWithAggregatesFilter<"Store"> | string | null
    postalCode?: StringWithAggregatesFilter<"Store"> | string
    countryId?: StringWithAggregatesFilter<"Store"> | string
    formattedAddress?: StringNullableWithAggregatesFilter<"Store"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"Store"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Store"> | number | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Store"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"Store"> | string | null
    currencyId?: StringWithAggregatesFilter<"Store"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Store"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Store"> | Date | string
  }

  export type ReceiptWhereInput = {
    AND?: ReceiptWhereInput | ReceiptWhereInput[]
    OR?: ReceiptWhereInput[]
    NOT?: ReceiptWhereInput | ReceiptWhereInput[]
    id?: StringFilter<"Receipt"> | string
    receiptNumber?: StringFilter<"Receipt"> | string
    consumerId?: StringFilter<"Receipt"> | string
    storeId?: StringFilter<"Receipt"> | string
    subTotal?: FloatFilter<"Receipt"> | number
    totalTax?: FloatFilter<"Receipt"> | number
    cardSurcharge?: FloatNullableFilter<"Receipt"> | number | null
    discount?: FloatNullableFilter<"Receipt"> | number | null
    tip?: FloatNullableFilter<"Receipt"> | number | null
    roundingAdjustment?: FloatNullableFilter<"Receipt"> | number | null
    finalTotal?: FloatFilter<"Receipt"> | number
    otherInformation?: StringNullableListFilter<"Receipt">
    receiptDateTime?: DateTimeFilter<"Receipt"> | Date | string
    timezone?: StringNullableFilter<"Receipt"> | string | null
    createdAt?: DateTimeFilter<"Receipt"> | Date | string
    updatedAt?: DateTimeFilter<"Receipt"> | Date | string
    consumer?: XOR<ConsumerScalarRelationFilter, ConsumerWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    receiptItems?: ReceiptItemListRelationFilter
    receiptPayments?: ReceiptPaymentListRelationFilter
    receiptTaxes?: ReceiptTaxListRelationFilter
  }

  export type ReceiptOrderByWithRelationInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    totalTax?: SortOrder
    cardSurcharge?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    tip?: SortOrderInput | SortOrder
    roundingAdjustment?: SortOrderInput | SortOrder
    finalTotal?: SortOrder
    otherInformation?: SortOrder
    receiptDateTime?: SortOrder
    timezone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consumer?: ConsumerOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    receiptItems?: ReceiptItemOrderByRelationAggregateInput
    receiptPayments?: ReceiptPaymentOrderByRelationAggregateInput
    receiptTaxes?: ReceiptTaxOrderByRelationAggregateInput
    _relevance?: ReceiptOrderByRelevanceInput
  }

  export type ReceiptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptWhereInput | ReceiptWhereInput[]
    OR?: ReceiptWhereInput[]
    NOT?: ReceiptWhereInput | ReceiptWhereInput[]
    receiptNumber?: StringFilter<"Receipt"> | string
    consumerId?: StringFilter<"Receipt"> | string
    storeId?: StringFilter<"Receipt"> | string
    subTotal?: FloatFilter<"Receipt"> | number
    totalTax?: FloatFilter<"Receipt"> | number
    cardSurcharge?: FloatNullableFilter<"Receipt"> | number | null
    discount?: FloatNullableFilter<"Receipt"> | number | null
    tip?: FloatNullableFilter<"Receipt"> | number | null
    roundingAdjustment?: FloatNullableFilter<"Receipt"> | number | null
    finalTotal?: FloatFilter<"Receipt"> | number
    otherInformation?: StringNullableListFilter<"Receipt">
    receiptDateTime?: DateTimeFilter<"Receipt"> | Date | string
    timezone?: StringNullableFilter<"Receipt"> | string | null
    createdAt?: DateTimeFilter<"Receipt"> | Date | string
    updatedAt?: DateTimeFilter<"Receipt"> | Date | string
    consumer?: XOR<ConsumerScalarRelationFilter, ConsumerWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    receiptItems?: ReceiptItemListRelationFilter
    receiptPayments?: ReceiptPaymentListRelationFilter
    receiptTaxes?: ReceiptTaxListRelationFilter
  }, "id">

  export type ReceiptOrderByWithAggregationInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    totalTax?: SortOrder
    cardSurcharge?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    tip?: SortOrderInput | SortOrder
    roundingAdjustment?: SortOrderInput | SortOrder
    finalTotal?: SortOrder
    otherInformation?: SortOrder
    receiptDateTime?: SortOrder
    timezone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReceiptCountOrderByAggregateInput
    _avg?: ReceiptAvgOrderByAggregateInput
    _max?: ReceiptMaxOrderByAggregateInput
    _min?: ReceiptMinOrderByAggregateInput
    _sum?: ReceiptSumOrderByAggregateInput
  }

  export type ReceiptScalarWhereWithAggregatesInput = {
    AND?: ReceiptScalarWhereWithAggregatesInput | ReceiptScalarWhereWithAggregatesInput[]
    OR?: ReceiptScalarWhereWithAggregatesInput[]
    NOT?: ReceiptScalarWhereWithAggregatesInput | ReceiptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Receipt"> | string
    receiptNumber?: StringWithAggregatesFilter<"Receipt"> | string
    consumerId?: StringWithAggregatesFilter<"Receipt"> | string
    storeId?: StringWithAggregatesFilter<"Receipt"> | string
    subTotal?: FloatWithAggregatesFilter<"Receipt"> | number
    totalTax?: FloatWithAggregatesFilter<"Receipt"> | number
    cardSurcharge?: FloatNullableWithAggregatesFilter<"Receipt"> | number | null
    discount?: FloatNullableWithAggregatesFilter<"Receipt"> | number | null
    tip?: FloatNullableWithAggregatesFilter<"Receipt"> | number | null
    roundingAdjustment?: FloatNullableWithAggregatesFilter<"Receipt"> | number | null
    finalTotal?: FloatWithAggregatesFilter<"Receipt"> | number
    otherInformation?: StringNullableListFilter<"Receipt">
    receiptDateTime?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
    timezone?: StringNullableWithAggregatesFilter<"Receipt"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
  }

  export type ReceiptTaxWhereInput = {
    AND?: ReceiptTaxWhereInput | ReceiptTaxWhereInput[]
    OR?: ReceiptTaxWhereInput[]
    NOT?: ReceiptTaxWhereInput | ReceiptTaxWhereInput[]
    id?: StringFilter<"ReceiptTax"> | string
    receiptId?: StringFilter<"ReceiptTax"> | string
    taxType?: EnumTaxTypeFilter<"ReceiptTax"> | $Enums.TaxType
    taxName?: StringFilter<"ReceiptTax"> | string
    taxRate?: FloatFilter<"ReceiptTax"> | number
    taxableAmount?: FloatFilter<"ReceiptTax"> | number
    taxAmount?: FloatFilter<"ReceiptTax"> | number
    createdAt?: DateTimeFilter<"ReceiptTax"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptTax"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }

  export type ReceiptTaxOrderByWithRelationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    taxType?: SortOrder
    taxName?: SortOrder
    taxRate?: SortOrder
    taxableAmount?: SortOrder
    taxAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    receipt?: ReceiptOrderByWithRelationInput
    _relevance?: ReceiptTaxOrderByRelevanceInput
  }

  export type ReceiptTaxWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptTaxWhereInput | ReceiptTaxWhereInput[]
    OR?: ReceiptTaxWhereInput[]
    NOT?: ReceiptTaxWhereInput | ReceiptTaxWhereInput[]
    receiptId?: StringFilter<"ReceiptTax"> | string
    taxType?: EnumTaxTypeFilter<"ReceiptTax"> | $Enums.TaxType
    taxName?: StringFilter<"ReceiptTax"> | string
    taxRate?: FloatFilter<"ReceiptTax"> | number
    taxableAmount?: FloatFilter<"ReceiptTax"> | number
    taxAmount?: FloatFilter<"ReceiptTax"> | number
    createdAt?: DateTimeFilter<"ReceiptTax"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptTax"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }, "id">

  export type ReceiptTaxOrderByWithAggregationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    taxType?: SortOrder
    taxName?: SortOrder
    taxRate?: SortOrder
    taxableAmount?: SortOrder
    taxAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReceiptTaxCountOrderByAggregateInput
    _avg?: ReceiptTaxAvgOrderByAggregateInput
    _max?: ReceiptTaxMaxOrderByAggregateInput
    _min?: ReceiptTaxMinOrderByAggregateInput
    _sum?: ReceiptTaxSumOrderByAggregateInput
  }

  export type ReceiptTaxScalarWhereWithAggregatesInput = {
    AND?: ReceiptTaxScalarWhereWithAggregatesInput | ReceiptTaxScalarWhereWithAggregatesInput[]
    OR?: ReceiptTaxScalarWhereWithAggregatesInput[]
    NOT?: ReceiptTaxScalarWhereWithAggregatesInput | ReceiptTaxScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReceiptTax"> | string
    receiptId?: StringWithAggregatesFilter<"ReceiptTax"> | string
    taxType?: EnumTaxTypeWithAggregatesFilter<"ReceiptTax"> | $Enums.TaxType
    taxName?: StringWithAggregatesFilter<"ReceiptTax"> | string
    taxRate?: FloatWithAggregatesFilter<"ReceiptTax"> | number
    taxableAmount?: FloatWithAggregatesFilter<"ReceiptTax"> | number
    taxAmount?: FloatWithAggregatesFilter<"ReceiptTax"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ReceiptTax"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReceiptTax"> | Date | string
  }

  export type ReceiptPaymentWhereInput = {
    AND?: ReceiptPaymentWhereInput | ReceiptPaymentWhereInput[]
    OR?: ReceiptPaymentWhereInput[]
    NOT?: ReceiptPaymentWhereInput | ReceiptPaymentWhereInput[]
    id?: StringFilter<"ReceiptPayment"> | string
    receiptId?: StringFilter<"ReceiptPayment"> | string
    paymentType?: EnumPaymentTypeFilter<"ReceiptPayment"> | $Enums.PaymentType
    amount?: FloatFilter<"ReceiptPayment"> | number
    terminal?: StringNullableFilter<"ReceiptPayment"> | string | null
    reference?: StringNullableFilter<"ReceiptPayment"> | string | null
    cardNo?: StringNullableFilter<"ReceiptPayment"> | string | null
    authCode?: StringNullableFilter<"ReceiptPayment"> | string | null
    paymentMethod?: StringNullableFilter<"ReceiptPayment"> | string | null
    createdAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }

  export type ReceiptPaymentOrderByWithRelationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    cardNo?: SortOrderInput | SortOrder
    authCode?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    receipt?: ReceiptOrderByWithRelationInput
    _relevance?: ReceiptPaymentOrderByRelevanceInput
  }

  export type ReceiptPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptPaymentWhereInput | ReceiptPaymentWhereInput[]
    OR?: ReceiptPaymentWhereInput[]
    NOT?: ReceiptPaymentWhereInput | ReceiptPaymentWhereInput[]
    receiptId?: StringFilter<"ReceiptPayment"> | string
    paymentType?: EnumPaymentTypeFilter<"ReceiptPayment"> | $Enums.PaymentType
    amount?: FloatFilter<"ReceiptPayment"> | number
    terminal?: StringNullableFilter<"ReceiptPayment"> | string | null
    reference?: StringNullableFilter<"ReceiptPayment"> | string | null
    cardNo?: StringNullableFilter<"ReceiptPayment"> | string | null
    authCode?: StringNullableFilter<"ReceiptPayment"> | string | null
    paymentMethod?: StringNullableFilter<"ReceiptPayment"> | string | null
    createdAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }, "id">

  export type ReceiptPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrderInput | SortOrder
    reference?: SortOrderInput | SortOrder
    cardNo?: SortOrderInput | SortOrder
    authCode?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReceiptPaymentCountOrderByAggregateInput
    _avg?: ReceiptPaymentAvgOrderByAggregateInput
    _max?: ReceiptPaymentMaxOrderByAggregateInput
    _min?: ReceiptPaymentMinOrderByAggregateInput
    _sum?: ReceiptPaymentSumOrderByAggregateInput
  }

  export type ReceiptPaymentScalarWhereWithAggregatesInput = {
    AND?: ReceiptPaymentScalarWhereWithAggregatesInput | ReceiptPaymentScalarWhereWithAggregatesInput[]
    OR?: ReceiptPaymentScalarWhereWithAggregatesInput[]
    NOT?: ReceiptPaymentScalarWhereWithAggregatesInput | ReceiptPaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReceiptPayment"> | string
    receiptId?: StringWithAggregatesFilter<"ReceiptPayment"> | string
    paymentType?: EnumPaymentTypeWithAggregatesFilter<"ReceiptPayment"> | $Enums.PaymentType
    amount?: FloatWithAggregatesFilter<"ReceiptPayment"> | number
    terminal?: StringNullableWithAggregatesFilter<"ReceiptPayment"> | string | null
    reference?: StringNullableWithAggregatesFilter<"ReceiptPayment"> | string | null
    cardNo?: StringNullableWithAggregatesFilter<"ReceiptPayment"> | string | null
    authCode?: StringNullableWithAggregatesFilter<"ReceiptPayment"> | string | null
    paymentMethod?: StringNullableWithAggregatesFilter<"ReceiptPayment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ReceiptPayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReceiptPayment"> | Date | string
  }

  export type ReceiptItemWhereInput = {
    AND?: ReceiptItemWhereInput | ReceiptItemWhereInput[]
    OR?: ReceiptItemWhereInput[]
    NOT?: ReceiptItemWhereInput | ReceiptItemWhereInput[]
    id?: StringFilter<"ReceiptItem"> | string
    receiptId?: StringFilter<"ReceiptItem"> | string
    name?: StringFilter<"ReceiptItem"> | string
    sku?: StringNullableFilter<"ReceiptItem"> | string | null
    description?: StringNullableFilter<"ReceiptItem"> | string | null
    modelNumber?: StringNullableFilter<"ReceiptItem"> | string | null
    category?: StringNullableFilter<"ReceiptItem"> | string | null
    quantity?: FloatFilter<"ReceiptItem"> | number
    unitPrice?: FloatFilter<"ReceiptItem"> | number
    itemTotal?: FloatFilter<"ReceiptItem"> | number
    itemDiscount?: FloatNullableFilter<"ReceiptItem"> | number | null
    taxAmount?: FloatFilter<"ReceiptItem"> | number
    finalAmount?: FloatFilter<"ReceiptItem"> | number
    createdAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }

  export type ReceiptItemOrderByWithRelationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    modelNumber?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    itemTotal?: SortOrder
    itemDiscount?: SortOrderInput | SortOrder
    taxAmount?: SortOrder
    finalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    receipt?: ReceiptOrderByWithRelationInput
    _relevance?: ReceiptItemOrderByRelevanceInput
  }

  export type ReceiptItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptItemWhereInput | ReceiptItemWhereInput[]
    OR?: ReceiptItemWhereInput[]
    NOT?: ReceiptItemWhereInput | ReceiptItemWhereInput[]
    receiptId?: StringFilter<"ReceiptItem"> | string
    name?: StringFilter<"ReceiptItem"> | string
    sku?: StringNullableFilter<"ReceiptItem"> | string | null
    description?: StringNullableFilter<"ReceiptItem"> | string | null
    modelNumber?: StringNullableFilter<"ReceiptItem"> | string | null
    category?: StringNullableFilter<"ReceiptItem"> | string | null
    quantity?: FloatFilter<"ReceiptItem"> | number
    unitPrice?: FloatFilter<"ReceiptItem"> | number
    itemTotal?: FloatFilter<"ReceiptItem"> | number
    itemDiscount?: FloatNullableFilter<"ReceiptItem"> | number | null
    taxAmount?: FloatFilter<"ReceiptItem"> | number
    finalAmount?: FloatFilter<"ReceiptItem"> | number
    createdAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    receipt?: XOR<ReceiptScalarRelationFilter, ReceiptWhereInput>
  }, "id">

  export type ReceiptItemOrderByWithAggregationInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    modelNumber?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    itemTotal?: SortOrder
    itemDiscount?: SortOrderInput | SortOrder
    taxAmount?: SortOrder
    finalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReceiptItemCountOrderByAggregateInput
    _avg?: ReceiptItemAvgOrderByAggregateInput
    _max?: ReceiptItemMaxOrderByAggregateInput
    _min?: ReceiptItemMinOrderByAggregateInput
    _sum?: ReceiptItemSumOrderByAggregateInput
  }

  export type ReceiptItemScalarWhereWithAggregatesInput = {
    AND?: ReceiptItemScalarWhereWithAggregatesInput | ReceiptItemScalarWhereWithAggregatesInput[]
    OR?: ReceiptItemScalarWhereWithAggregatesInput[]
    NOT?: ReceiptItemScalarWhereWithAggregatesInput | ReceiptItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReceiptItem"> | string
    receiptId?: StringWithAggregatesFilter<"ReceiptItem"> | string
    name?: StringWithAggregatesFilter<"ReceiptItem"> | string
    sku?: StringNullableWithAggregatesFilter<"ReceiptItem"> | string | null
    description?: StringNullableWithAggregatesFilter<"ReceiptItem"> | string | null
    modelNumber?: StringNullableWithAggregatesFilter<"ReceiptItem"> | string | null
    category?: StringNullableWithAggregatesFilter<"ReceiptItem"> | string | null
    quantity?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    unitPrice?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    itemTotal?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    itemDiscount?: FloatNullableWithAggregatesFilter<"ReceiptItem"> | number | null
    taxAmount?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    finalAmount?: FloatWithAggregatesFilter<"ReceiptItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ReceiptItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReceiptItem"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    category?: StringFilter<"AuditLog"> | string
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonFilter<"AuditLog">
    sessionId?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    metadata?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AuditLogOrderByRelevanceInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    category?: StringFilter<"AuditLog"> | string
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonFilter<"AuditLog">
    sessionId?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    metadata?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditLog"> | number
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    category?: StringWithAggregatesFilter<"AuditLog"> | string
    description?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    metadata?: JsonWithAggregatesFilter<"AuditLog">
    sessionId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    image?: StringFilter<"Image"> | string
    imageName?: StringFilter<"Image"> | string
    imageType?: EnumImageTypeFilter<"Image"> | $Enums.ImageType
    relatedEntity?: StringNullableFilter<"Image"> | string | null
    bucket?: StringFilter<"Image"> | string
    createdAt?: DateTimeNullableFilter<"Image"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Image"> | Date | string | null
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    imageName?: SortOrder
    imageType?: SortOrder
    relatedEntity?: SortOrderInput | SortOrder
    bucket?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _relevance?: ImageOrderByRelevanceInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    image?: string
    imageName?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    imageType?: EnumImageTypeFilter<"Image"> | $Enums.ImageType
    relatedEntity?: StringNullableFilter<"Image"> | string | null
    bucket?: StringFilter<"Image"> | string
    createdAt?: DateTimeNullableFilter<"Image"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Image"> | Date | string | null
  }, "id" | "image" | "imageName">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    imageName?: SortOrder
    imageType?: SortOrder
    relatedEntity?: SortOrderInput | SortOrder
    bucket?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: ImageCountOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    image?: StringWithAggregatesFilter<"Image"> | string
    imageName?: StringWithAggregatesFilter<"Image"> | string
    imageType?: EnumImageTypeWithAggregatesFilter<"Image"> | $Enums.ImageType
    relatedEntity?: StringNullableWithAggregatesFilter<"Image"> | string | null
    bucket?: StringWithAggregatesFilter<"Image"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"Image"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Image"> | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    expiresAt: Date | string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    expiresAt: Date | string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    userId: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    expiresAt: Date | string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    userId: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    userId: string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateManyInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    userId: string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationCreateInput = {
    id?: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    identifier: string
    value: string
    expiresAt: Date | string
  }

  export type VerificationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    identifier: string
    value: string
    expiresAt: Date | string
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateManyInput = {
    id?: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    identifier: string
    value: string
    expiresAt: Date | string
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailChangeRecordCreateInput = {
    id?: string
    email: string
    newEmail: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutEmailChangeRecordsInput
  }

  export type EmailChangeRecordUncheckedCreateInput = {
    id?: string
    email: string
    newEmail: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
    userId: string
  }

  export type EmailChangeRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    newEmail?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmailChangeRecordsNestedInput
  }

  export type EmailChangeRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    newEmail?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EmailChangeRecordCreateManyInput = {
    id?: string
    email: string
    newEmail: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
    userId: string
  }

  export type EmailChangeRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    newEmail?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailChangeRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    newEmail?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneChangeRecordCreateInput = {
    id?: string
    phoneNumber?: string | null
    newPhoneNumber: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPhoneChangeRecordsInput
  }

  export type PhoneChangeRecordUncheckedCreateInput = {
    id?: string
    phoneNumber?: string | null
    newPhoneNumber: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
    userId: string
  }

  export type PhoneChangeRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    newPhoneNumber?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPhoneChangeRecordsNestedInput
  }

  export type PhoneChangeRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    newPhoneNumber?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PhoneChangeRecordCreateManyInput = {
    id?: string
    phoneNumber?: string | null
    newPhoneNumber: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
    userId: string
  }

  export type PhoneChangeRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    newPhoneNumber?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneChangeRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    newPhoneNumber?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RateLimitCreateInput = {
    id?: string
    key: string
    count?: number
    resetTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RateLimitUncheckedCreateInput = {
    id?: string
    key: string
    count?: number
    resetTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RateLimitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    resetTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateLimitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    resetTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateLimitCreateManyInput = {
    id?: string
    key: string
    count?: number
    resetTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RateLimitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    resetTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateLimitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    resetTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumerCreateInput = {
    id?: string
    barcode: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConsumerProfileInput
    receipts?: ReceiptCreateNestedManyWithoutConsumerInput
  }

  export type ConsumerUncheckedCreateInput = {
    id?: string
    barcode: string
    userId: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: ReceiptUncheckedCreateNestedManyWithoutConsumerInput
  }

  export type ConsumerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConsumerProfileNestedInput
    receipts?: ReceiptUpdateManyWithoutConsumerNestedInput
  }

  export type ConsumerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptUncheckedUpdateManyWithoutConsumerNestedInput
  }

  export type ConsumerCreateManyInput = {
    id?: string
    barcode: string
    userId: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsumerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessUserAccessCreateInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBusinessAccessInput
    merchant?: MerchantCreateNestedOneWithoutUserAccessInput
    brand?: BrandCreateNestedOneWithoutUserAccessInput
    store?: StoreCreateNestedOneWithoutUserAccessInput
    createdBy?: UserCreateNestedOneWithoutCreatedAccessRecordsInput
  }

  export type BusinessUserAccessUncheckedCreateInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    brandId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessUserAccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBusinessAccessNestedInput
    merchant?: MerchantUpdateOneWithoutUserAccessNestedInput
    brand?: BrandUpdateOneWithoutUserAccessNestedInput
    store?: StoreUpdateOneWithoutUserAccessNestedInput
    createdBy?: UserUpdateOneWithoutCreatedAccessRecordsNestedInput
  }

  export type BusinessUserAccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessUserAccessCreateManyInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    brandId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessUserAccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessUserAccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CurrencyCreateInput = {
    id?: string
    name: string
    code: string
    symbol?: string | null
    decimals?: number | null
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    numToBasic?: number | null
    countries?: CountryCreateNestedManyWithoutCurrencyInput
    stores?: StoreCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    symbol?: string | null
    decimals?: number | null
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    numToBasic?: number | null
    countries?: CountryUncheckedCreateNestedManyWithoutCurrencyInput
    stores?: StoreUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
    countries?: CountryUpdateManyWithoutCurrencyNestedInput
    stores?: StoreUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
    countries?: CountryUncheckedUpdateManyWithoutCurrencyNestedInput
    stores?: StoreUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyCreateManyInput = {
    id?: string
    name: string
    code: string
    symbol?: string | null
    decimals?: number | null
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    numToBasic?: number | null
  }

  export type CurrencyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CurrencyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContinentCreateInput = {
    id?: string
    name: string
    countries?: CountryCreateNestedManyWithoutContinentInput
  }

  export type ContinentUncheckedCreateInput = {
    id?: string
    name: string
    countries?: CountryUncheckedCreateNestedManyWithoutContinentInput
  }

  export type ContinentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countries?: CountryUpdateManyWithoutContinentNestedInput
  }

  export type ContinentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countries?: CountryUncheckedUpdateManyWithoutContinentNestedInput
  }

  export type ContinentCreateManyInput = {
    id?: string
    name: string
  }

  export type ContinentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ContinentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CountryCreateInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currency: CurrencyCreateNestedOneWithoutCountriesInput
    continent: ContinentCreateNestedOneWithoutCountriesInput
    regions?: RegionCreateNestedManyWithoutCountryInput
    merchants?: MerchantCreateNestedManyWithoutCountryInput
    brands?: BrandCreateNestedManyWithoutCountryInput
    stores?: StoreCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    continentId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    regions?: RegionUncheckedCreateNestedManyWithoutCountryInput
    merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    brands?: BrandUncheckedCreateNestedManyWithoutCountryInput
    stores?: StoreUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: CurrencyUpdateOneRequiredWithoutCountriesNestedInput
    continent?: ContinentUpdateOneRequiredWithoutCountriesNestedInput
    regions?: RegionUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUpdateManyWithoutCountryNestedInput
    brands?: BrandUpdateManyWithoutCountryNestedInput
    stores?: StoreUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    continentId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    regions?: RegionUncheckedUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    brands?: BrandUncheckedUpdateManyWithoutCountryNestedInput
    stores?: StoreUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    continentId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CountryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    continentId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionCreateInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutRegionsInput
    merchants?: MerchantCreateNestedManyWithoutRegionInput
    brands?: BrandCreateNestedManyWithoutRegionInput
    stores?: StoreCreateNestedManyWithoutRegionInput
    users?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutRegionInput
    brands?: BrandUncheckedCreateNestedManyWithoutRegionInput
    stores?: StoreUncheckedCreateNestedManyWithoutRegionInput
    users?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutRegionsNestedInput
    merchants?: MerchantUpdateManyWithoutRegionNestedInput
    brands?: BrandUpdateManyWithoutRegionNestedInput
    stores?: StoreUpdateManyWithoutRegionNestedInput
    users?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutRegionNestedInput
    brands?: BrandUncheckedUpdateManyWithoutRegionNestedInput
    stores?: StoreUncheckedUpdateManyWithoutRegionNestedInput
    users?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: string
    code: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessRegistrationCreateInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant?: MerchantCreateNestedOneWithoutBusinessRegistrationsInput
    brand?: BrandCreateNestedOneWithoutBusinessRegistrationsInput
    store?: StoreCreateNestedOneWithoutBusinessRegistrationsInput
  }

  export type BusinessRegistrationUncheckedCreateInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    merchantId?: string | null
    brandId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessRegistrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneWithoutBusinessRegistrationsNestedInput
    brand?: BrandUpdateOneWithoutBusinessRegistrationsNestedInput
    store?: StoreUpdateOneWithoutBusinessRegistrationsNestedInput
  }

  export type BusinessRegistrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessRegistrationCreateManyInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    merchantId?: string | null
    brandId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessRegistrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessRegistrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantCreateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutMerchantsInput
    country: CountryCreateNestedOneWithoutMerchantsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutMerchantInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutMerchantInput
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutMerchantsNestedInput
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutMerchantNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutMerchantNestedInput
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantCreateManyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MerchantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandCreateInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    region?: RegionCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutBrandInput
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    region?: RegionUpdateOneWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutBrandNestedInput
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreCreateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    region?: RegionCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoresInput
    currency: CurrencyCreateNestedOneWithoutStoresInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutStoreInput
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    region?: RegionUpdateOneWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoresNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoresNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreCreateManyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptCreateInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptCreateManyInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptTaxCreateInput = {
    id?: string
    taxType: $Enums.TaxType
    taxName: string
    taxRate: number
    taxableAmount: number
    taxAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    receipt: ReceiptCreateNestedOneWithoutReceiptTaxesInput
  }

  export type ReceiptTaxUncheckedCreateInput = {
    id?: string
    receiptId: string
    taxType: $Enums.TaxType
    taxName: string
    taxRate: number
    taxableAmount: number
    taxAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptTaxUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxType?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    taxName?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    taxableAmount?: FloatFieldUpdateOperationsInput | number
    taxAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipt?: ReceiptUpdateOneRequiredWithoutReceiptTaxesNestedInput
  }

  export type ReceiptTaxUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    taxType?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    taxName?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    taxableAmount?: FloatFieldUpdateOperationsInput | number
    taxAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptTaxCreateManyInput = {
    id?: string
    receiptId: string
    taxType: $Enums.TaxType
    taxName: string
    taxRate: number
    taxableAmount: number
    taxAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptTaxUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxType?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    taxName?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    taxableAmount?: FloatFieldUpdateOperationsInput | number
    taxAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptTaxUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    taxType?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    taxName?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    taxableAmount?: FloatFieldUpdateOperationsInput | number
    taxAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentCreateInput = {
    id?: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    authCode?: string | null
    paymentMethod?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receipt: ReceiptCreateNestedOneWithoutReceiptPaymentsInput
  }

  export type ReceiptPaymentUncheckedCreateInput = {
    id?: string
    receiptId: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    authCode?: string | null
    paymentMethod?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipt?: ReceiptUpdateOneRequiredWithoutReceiptPaymentsNestedInput
  }

  export type ReceiptPaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentCreateManyInput = {
    id?: string
    receiptId: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    authCode?: string | null
    paymentMethod?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemCreateInput = {
    id?: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    category?: string | null
    quantity: number
    unitPrice: number
    itemTotal: number
    itemDiscount?: number | null
    taxAmount: number
    finalAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    receipt: ReceiptCreateNestedOneWithoutReceiptItemsInput
  }

  export type ReceiptItemUncheckedCreateInput = {
    id?: string
    receiptId: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    category?: string | null
    quantity: number
    unitPrice: number
    itemTotal: number
    itemDiscount?: number | null
    taxAmount: number
    finalAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    itemTotal?: FloatFieldUpdateOperationsInput | number
    itemDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    taxAmount?: FloatFieldUpdateOperationsInput | number
    finalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipt?: ReceiptUpdateOneRequiredWithoutReceiptItemsNestedInput
  }

  export type ReceiptItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    itemTotal?: FloatFieldUpdateOperationsInput | number
    itemDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    taxAmount?: FloatFieldUpdateOperationsInput | number
    finalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemCreateManyInput = {
    id?: string
    receiptId: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    category?: string | null
    quantity: number
    unitPrice: number
    itemTotal: number
    itemDiscount?: number | null
    taxAmount: number
    finalAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    itemTotal?: FloatFieldUpdateOperationsInput | number
    itemDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    taxAmount?: FloatFieldUpdateOperationsInput | number
    finalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    itemTotal?: FloatFieldUpdateOperationsInput | number
    itemDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    taxAmount?: FloatFieldUpdateOperationsInput | number
    finalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    action: string
    category: string
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: number
    userId?: string | null
    action: string
    category: string
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: number
    userId?: string | null
    action: string
    category: string
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateInput = {
    id?: string
    image: string
    imageName: string
    imageType: $Enums.ImageType
    relatedEntity?: string | null
    bucket: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    image: string
    imageName: string
    imageType: $Enums.ImageType
    relatedEntity?: string | null
    bucket: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageName?: StringFieldUpdateOperationsInput | string
    imageType?: EnumImageTypeFieldUpdateOperationsInput | $Enums.ImageType
    relatedEntity?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageName?: StringFieldUpdateOperationsInput | string
    imageType?: EnumImageTypeFieldUpdateOperationsInput | $Enums.ImageType
    relatedEntity?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ImageCreateManyInput = {
    id?: string
    image: string
    imageName: string
    imageType: $Enums.ImageType
    relatedEntity?: string | null
    bucket: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageName?: StringFieldUpdateOperationsInput | string
    imageType?: EnumImageTypeFieldUpdateOperationsInput | $Enums.ImageType
    relatedEntity?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageName?: StringFieldUpdateOperationsInput | string
    imageType?: EnumImageTypeFieldUpdateOperationsInput | $Enums.ImageType
    relatedEntity?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type RegionNullableScalarRelationFilter = {
    is?: RegionWhereInput | null
    isNot?: RegionWhereInput | null
  }

  export type ConsumerNullableScalarRelationFilter = {
    is?: ConsumerWhereInput | null
    isNot?: ConsumerWhereInput | null
  }

  export type BusinessUserAccessListRelationFilter = {
    every?: BusinessUserAccessWhereInput
    some?: BusinessUserAccessWhereInput
    none?: BusinessUserAccessWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type EmailChangeRecordListRelationFilter = {
    every?: EmailChangeRecordWhereInput
    some?: EmailChangeRecordWhereInput
    none?: EmailChangeRecordWhereInput
  }

  export type PhoneChangeRecordListRelationFilter = {
    every?: PhoneChangeRecordWhereInput
    some?: PhoneChangeRecordWhereInput
    none?: PhoneChangeRecordWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BusinessUserAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailChangeRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhoneChangeRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    regionId?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    timezone?: SortOrder
    locale?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    regionId?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    timezone?: SortOrder
    locale?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    regionId?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    timezone?: SortOrder
    locale?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    impersonatedBy?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    impersonatedBy?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    impersonatedBy?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountOrderByRelevanceInput = {
    fields: AccountOrderByRelevanceFieldEnum | AccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    userId?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    userId?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VerificationOrderByRelevanceInput = {
    fields: VerificationOrderByRelevanceFieldEnum | VerificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EmailChangeRecordOrderByRelevanceInput = {
    fields: EmailChangeRecordOrderByRelevanceFieldEnum | EmailChangeRecordOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmailChangeRecordCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    newEmail?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type EmailChangeRecordAvgOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type EmailChangeRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    newEmail?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type EmailChangeRecordMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    newEmail?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type EmailChangeRecordSumOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PhoneChangeRecordOrderByRelevanceInput = {
    fields: PhoneChangeRecordOrderByRelevanceFieldEnum | PhoneChangeRecordOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PhoneChangeRecordCountOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    newPhoneNumber?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type PhoneChangeRecordAvgOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type PhoneChangeRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    newPhoneNumber?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type PhoneChangeRecordMinOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    newPhoneNumber?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type PhoneChangeRecordSumOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type RateLimitOrderByRelevanceInput = {
    fields: RateLimitOrderByRelevanceFieldEnum | RateLimitOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RateLimitCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    count?: SortOrder
    resetTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RateLimitAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type RateLimitMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    count?: SortOrder
    resetTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RateLimitMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    count?: SortOrder
    resetTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RateLimitSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type ReceiptListRelationFilter = {
    every?: ReceiptWhereInput
    some?: ReceiptWhereInput
    none?: ReceiptWhereInput
  }

  export type ReceiptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsumerOrderByRelevanceInput = {
    fields: ConsumerOrderByRelevanceFieldEnum | ConsumerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ConsumerCountOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsumerMaxOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsumerMinOrderByAggregateInput = {
    id?: SortOrder
    barcode?: SortOrder
    userId?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type EnumAccessLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelFilter<$PrismaModel> | $Enums.AccessLevel
  }

  export type EnumPermissionNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel> | null
    has?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type MerchantNullableScalarRelationFilter = {
    is?: MerchantWhereInput | null
    isNot?: MerchantWhereInput | null
  }

  export type BrandNullableScalarRelationFilter = {
    is?: BrandWhereInput | null
    isNot?: BrandWhereInput | null
  }

  export type StoreNullableScalarRelationFilter = {
    is?: StoreWhereInput | null
    isNot?: StoreWhereInput | null
  }

  export type BusinessUserAccessOrderByRelevanceInput = {
    fields: BusinessUserAccessOrderByRelevanceFieldEnum | BusinessUserAccessOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BusinessUserAccessUserIdMerchantIdBrandIdStoreIdCompoundUniqueInput = {
    userId: string
    merchantId: string
    brandId: string
    storeId: string
  }

  export type BusinessUserAccessCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accessLevel?: SortOrder
    permissions?: SortOrder
    jobTitle?: SortOrder
    merchantId?: SortOrder
    brandId?: SortOrder
    storeId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type BusinessUserAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accessLevel?: SortOrder
    jobTitle?: SortOrder
    merchantId?: SortOrder
    brandId?: SortOrder
    storeId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type BusinessUserAccessMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accessLevel?: SortOrder
    jobTitle?: SortOrder
    merchantId?: SortOrder
    brandId?: SortOrder
    storeId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type EnumAccessLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel> | $Enums.AccessLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccessLevelFilter<$PrismaModel>
    _max?: NestedEnumAccessLevelFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CountryListRelationFilter = {
    every?: CountryWhereInput
    some?: CountryWhereInput
    none?: CountryWhereInput
  }

  export type StoreListRelationFilter = {
    every?: StoreWhereInput
    some?: StoreWhereInput
    none?: StoreWhereInput
  }

  export type CountryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CurrencyOrderByRelevanceInput = {
    fields: CurrencyOrderByRelevanceFieldEnum | CurrencyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CurrencyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    symbol?: SortOrder
    decimals?: SortOrder
    demonym?: SortOrder
    majorSingle?: SortOrder
    majorPlural?: SortOrder
    ISOnum?: SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrder
    minorPlural?: SortOrder
    ISOdigits?: SortOrder
    numToBasic?: SortOrder
  }

  export type CurrencyAvgOrderByAggregateInput = {
    decimals?: SortOrder
    ISOnum?: SortOrder
    ISOdigits?: SortOrder
    numToBasic?: SortOrder
  }

  export type CurrencyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    symbol?: SortOrder
    decimals?: SortOrder
    demonym?: SortOrder
    majorSingle?: SortOrder
    majorPlural?: SortOrder
    ISOnum?: SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrder
    minorPlural?: SortOrder
    ISOdigits?: SortOrder
    numToBasic?: SortOrder
  }

  export type CurrencyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    symbol?: SortOrder
    decimals?: SortOrder
    demonym?: SortOrder
    majorSingle?: SortOrder
    majorPlural?: SortOrder
    ISOnum?: SortOrder
    symbolNative?: SortOrder
    minorSingle?: SortOrder
    minorPlural?: SortOrder
    ISOdigits?: SortOrder
    numToBasic?: SortOrder
  }

  export type CurrencySumOrderByAggregateInput = {
    decimals?: SortOrder
    ISOnum?: SortOrder
    ISOdigits?: SortOrder
    numToBasic?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ContinentOrderByRelevanceInput = {
    fields: ContinentOrderByRelevanceFieldEnum | ContinentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContinentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ContinentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ContinentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CurrencyScalarRelationFilter = {
    is?: CurrencyWhereInput
    isNot?: CurrencyWhereInput
  }

  export type ContinentScalarRelationFilter = {
    is?: ContinentWhereInput
    isNot?: ContinentWhereInput
  }

  export type RegionListRelationFilter = {
    every?: RegionWhereInput
    some?: RegionWhereInput
    none?: RegionWhereInput
  }

  export type MerchantListRelationFilter = {
    every?: MerchantWhereInput
    some?: MerchantWhereInput
    none?: MerchantWhereInput
  }

  export type BrandListRelationFilter = {
    every?: BrandWhereInput
    some?: BrandWhereInput
    none?: BrandWhereInput
  }

  export type RegionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MerchantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryOrderByRelevanceInput = {
    fields: CountryOrderByRelevanceFieldEnum | CountryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    isoCode3?: SortOrder
    name?: SortOrder
    flag?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    currencyId?: SortOrder
    continentId?: SortOrder
    phonePrefix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    isoCode3?: SortOrder
    name?: SortOrder
    flag?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    currencyId?: SortOrder
    continentId?: SortOrder
    phonePrefix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    isoCode?: SortOrder
    isoCode3?: SortOrder
    name?: SortOrder
    flag?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    currencyId?: SortOrder
    continentId?: SortOrder
    phonePrefix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CountryScalarRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type RegionOrderByRelevanceInput = {
    fields: RegionOrderByRelevanceFieldEnum | RegionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RegionCountryIdCodeCompoundUniqueInput = {
    countryId: string
    code: string
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBusinessRegistrationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessRegistrationType | EnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessRegistrationType[] | ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessRegistrationType[] | ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessRegistrationTypeFilter<$PrismaModel> | $Enums.BusinessRegistrationType
  }

  export type BusinessRegistrationOrderByRelevanceInput = {
    fields: BusinessRegistrationOrderByRelevanceFieldEnum | BusinessRegistrationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BusinessRegistrationTypeNumberMerchantIdCompoundUniqueInput = {
    type: $Enums.BusinessRegistrationType
    number: string
    merchantId: string
  }

  export type BusinessRegistrationTypeNumberBrandIdCompoundUniqueInput = {
    type: $Enums.BusinessRegistrationType
    number: string
    brandId: string
  }

  export type BusinessRegistrationTypeNumberStoreIdCompoundUniqueInput = {
    type: $Enums.BusinessRegistrationType
    number: string
    storeId: string
  }

  export type BusinessRegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    number?: SortOrder
    issuingBody?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    merchantId?: SortOrder
    brandId?: SortOrder
    storeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BusinessRegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    number?: SortOrder
    issuingBody?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    merchantId?: SortOrder
    brandId?: SortOrder
    storeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BusinessRegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    number?: SortOrder
    issuingBody?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    isActive?: SortOrder
    merchantId?: SortOrder
    brandId?: SortOrder
    storeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBusinessRegistrationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessRegistrationType | EnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessRegistrationType[] | ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessRegistrationType[] | ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessRegistrationTypeWithAggregatesFilter<$PrismaModel> | $Enums.BusinessRegistrationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessRegistrationTypeFilter<$PrismaModel>
    _max?: NestedEnumBusinessRegistrationTypeFilter<$PrismaModel>
  }

  export type BusinessRegistrationListRelationFilter = {
    every?: BusinessRegistrationWhereInput
    some?: BusinessRegistrationWhereInput
    none?: BusinessRegistrationWhereInput
  }

  export type BusinessRegistrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MerchantOrderByRelevanceInput = {
    fields: MerchantOrderByRelevanceFieldEnum | MerchantOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MerchantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrder
    countryId?: SortOrder
    timezone?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrder
    countryId?: SortOrder
    timezone?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    phoneNumber?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrder
    countryId?: SortOrder
    timezone?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantScalarRelationFilter = {
    is?: MerchantWhereInput
    isNot?: MerchantWhereInput
  }

  export type BrandOrderByRelevanceInput = {
    fields: BrandOrderByRelevanceFieldEnum | BrandOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    tradingAsName?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrder
    countryId?: SortOrder
    phoneNumber?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    tradingAsName?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrder
    countryId?: SortOrder
    phoneNumber?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    merchantId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    genericEmail?: SortOrder
    invoiceEmail?: SortOrder
    tradingAsName?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    regionId?: SortOrder
    countryId?: SortOrder
    phoneNumber?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BrandScalarRelationFilter = {
    is?: BrandWhereInput
    isNot?: BrandWhereInput
  }

  export type StoreOrderByRelevanceInput = {
    fields: StoreOrderByRelevanceFieldEnum | StoreOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StoreCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    regionId?: SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phoneNumber?: SortOrder
    timezone?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type StoreMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    regionId?: SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phoneNumber?: SortOrder
    timezone?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    brandId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    addressLine3?: SortOrder
    city?: SortOrder
    regionId?: SortOrder
    postalCode?: SortOrder
    countryId?: SortOrder
    formattedAddress?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phoneNumber?: SortOrder
    timezone?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ConsumerScalarRelationFilter = {
    is?: ConsumerWhereInput
    isNot?: ConsumerWhereInput
  }

  export type StoreScalarRelationFilter = {
    is?: StoreWhereInput
    isNot?: StoreWhereInput
  }

  export type ReceiptItemListRelationFilter = {
    every?: ReceiptItemWhereInput
    some?: ReceiptItemWhereInput
    none?: ReceiptItemWhereInput
  }

  export type ReceiptPaymentListRelationFilter = {
    every?: ReceiptPaymentWhereInput
    some?: ReceiptPaymentWhereInput
    none?: ReceiptPaymentWhereInput
  }

  export type ReceiptTaxListRelationFilter = {
    every?: ReceiptTaxWhereInput
    some?: ReceiptTaxWhereInput
    none?: ReceiptTaxWhereInput
  }

  export type ReceiptItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiptPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiptTaxOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiptOrderByRelevanceInput = {
    fields: ReceiptOrderByRelevanceFieldEnum | ReceiptOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReceiptCountOrderByAggregateInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    totalTax?: SortOrder
    cardSurcharge?: SortOrder
    discount?: SortOrder
    tip?: SortOrder
    roundingAdjustment?: SortOrder
    finalTotal?: SortOrder
    otherInformation?: SortOrder
    receiptDateTime?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptAvgOrderByAggregateInput = {
    subTotal?: SortOrder
    totalTax?: SortOrder
    cardSurcharge?: SortOrder
    discount?: SortOrder
    tip?: SortOrder
    roundingAdjustment?: SortOrder
    finalTotal?: SortOrder
  }

  export type ReceiptMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    totalTax?: SortOrder
    cardSurcharge?: SortOrder
    discount?: SortOrder
    tip?: SortOrder
    roundingAdjustment?: SortOrder
    finalTotal?: SortOrder
    receiptDateTime?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptMinOrderByAggregateInput = {
    id?: SortOrder
    receiptNumber?: SortOrder
    consumerId?: SortOrder
    storeId?: SortOrder
    subTotal?: SortOrder
    totalTax?: SortOrder
    cardSurcharge?: SortOrder
    discount?: SortOrder
    tip?: SortOrder
    roundingAdjustment?: SortOrder
    finalTotal?: SortOrder
    receiptDateTime?: SortOrder
    timezone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptSumOrderByAggregateInput = {
    subTotal?: SortOrder
    totalTax?: SortOrder
    cardSurcharge?: SortOrder
    discount?: SortOrder
    tip?: SortOrder
    roundingAdjustment?: SortOrder
    finalTotal?: SortOrder
  }

  export type EnumTaxTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaxType | EnumTaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaxTypeFilter<$PrismaModel> | $Enums.TaxType
  }

  export type ReceiptScalarRelationFilter = {
    is?: ReceiptWhereInput
    isNot?: ReceiptWhereInput
  }

  export type ReceiptTaxOrderByRelevanceInput = {
    fields: ReceiptTaxOrderByRelevanceFieldEnum | ReceiptTaxOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReceiptTaxCountOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    taxType?: SortOrder
    taxName?: SortOrder
    taxRate?: SortOrder
    taxableAmount?: SortOrder
    taxAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptTaxAvgOrderByAggregateInput = {
    taxRate?: SortOrder
    taxableAmount?: SortOrder
    taxAmount?: SortOrder
  }

  export type ReceiptTaxMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    taxType?: SortOrder
    taxName?: SortOrder
    taxRate?: SortOrder
    taxableAmount?: SortOrder
    taxAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptTaxMinOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    taxType?: SortOrder
    taxName?: SortOrder
    taxRate?: SortOrder
    taxableAmount?: SortOrder
    taxAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptTaxSumOrderByAggregateInput = {
    taxRate?: SortOrder
    taxableAmount?: SortOrder
    taxAmount?: SortOrder
  }

  export type EnumTaxTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaxType | EnumTaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaxTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaxType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaxTypeFilter<$PrismaModel>
    _max?: NestedEnumTaxTypeFilter<$PrismaModel>
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type ReceiptPaymentOrderByRelevanceInput = {
    fields: ReceiptPaymentOrderByRelevanceFieldEnum | ReceiptPaymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReceiptPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrder
    reference?: SortOrder
    cardNo?: SortOrder
    authCode?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptPaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ReceiptPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrder
    reference?: SortOrder
    cardNo?: SortOrder
    authCode?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    terminal?: SortOrder
    reference?: SortOrder
    cardNo?: SortOrder
    authCode?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptPaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type ReceiptItemOrderByRelevanceInput = {
    fields: ReceiptItemOrderByRelevanceFieldEnum | ReceiptItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReceiptItemCountOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    modelNumber?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    itemTotal?: SortOrder
    itemDiscount?: SortOrder
    taxAmount?: SortOrder
    finalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    itemTotal?: SortOrder
    itemDiscount?: SortOrder
    taxAmount?: SortOrder
    finalAmount?: SortOrder
  }

  export type ReceiptItemMaxOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    modelNumber?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    itemTotal?: SortOrder
    itemDiscount?: SortOrder
    taxAmount?: SortOrder
    finalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptItemMinOrderByAggregateInput = {
    id?: SortOrder
    receiptId?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    description?: SortOrder
    modelNumber?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    itemTotal?: SortOrder
    itemDiscount?: SortOrder
    taxAmount?: SortOrder
    finalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReceiptItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    itemTotal?: SortOrder
    itemDiscount?: SortOrder
    taxAmount?: SortOrder
    finalAmount?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuditLogOrderByRelevanceInput = {
    fields: AuditLogOrderByRelevanceFieldEnum | AuditLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    category?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    metadata?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    category?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    category?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumImageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ImageType | EnumImageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ImageType[] | ListEnumImageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ImageType[] | ListEnumImageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumImageTypeFilter<$PrismaModel> | $Enums.ImageType
  }

  export type ImageOrderByRelevanceInput = {
    fields: ImageOrderByRelevanceFieldEnum | ImageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    imageName?: SortOrder
    imageType?: SortOrder
    relatedEntity?: SortOrder
    bucket?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    imageName?: SortOrder
    imageType?: SortOrder
    relatedEntity?: SortOrder
    bucket?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    imageName?: SortOrder
    imageType?: SortOrder
    relatedEntity?: SortOrder
    bucket?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumImageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ImageType | EnumImageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ImageType[] | ListEnumImageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ImageType[] | ListEnumImageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumImageTypeWithAggregatesFilter<$PrismaModel> | $Enums.ImageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImageTypeFilter<$PrismaModel>
    _max?: NestedEnumImageTypeFilter<$PrismaModel>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type RegionCreateNestedOneWithoutUsersInput = {
    create?: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUsersInput
    connect?: RegionWhereUniqueInput
  }

  export type ConsumerCreateNestedOneWithoutUserInput = {
    create?: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutUserInput
    connect?: ConsumerWhereUniqueInput
  }

  export type BusinessUserAccessCreateNestedManyWithoutUserInput = {
    create?: XOR<BusinessUserAccessCreateWithoutUserInput, BusinessUserAccessUncheckedCreateWithoutUserInput> | BusinessUserAccessCreateWithoutUserInput[] | BusinessUserAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutUserInput | BusinessUserAccessCreateOrConnectWithoutUserInput[]
    createMany?: BusinessUserAccessCreateManyUserInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedUsersInput = {
    create?: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type BusinessUserAccessCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BusinessUserAccessCreateWithoutCreatedByInput, BusinessUserAccessUncheckedCreateWithoutCreatedByInput> | BusinessUserAccessCreateWithoutCreatedByInput[] | BusinessUserAccessUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutCreatedByInput | BusinessUserAccessCreateOrConnectWithoutCreatedByInput[]
    createMany?: BusinessUserAccessCreateManyCreatedByInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type EmailChangeRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailChangeRecordCreateWithoutUserInput, EmailChangeRecordUncheckedCreateWithoutUserInput> | EmailChangeRecordCreateWithoutUserInput[] | EmailChangeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailChangeRecordCreateOrConnectWithoutUserInput | EmailChangeRecordCreateOrConnectWithoutUserInput[]
    createMany?: EmailChangeRecordCreateManyUserInputEnvelope
    connect?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
  }

  export type PhoneChangeRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<PhoneChangeRecordCreateWithoutUserInput, PhoneChangeRecordUncheckedCreateWithoutUserInput> | PhoneChangeRecordCreateWithoutUserInput[] | PhoneChangeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PhoneChangeRecordCreateOrConnectWithoutUserInput | PhoneChangeRecordCreateOrConnectWithoutUserInput[]
    createMany?: PhoneChangeRecordCreateManyUserInputEnvelope
    connect?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type ConsumerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutUserInput
    connect?: ConsumerWhereUniqueInput
  }

  export type BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BusinessUserAccessCreateWithoutUserInput, BusinessUserAccessUncheckedCreateWithoutUserInput> | BusinessUserAccessCreateWithoutUserInput[] | BusinessUserAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutUserInput | BusinessUserAccessCreateOrConnectWithoutUserInput[]
    createMany?: BusinessUserAccessCreateManyUserInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BusinessUserAccessCreateWithoutCreatedByInput, BusinessUserAccessUncheckedCreateWithoutCreatedByInput> | BusinessUserAccessCreateWithoutCreatedByInput[] | BusinessUserAccessUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutCreatedByInput | BusinessUserAccessCreateOrConnectWithoutCreatedByInput[]
    createMany?: BusinessUserAccessCreateManyCreatedByInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailChangeRecordCreateWithoutUserInput, EmailChangeRecordUncheckedCreateWithoutUserInput> | EmailChangeRecordCreateWithoutUserInput[] | EmailChangeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailChangeRecordCreateOrConnectWithoutUserInput | EmailChangeRecordCreateOrConnectWithoutUserInput[]
    createMany?: EmailChangeRecordCreateManyUserInputEnvelope
    connect?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
  }

  export type PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PhoneChangeRecordCreateWithoutUserInput, PhoneChangeRecordUncheckedCreateWithoutUserInput> | PhoneChangeRecordCreateWithoutUserInput[] | PhoneChangeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PhoneChangeRecordCreateOrConnectWithoutUserInput | PhoneChangeRecordCreateOrConnectWithoutUserInput[]
    createMany?: PhoneChangeRecordCreateManyUserInputEnvelope
    connect?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type RegionUpdateOneWithoutUsersNestedInput = {
    create?: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUsersInput
    upsert?: RegionUpsertWithoutUsersInput
    disconnect?: RegionWhereInput | boolean
    delete?: RegionWhereInput | boolean
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutUsersInput, RegionUpdateWithoutUsersInput>, RegionUncheckedUpdateWithoutUsersInput>
  }

  export type ConsumerUpdateOneWithoutUserNestedInput = {
    create?: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutUserInput
    upsert?: ConsumerUpsertWithoutUserInput
    disconnect?: ConsumerWhereInput | boolean
    delete?: ConsumerWhereInput | boolean
    connect?: ConsumerWhereUniqueInput
    update?: XOR<XOR<ConsumerUpdateToOneWithWhereWithoutUserInput, ConsumerUpdateWithoutUserInput>, ConsumerUncheckedUpdateWithoutUserInput>
  }

  export type BusinessUserAccessUpdateManyWithoutUserNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutUserInput, BusinessUserAccessUncheckedCreateWithoutUserInput> | BusinessUserAccessCreateWithoutUserInput[] | BusinessUserAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutUserInput | BusinessUserAccessCreateOrConnectWithoutUserInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutUserInput | BusinessUserAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BusinessUserAccessCreateManyUserInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutUserInput | BusinessUserAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutUserInput | BusinessUserAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCreatedUsersNestedInput = {
    create?: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedUsersInput
    upsert?: UserUpsertWithoutCreatedUsersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedUsersInput, UserUpdateWithoutCreatedUsersInput>, UserUncheckedUpdateWithoutCreatedUsersInput>
  }

  export type UserUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCreatedByInput | UserUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCreatedByInput | UserUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCreatedByInput | UserUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type BusinessUserAccessUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutCreatedByInput, BusinessUserAccessUncheckedCreateWithoutCreatedByInput> | BusinessUserAccessCreateWithoutCreatedByInput[] | BusinessUserAccessUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutCreatedByInput | BusinessUserAccessCreateOrConnectWithoutCreatedByInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutCreatedByInput | BusinessUserAccessUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BusinessUserAccessCreateManyCreatedByInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutCreatedByInput | BusinessUserAccessUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutCreatedByInput | BusinessUserAccessUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type EmailChangeRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailChangeRecordCreateWithoutUserInput, EmailChangeRecordUncheckedCreateWithoutUserInput> | EmailChangeRecordCreateWithoutUserInput[] | EmailChangeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailChangeRecordCreateOrConnectWithoutUserInput | EmailChangeRecordCreateOrConnectWithoutUserInput[]
    upsert?: EmailChangeRecordUpsertWithWhereUniqueWithoutUserInput | EmailChangeRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailChangeRecordCreateManyUserInputEnvelope
    set?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
    disconnect?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
    delete?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
    connect?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
    update?: EmailChangeRecordUpdateWithWhereUniqueWithoutUserInput | EmailChangeRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailChangeRecordUpdateManyWithWhereWithoutUserInput | EmailChangeRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailChangeRecordScalarWhereInput | EmailChangeRecordScalarWhereInput[]
  }

  export type PhoneChangeRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<PhoneChangeRecordCreateWithoutUserInput, PhoneChangeRecordUncheckedCreateWithoutUserInput> | PhoneChangeRecordCreateWithoutUserInput[] | PhoneChangeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PhoneChangeRecordCreateOrConnectWithoutUserInput | PhoneChangeRecordCreateOrConnectWithoutUserInput[]
    upsert?: PhoneChangeRecordUpsertWithWhereUniqueWithoutUserInput | PhoneChangeRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PhoneChangeRecordCreateManyUserInputEnvelope
    set?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
    disconnect?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
    delete?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
    connect?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
    update?: PhoneChangeRecordUpdateWithWhereUniqueWithoutUserInput | PhoneChangeRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PhoneChangeRecordUpdateManyWithWhereWithoutUserInput | PhoneChangeRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PhoneChangeRecordScalarWhereInput | PhoneChangeRecordScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type ConsumerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutUserInput
    upsert?: ConsumerUpsertWithoutUserInput
    disconnect?: ConsumerWhereInput | boolean
    delete?: ConsumerWhereInput | boolean
    connect?: ConsumerWhereUniqueInput
    update?: XOR<XOR<ConsumerUpdateToOneWithWhereWithoutUserInput, ConsumerUpdateWithoutUserInput>, ConsumerUncheckedUpdateWithoutUserInput>
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutUserInput, BusinessUserAccessUncheckedCreateWithoutUserInput> | BusinessUserAccessCreateWithoutUserInput[] | BusinessUserAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutUserInput | BusinessUserAccessCreateOrConnectWithoutUserInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutUserInput | BusinessUserAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BusinessUserAccessCreateManyUserInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutUserInput | BusinessUserAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutUserInput | BusinessUserAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCreatedByInput | UserUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCreatedByInput | UserUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCreatedByInput | UserUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutCreatedByInput, BusinessUserAccessUncheckedCreateWithoutCreatedByInput> | BusinessUserAccessCreateWithoutCreatedByInput[] | BusinessUserAccessUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutCreatedByInput | BusinessUserAccessCreateOrConnectWithoutCreatedByInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutCreatedByInput | BusinessUserAccessUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BusinessUserAccessCreateManyCreatedByInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutCreatedByInput | BusinessUserAccessUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutCreatedByInput | BusinessUserAccessUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailChangeRecordCreateWithoutUserInput, EmailChangeRecordUncheckedCreateWithoutUserInput> | EmailChangeRecordCreateWithoutUserInput[] | EmailChangeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailChangeRecordCreateOrConnectWithoutUserInput | EmailChangeRecordCreateOrConnectWithoutUserInput[]
    upsert?: EmailChangeRecordUpsertWithWhereUniqueWithoutUserInput | EmailChangeRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailChangeRecordCreateManyUserInputEnvelope
    set?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
    disconnect?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
    delete?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
    connect?: EmailChangeRecordWhereUniqueInput | EmailChangeRecordWhereUniqueInput[]
    update?: EmailChangeRecordUpdateWithWhereUniqueWithoutUserInput | EmailChangeRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailChangeRecordUpdateManyWithWhereWithoutUserInput | EmailChangeRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailChangeRecordScalarWhereInput | EmailChangeRecordScalarWhereInput[]
  }

  export type PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PhoneChangeRecordCreateWithoutUserInput, PhoneChangeRecordUncheckedCreateWithoutUserInput> | PhoneChangeRecordCreateWithoutUserInput[] | PhoneChangeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PhoneChangeRecordCreateOrConnectWithoutUserInput | PhoneChangeRecordCreateOrConnectWithoutUserInput[]
    upsert?: PhoneChangeRecordUpsertWithWhereUniqueWithoutUserInput | PhoneChangeRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PhoneChangeRecordCreateManyUserInputEnvelope
    set?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
    disconnect?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
    delete?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
    connect?: PhoneChangeRecordWhereUniqueInput | PhoneChangeRecordWhereUniqueInput[]
    update?: PhoneChangeRecordUpdateWithWhereUniqueWithoutUserInput | PhoneChangeRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PhoneChangeRecordUpdateManyWithWhereWithoutUserInput | PhoneChangeRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PhoneChangeRecordScalarWhereInput | PhoneChangeRecordScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutEmailChangeRecordsInput = {
    create?: XOR<UserCreateWithoutEmailChangeRecordsInput, UserUncheckedCreateWithoutEmailChangeRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailChangeRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutEmailChangeRecordsNestedInput = {
    create?: XOR<UserCreateWithoutEmailChangeRecordsInput, UserUncheckedCreateWithoutEmailChangeRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailChangeRecordsInput
    upsert?: UserUpsertWithoutEmailChangeRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmailChangeRecordsInput, UserUpdateWithoutEmailChangeRecordsInput>, UserUncheckedUpdateWithoutEmailChangeRecordsInput>
  }

  export type UserCreateNestedOneWithoutPhoneChangeRecordsInput = {
    create?: XOR<UserCreateWithoutPhoneChangeRecordsInput, UserUncheckedCreateWithoutPhoneChangeRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhoneChangeRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPhoneChangeRecordsNestedInput = {
    create?: XOR<UserCreateWithoutPhoneChangeRecordsInput, UserUncheckedCreateWithoutPhoneChangeRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhoneChangeRecordsInput
    upsert?: UserUpsertWithoutPhoneChangeRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPhoneChangeRecordsInput, UserUpdateWithoutPhoneChangeRecordsInput>, UserUncheckedUpdateWithoutPhoneChangeRecordsInput>
  }

  export type UserCreateNestedOneWithoutConsumerProfileInput = {
    create?: XOR<UserCreateWithoutConsumerProfileInput, UserUncheckedCreateWithoutConsumerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsumerProfileInput
    connect?: UserWhereUniqueInput
  }

  export type ReceiptCreateNestedManyWithoutConsumerInput = {
    create?: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput> | ReceiptCreateWithoutConsumerInput[] | ReceiptUncheckedCreateWithoutConsumerInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutConsumerInput | ReceiptCreateOrConnectWithoutConsumerInput[]
    createMany?: ReceiptCreateManyConsumerInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type ReceiptUncheckedCreateNestedManyWithoutConsumerInput = {
    create?: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput> | ReceiptCreateWithoutConsumerInput[] | ReceiptUncheckedCreateWithoutConsumerInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutConsumerInput | ReceiptCreateOrConnectWithoutConsumerInput[]
    createMany?: ReceiptCreateManyConsumerInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type UserUpdateOneRequiredWithoutConsumerProfileNestedInput = {
    create?: XOR<UserCreateWithoutConsumerProfileInput, UserUncheckedCreateWithoutConsumerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsumerProfileInput
    upsert?: UserUpsertWithoutConsumerProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConsumerProfileInput, UserUpdateWithoutConsumerProfileInput>, UserUncheckedUpdateWithoutConsumerProfileInput>
  }

  export type ReceiptUpdateManyWithoutConsumerNestedInput = {
    create?: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput> | ReceiptCreateWithoutConsumerInput[] | ReceiptUncheckedCreateWithoutConsumerInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutConsumerInput | ReceiptCreateOrConnectWithoutConsumerInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutConsumerInput | ReceiptUpsertWithWhereUniqueWithoutConsumerInput[]
    createMany?: ReceiptCreateManyConsumerInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutConsumerInput | ReceiptUpdateWithWhereUniqueWithoutConsumerInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutConsumerInput | ReceiptUpdateManyWithWhereWithoutConsumerInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type ReceiptUncheckedUpdateManyWithoutConsumerNestedInput = {
    create?: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput> | ReceiptCreateWithoutConsumerInput[] | ReceiptUncheckedCreateWithoutConsumerInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutConsumerInput | ReceiptCreateOrConnectWithoutConsumerInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutConsumerInput | ReceiptUpsertWithWhereUniqueWithoutConsumerInput[]
    createMany?: ReceiptCreateManyConsumerInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutConsumerInput | ReceiptUpdateWithWhereUniqueWithoutConsumerInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutConsumerInput | ReceiptUpdateManyWithWhereWithoutConsumerInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type BusinessUserAccessCreatepermissionsInput = {
    set: $Enums.Permission[]
  }

  export type UserCreateNestedOneWithoutBusinessAccessInput = {
    create?: XOR<UserCreateWithoutBusinessAccessInput, UserUncheckedCreateWithoutBusinessAccessInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessAccessInput
    connect?: UserWhereUniqueInput
  }

  export type MerchantCreateNestedOneWithoutUserAccessInput = {
    create?: XOR<MerchantCreateWithoutUserAccessInput, MerchantUncheckedCreateWithoutUserAccessInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutUserAccessInput
    connect?: MerchantWhereUniqueInput
  }

  export type BrandCreateNestedOneWithoutUserAccessInput = {
    create?: XOR<BrandCreateWithoutUserAccessInput, BrandUncheckedCreateWithoutUserAccessInput>
    connectOrCreate?: BrandCreateOrConnectWithoutUserAccessInput
    connect?: BrandWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutUserAccessInput = {
    create?: XOR<StoreCreateWithoutUserAccessInput, StoreUncheckedCreateWithoutUserAccessInput>
    connectOrCreate?: StoreCreateOrConnectWithoutUserAccessInput
    connect?: StoreWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedAccessRecordsInput = {
    create?: XOR<UserCreateWithoutCreatedAccessRecordsInput, UserUncheckedCreateWithoutCreatedAccessRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAccessRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAccessLevelFieldUpdateOperationsInput = {
    set?: $Enums.AccessLevel
  }

  export type BusinessUserAccessUpdatepermissionsInput = {
    set?: $Enums.Permission[]
    push?: $Enums.Permission | $Enums.Permission[]
  }

  export type UserUpdateOneRequiredWithoutBusinessAccessNestedInput = {
    create?: XOR<UserCreateWithoutBusinessAccessInput, UserUncheckedCreateWithoutBusinessAccessInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessAccessInput
    upsert?: UserUpsertWithoutBusinessAccessInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBusinessAccessInput, UserUpdateWithoutBusinessAccessInput>, UserUncheckedUpdateWithoutBusinessAccessInput>
  }

  export type MerchantUpdateOneWithoutUserAccessNestedInput = {
    create?: XOR<MerchantCreateWithoutUserAccessInput, MerchantUncheckedCreateWithoutUserAccessInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutUserAccessInput
    upsert?: MerchantUpsertWithoutUserAccessInput
    disconnect?: MerchantWhereInput | boolean
    delete?: MerchantWhereInput | boolean
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutUserAccessInput, MerchantUpdateWithoutUserAccessInput>, MerchantUncheckedUpdateWithoutUserAccessInput>
  }

  export type BrandUpdateOneWithoutUserAccessNestedInput = {
    create?: XOR<BrandCreateWithoutUserAccessInput, BrandUncheckedCreateWithoutUserAccessInput>
    connectOrCreate?: BrandCreateOrConnectWithoutUserAccessInput
    upsert?: BrandUpsertWithoutUserAccessInput
    disconnect?: BrandWhereInput | boolean
    delete?: BrandWhereInput | boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutUserAccessInput, BrandUpdateWithoutUserAccessInput>, BrandUncheckedUpdateWithoutUserAccessInput>
  }

  export type StoreUpdateOneWithoutUserAccessNestedInput = {
    create?: XOR<StoreCreateWithoutUserAccessInput, StoreUncheckedCreateWithoutUserAccessInput>
    connectOrCreate?: StoreCreateOrConnectWithoutUserAccessInput
    upsert?: StoreUpsertWithoutUserAccessInput
    disconnect?: StoreWhereInput | boolean
    delete?: StoreWhereInput | boolean
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutUserAccessInput, StoreUpdateWithoutUserAccessInput>, StoreUncheckedUpdateWithoutUserAccessInput>
  }

  export type UserUpdateOneWithoutCreatedAccessRecordsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAccessRecordsInput, UserUncheckedCreateWithoutCreatedAccessRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAccessRecordsInput
    upsert?: UserUpsertWithoutCreatedAccessRecordsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAccessRecordsInput, UserUpdateWithoutCreatedAccessRecordsInput>, UserUncheckedUpdateWithoutCreatedAccessRecordsInput>
  }

  export type CountryCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<CountryCreateWithoutCurrencyInput, CountryUncheckedCreateWithoutCurrencyInput> | CountryCreateWithoutCurrencyInput[] | CountryUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutCurrencyInput | CountryCreateOrConnectWithoutCurrencyInput[]
    createMany?: CountryCreateManyCurrencyInputEnvelope
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
  }

  export type StoreCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput> | StoreCreateWithoutCurrencyInput[] | StoreUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCurrencyInput | StoreCreateOrConnectWithoutCurrencyInput[]
    createMany?: StoreCreateManyCurrencyInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type CountryUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<CountryCreateWithoutCurrencyInput, CountryUncheckedCreateWithoutCurrencyInput> | CountryCreateWithoutCurrencyInput[] | CountryUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutCurrencyInput | CountryCreateOrConnectWithoutCurrencyInput[]
    createMany?: CountryCreateManyCurrencyInputEnvelope
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
  }

  export type StoreUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput> | StoreCreateWithoutCurrencyInput[] | StoreUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCurrencyInput | StoreCreateOrConnectWithoutCurrencyInput[]
    createMany?: StoreCreateManyCurrencyInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CountryUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<CountryCreateWithoutCurrencyInput, CountryUncheckedCreateWithoutCurrencyInput> | CountryCreateWithoutCurrencyInput[] | CountryUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutCurrencyInput | CountryCreateOrConnectWithoutCurrencyInput[]
    upsert?: CountryUpsertWithWhereUniqueWithoutCurrencyInput | CountryUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: CountryCreateManyCurrencyInputEnvelope
    set?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    disconnect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    delete?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    update?: CountryUpdateWithWhereUniqueWithoutCurrencyInput | CountryUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: CountryUpdateManyWithWhereWithoutCurrencyInput | CountryUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: CountryScalarWhereInput | CountryScalarWhereInput[]
  }

  export type StoreUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput> | StoreCreateWithoutCurrencyInput[] | StoreUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCurrencyInput | StoreCreateOrConnectWithoutCurrencyInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutCurrencyInput | StoreUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: StoreCreateManyCurrencyInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutCurrencyInput | StoreUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutCurrencyInput | StoreUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type CountryUncheckedUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<CountryCreateWithoutCurrencyInput, CountryUncheckedCreateWithoutCurrencyInput> | CountryCreateWithoutCurrencyInput[] | CountryUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutCurrencyInput | CountryCreateOrConnectWithoutCurrencyInput[]
    upsert?: CountryUpsertWithWhereUniqueWithoutCurrencyInput | CountryUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: CountryCreateManyCurrencyInputEnvelope
    set?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    disconnect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    delete?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    update?: CountryUpdateWithWhereUniqueWithoutCurrencyInput | CountryUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: CountryUpdateManyWithWhereWithoutCurrencyInput | CountryUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: CountryScalarWhereInput | CountryScalarWhereInput[]
  }

  export type StoreUncheckedUpdateManyWithoutCurrencyNestedInput = {
    create?: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput> | StoreCreateWithoutCurrencyInput[] | StoreUncheckedCreateWithoutCurrencyInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCurrencyInput | StoreCreateOrConnectWithoutCurrencyInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutCurrencyInput | StoreUpsertWithWhereUniqueWithoutCurrencyInput[]
    createMany?: StoreCreateManyCurrencyInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutCurrencyInput | StoreUpdateWithWhereUniqueWithoutCurrencyInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutCurrencyInput | StoreUpdateManyWithWhereWithoutCurrencyInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type CountryCreateNestedManyWithoutContinentInput = {
    create?: XOR<CountryCreateWithoutContinentInput, CountryUncheckedCreateWithoutContinentInput> | CountryCreateWithoutContinentInput[] | CountryUncheckedCreateWithoutContinentInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutContinentInput | CountryCreateOrConnectWithoutContinentInput[]
    createMany?: CountryCreateManyContinentInputEnvelope
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
  }

  export type CountryUncheckedCreateNestedManyWithoutContinentInput = {
    create?: XOR<CountryCreateWithoutContinentInput, CountryUncheckedCreateWithoutContinentInput> | CountryCreateWithoutContinentInput[] | CountryUncheckedCreateWithoutContinentInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutContinentInput | CountryCreateOrConnectWithoutContinentInput[]
    createMany?: CountryCreateManyContinentInputEnvelope
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
  }

  export type CountryUpdateManyWithoutContinentNestedInput = {
    create?: XOR<CountryCreateWithoutContinentInput, CountryUncheckedCreateWithoutContinentInput> | CountryCreateWithoutContinentInput[] | CountryUncheckedCreateWithoutContinentInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutContinentInput | CountryCreateOrConnectWithoutContinentInput[]
    upsert?: CountryUpsertWithWhereUniqueWithoutContinentInput | CountryUpsertWithWhereUniqueWithoutContinentInput[]
    createMany?: CountryCreateManyContinentInputEnvelope
    set?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    disconnect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    delete?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    update?: CountryUpdateWithWhereUniqueWithoutContinentInput | CountryUpdateWithWhereUniqueWithoutContinentInput[]
    updateMany?: CountryUpdateManyWithWhereWithoutContinentInput | CountryUpdateManyWithWhereWithoutContinentInput[]
    deleteMany?: CountryScalarWhereInput | CountryScalarWhereInput[]
  }

  export type CountryUncheckedUpdateManyWithoutContinentNestedInput = {
    create?: XOR<CountryCreateWithoutContinentInput, CountryUncheckedCreateWithoutContinentInput> | CountryCreateWithoutContinentInput[] | CountryUncheckedCreateWithoutContinentInput[]
    connectOrCreate?: CountryCreateOrConnectWithoutContinentInput | CountryCreateOrConnectWithoutContinentInput[]
    upsert?: CountryUpsertWithWhereUniqueWithoutContinentInput | CountryUpsertWithWhereUniqueWithoutContinentInput[]
    createMany?: CountryCreateManyContinentInputEnvelope
    set?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    disconnect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    delete?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    connect?: CountryWhereUniqueInput | CountryWhereUniqueInput[]
    update?: CountryUpdateWithWhereUniqueWithoutContinentInput | CountryUpdateWithWhereUniqueWithoutContinentInput[]
    updateMany?: CountryUpdateManyWithWhereWithoutContinentInput | CountryUpdateManyWithWhereWithoutContinentInput[]
    deleteMany?: CountryScalarWhereInput | CountryScalarWhereInput[]
  }

  export type CurrencyCreateNestedOneWithoutCountriesInput = {
    create?: XOR<CurrencyCreateWithoutCountriesInput, CurrencyUncheckedCreateWithoutCountriesInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutCountriesInput
    connect?: CurrencyWhereUniqueInput
  }

  export type ContinentCreateNestedOneWithoutCountriesInput = {
    create?: XOR<ContinentCreateWithoutCountriesInput, ContinentUncheckedCreateWithoutCountriesInput>
    connectOrCreate?: ContinentCreateOrConnectWithoutCountriesInput
    connect?: ContinentWhereUniqueInput
  }

  export type RegionCreateNestedManyWithoutCountryInput = {
    create?: XOR<RegionCreateWithoutCountryInput, RegionUncheckedCreateWithoutCountryInput> | RegionCreateWithoutCountryInput[] | RegionUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: RegionCreateOrConnectWithoutCountryInput | RegionCreateOrConnectWithoutCountryInput[]
    createMany?: RegionCreateManyCountryInputEnvelope
    connect?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
  }

  export type MerchantCreateNestedManyWithoutCountryInput = {
    create?: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput> | MerchantCreateWithoutCountryInput[] | MerchantUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutCountryInput | MerchantCreateOrConnectWithoutCountryInput[]
    createMany?: MerchantCreateManyCountryInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type BrandCreateNestedManyWithoutCountryInput = {
    create?: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput> | BrandCreateWithoutCountryInput[] | BrandUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCountryInput | BrandCreateOrConnectWithoutCountryInput[]
    createMany?: BrandCreateManyCountryInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type StoreCreateNestedManyWithoutCountryInput = {
    create?: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput> | StoreCreateWithoutCountryInput[] | StoreUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCountryInput | StoreCreateOrConnectWithoutCountryInput[]
    createMany?: StoreCreateManyCountryInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type RegionUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<RegionCreateWithoutCountryInput, RegionUncheckedCreateWithoutCountryInput> | RegionCreateWithoutCountryInput[] | RegionUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: RegionCreateOrConnectWithoutCountryInput | RegionCreateOrConnectWithoutCountryInput[]
    createMany?: RegionCreateManyCountryInputEnvelope
    connect?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput> | MerchantCreateWithoutCountryInput[] | MerchantUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutCountryInput | MerchantCreateOrConnectWithoutCountryInput[]
    createMany?: MerchantCreateManyCountryInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type BrandUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput> | BrandCreateWithoutCountryInput[] | BrandUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCountryInput | BrandCreateOrConnectWithoutCountryInput[]
    createMany?: BrandCreateManyCountryInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type StoreUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput> | StoreCreateWithoutCountryInput[] | StoreUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCountryInput | StoreCreateOrConnectWithoutCountryInput[]
    createMany?: StoreCreateManyCountryInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CurrencyUpdateOneRequiredWithoutCountriesNestedInput = {
    create?: XOR<CurrencyCreateWithoutCountriesInput, CurrencyUncheckedCreateWithoutCountriesInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutCountriesInput
    upsert?: CurrencyUpsertWithoutCountriesInput
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutCountriesInput, CurrencyUpdateWithoutCountriesInput>, CurrencyUncheckedUpdateWithoutCountriesInput>
  }

  export type ContinentUpdateOneRequiredWithoutCountriesNestedInput = {
    create?: XOR<ContinentCreateWithoutCountriesInput, ContinentUncheckedCreateWithoutCountriesInput>
    connectOrCreate?: ContinentCreateOrConnectWithoutCountriesInput
    upsert?: ContinentUpsertWithoutCountriesInput
    connect?: ContinentWhereUniqueInput
    update?: XOR<XOR<ContinentUpdateToOneWithWhereWithoutCountriesInput, ContinentUpdateWithoutCountriesInput>, ContinentUncheckedUpdateWithoutCountriesInput>
  }

  export type RegionUpdateManyWithoutCountryNestedInput = {
    create?: XOR<RegionCreateWithoutCountryInput, RegionUncheckedCreateWithoutCountryInput> | RegionCreateWithoutCountryInput[] | RegionUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: RegionCreateOrConnectWithoutCountryInput | RegionCreateOrConnectWithoutCountryInput[]
    upsert?: RegionUpsertWithWhereUniqueWithoutCountryInput | RegionUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: RegionCreateManyCountryInputEnvelope
    set?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
    disconnect?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
    delete?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
    connect?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
    update?: RegionUpdateWithWhereUniqueWithoutCountryInput | RegionUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: RegionUpdateManyWithWhereWithoutCountryInput | RegionUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: RegionScalarWhereInput | RegionScalarWhereInput[]
  }

  export type MerchantUpdateManyWithoutCountryNestedInput = {
    create?: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput> | MerchantCreateWithoutCountryInput[] | MerchantUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutCountryInput | MerchantCreateOrConnectWithoutCountryInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutCountryInput | MerchantUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: MerchantCreateManyCountryInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutCountryInput | MerchantUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutCountryInput | MerchantUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type BrandUpdateManyWithoutCountryNestedInput = {
    create?: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput> | BrandCreateWithoutCountryInput[] | BrandUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCountryInput | BrandCreateOrConnectWithoutCountryInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutCountryInput | BrandUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: BrandCreateManyCountryInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutCountryInput | BrandUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutCountryInput | BrandUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type StoreUpdateManyWithoutCountryNestedInput = {
    create?: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput> | StoreCreateWithoutCountryInput[] | StoreUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCountryInput | StoreCreateOrConnectWithoutCountryInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutCountryInput | StoreUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: StoreCreateManyCountryInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutCountryInput | StoreUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutCountryInput | StoreUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type RegionUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<RegionCreateWithoutCountryInput, RegionUncheckedCreateWithoutCountryInput> | RegionCreateWithoutCountryInput[] | RegionUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: RegionCreateOrConnectWithoutCountryInput | RegionCreateOrConnectWithoutCountryInput[]
    upsert?: RegionUpsertWithWhereUniqueWithoutCountryInput | RegionUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: RegionCreateManyCountryInputEnvelope
    set?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
    disconnect?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
    delete?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
    connect?: RegionWhereUniqueInput | RegionWhereUniqueInput[]
    update?: RegionUpdateWithWhereUniqueWithoutCountryInput | RegionUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: RegionUpdateManyWithWhereWithoutCountryInput | RegionUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: RegionScalarWhereInput | RegionScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput> | MerchantCreateWithoutCountryInput[] | MerchantUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutCountryInput | MerchantCreateOrConnectWithoutCountryInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutCountryInput | MerchantUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: MerchantCreateManyCountryInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutCountryInput | MerchantUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutCountryInput | MerchantUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type BrandUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput> | BrandCreateWithoutCountryInput[] | BrandUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCountryInput | BrandCreateOrConnectWithoutCountryInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutCountryInput | BrandUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: BrandCreateManyCountryInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutCountryInput | BrandUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutCountryInput | BrandUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type StoreUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput> | StoreCreateWithoutCountryInput[] | StoreUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutCountryInput | StoreCreateOrConnectWithoutCountryInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutCountryInput | StoreUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: StoreCreateManyCountryInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutCountryInput | StoreUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutCountryInput | StoreUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutRegionsInput = {
    create?: XOR<CountryCreateWithoutRegionsInput, CountryUncheckedCreateWithoutRegionsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutRegionsInput
    connect?: CountryWhereUniqueInput
  }

  export type MerchantCreateNestedManyWithoutRegionInput = {
    create?: XOR<MerchantCreateWithoutRegionInput, MerchantUncheckedCreateWithoutRegionInput> | MerchantCreateWithoutRegionInput[] | MerchantUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRegionInput | MerchantCreateOrConnectWithoutRegionInput[]
    createMany?: MerchantCreateManyRegionInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type BrandCreateNestedManyWithoutRegionInput = {
    create?: XOR<BrandCreateWithoutRegionInput, BrandUncheckedCreateWithoutRegionInput> | BrandCreateWithoutRegionInput[] | BrandUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutRegionInput | BrandCreateOrConnectWithoutRegionInput[]
    createMany?: BrandCreateManyRegionInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type StoreCreateNestedManyWithoutRegionInput = {
    create?: XOR<StoreCreateWithoutRegionInput, StoreUncheckedCreateWithoutRegionInput> | StoreCreateWithoutRegionInput[] | StoreUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutRegionInput | StoreCreateOrConnectWithoutRegionInput[]
    createMany?: StoreCreateManyRegionInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type MerchantUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<MerchantCreateWithoutRegionInput, MerchantUncheckedCreateWithoutRegionInput> | MerchantCreateWithoutRegionInput[] | MerchantUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRegionInput | MerchantCreateOrConnectWithoutRegionInput[]
    createMany?: MerchantCreateManyRegionInputEnvelope
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
  }

  export type BrandUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<BrandCreateWithoutRegionInput, BrandUncheckedCreateWithoutRegionInput> | BrandCreateWithoutRegionInput[] | BrandUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutRegionInput | BrandCreateOrConnectWithoutRegionInput[]
    createMany?: BrandCreateManyRegionInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type StoreUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<StoreCreateWithoutRegionInput, StoreUncheckedCreateWithoutRegionInput> | StoreCreateWithoutRegionInput[] | StoreUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutRegionInput | StoreCreateOrConnectWithoutRegionInput[]
    createMany?: StoreCreateManyRegionInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CountryUpdateOneRequiredWithoutRegionsNestedInput = {
    create?: XOR<CountryCreateWithoutRegionsInput, CountryUncheckedCreateWithoutRegionsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutRegionsInput
    upsert?: CountryUpsertWithoutRegionsInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutRegionsInput, CountryUpdateWithoutRegionsInput>, CountryUncheckedUpdateWithoutRegionsInput>
  }

  export type MerchantUpdateManyWithoutRegionNestedInput = {
    create?: XOR<MerchantCreateWithoutRegionInput, MerchantUncheckedCreateWithoutRegionInput> | MerchantCreateWithoutRegionInput[] | MerchantUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRegionInput | MerchantCreateOrConnectWithoutRegionInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRegionInput | MerchantUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: MerchantCreateManyRegionInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRegionInput | MerchantUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRegionInput | MerchantUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type BrandUpdateManyWithoutRegionNestedInput = {
    create?: XOR<BrandCreateWithoutRegionInput, BrandUncheckedCreateWithoutRegionInput> | BrandCreateWithoutRegionInput[] | BrandUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutRegionInput | BrandCreateOrConnectWithoutRegionInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutRegionInput | BrandUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: BrandCreateManyRegionInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutRegionInput | BrandUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutRegionInput | BrandUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type StoreUpdateManyWithoutRegionNestedInput = {
    create?: XOR<StoreCreateWithoutRegionInput, StoreUncheckedCreateWithoutRegionInput> | StoreCreateWithoutRegionInput[] | StoreUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutRegionInput | StoreCreateOrConnectWithoutRegionInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutRegionInput | StoreUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: StoreCreateManyRegionInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutRegionInput | StoreUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutRegionInput | StoreUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type UserUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MerchantUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<MerchantCreateWithoutRegionInput, MerchantUncheckedCreateWithoutRegionInput> | MerchantCreateWithoutRegionInput[] | MerchantUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: MerchantCreateOrConnectWithoutRegionInput | MerchantCreateOrConnectWithoutRegionInput[]
    upsert?: MerchantUpsertWithWhereUniqueWithoutRegionInput | MerchantUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: MerchantCreateManyRegionInputEnvelope
    set?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    disconnect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    delete?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    connect?: MerchantWhereUniqueInput | MerchantWhereUniqueInput[]
    update?: MerchantUpdateWithWhereUniqueWithoutRegionInput | MerchantUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: MerchantUpdateManyWithWhereWithoutRegionInput | MerchantUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
  }

  export type BrandUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<BrandCreateWithoutRegionInput, BrandUncheckedCreateWithoutRegionInput> | BrandCreateWithoutRegionInput[] | BrandUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutRegionInput | BrandCreateOrConnectWithoutRegionInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutRegionInput | BrandUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: BrandCreateManyRegionInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutRegionInput | BrandUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutRegionInput | BrandUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type StoreUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<StoreCreateWithoutRegionInput, StoreUncheckedCreateWithoutRegionInput> | StoreCreateWithoutRegionInput[] | StoreUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutRegionInput | StoreCreateOrConnectWithoutRegionInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutRegionInput | StoreUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: StoreCreateManyRegionInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutRegionInput | StoreUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutRegionInput | StoreUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MerchantCreateNestedOneWithoutBusinessRegistrationsInput = {
    create?: XOR<MerchantCreateWithoutBusinessRegistrationsInput, MerchantUncheckedCreateWithoutBusinessRegistrationsInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutBusinessRegistrationsInput
    connect?: MerchantWhereUniqueInput
  }

  export type BrandCreateNestedOneWithoutBusinessRegistrationsInput = {
    create?: XOR<BrandCreateWithoutBusinessRegistrationsInput, BrandUncheckedCreateWithoutBusinessRegistrationsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutBusinessRegistrationsInput
    connect?: BrandWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutBusinessRegistrationsInput = {
    create?: XOR<StoreCreateWithoutBusinessRegistrationsInput, StoreUncheckedCreateWithoutBusinessRegistrationsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutBusinessRegistrationsInput
    connect?: StoreWhereUniqueInput
  }

  export type EnumBusinessRegistrationTypeFieldUpdateOperationsInput = {
    set?: $Enums.BusinessRegistrationType
  }

  export type MerchantUpdateOneWithoutBusinessRegistrationsNestedInput = {
    create?: XOR<MerchantCreateWithoutBusinessRegistrationsInput, MerchantUncheckedCreateWithoutBusinessRegistrationsInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutBusinessRegistrationsInput
    upsert?: MerchantUpsertWithoutBusinessRegistrationsInput
    disconnect?: MerchantWhereInput | boolean
    delete?: MerchantWhereInput | boolean
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutBusinessRegistrationsInput, MerchantUpdateWithoutBusinessRegistrationsInput>, MerchantUncheckedUpdateWithoutBusinessRegistrationsInput>
  }

  export type BrandUpdateOneWithoutBusinessRegistrationsNestedInput = {
    create?: XOR<BrandCreateWithoutBusinessRegistrationsInput, BrandUncheckedCreateWithoutBusinessRegistrationsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutBusinessRegistrationsInput
    upsert?: BrandUpsertWithoutBusinessRegistrationsInput
    disconnect?: BrandWhereInput | boolean
    delete?: BrandWhereInput | boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutBusinessRegistrationsInput, BrandUpdateWithoutBusinessRegistrationsInput>, BrandUncheckedUpdateWithoutBusinessRegistrationsInput>
  }

  export type StoreUpdateOneWithoutBusinessRegistrationsNestedInput = {
    create?: XOR<StoreCreateWithoutBusinessRegistrationsInput, StoreUncheckedCreateWithoutBusinessRegistrationsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutBusinessRegistrationsInput
    upsert?: StoreUpsertWithoutBusinessRegistrationsInput
    disconnect?: StoreWhereInput | boolean
    delete?: StoreWhereInput | boolean
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutBusinessRegistrationsInput, StoreUpdateWithoutBusinessRegistrationsInput>, StoreUncheckedUpdateWithoutBusinessRegistrationsInput>
  }

  export type RegionCreateNestedOneWithoutMerchantsInput = {
    create?: XOR<RegionCreateWithoutMerchantsInput, RegionUncheckedCreateWithoutMerchantsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutMerchantsInput
    connect?: RegionWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutMerchantsInput = {
    create?: XOR<CountryCreateWithoutMerchantsInput, CountryUncheckedCreateWithoutMerchantsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutMerchantsInput
    connect?: CountryWhereUniqueInput
  }

  export type BusinessRegistrationCreateNestedManyWithoutMerchantInput = {
    create?: XOR<BusinessRegistrationCreateWithoutMerchantInput, BusinessRegistrationUncheckedCreateWithoutMerchantInput> | BusinessRegistrationCreateWithoutMerchantInput[] | BusinessRegistrationUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutMerchantInput | BusinessRegistrationCreateOrConnectWithoutMerchantInput[]
    createMany?: BusinessRegistrationCreateManyMerchantInputEnvelope
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
  }

  export type BrandCreateNestedManyWithoutMerchantInput = {
    create?: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput> | BrandCreateWithoutMerchantInput[] | BrandUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutMerchantInput | BrandCreateOrConnectWithoutMerchantInput[]
    createMany?: BrandCreateManyMerchantInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type BusinessUserAccessCreateNestedManyWithoutMerchantInput = {
    create?: XOR<BusinessUserAccessCreateWithoutMerchantInput, BusinessUserAccessUncheckedCreateWithoutMerchantInput> | BusinessUserAccessCreateWithoutMerchantInput[] | BusinessUserAccessUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutMerchantInput | BusinessUserAccessCreateOrConnectWithoutMerchantInput[]
    createMany?: BusinessUserAccessCreateManyMerchantInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type BusinessRegistrationUncheckedCreateNestedManyWithoutMerchantInput = {
    create?: XOR<BusinessRegistrationCreateWithoutMerchantInput, BusinessRegistrationUncheckedCreateWithoutMerchantInput> | BusinessRegistrationCreateWithoutMerchantInput[] | BusinessRegistrationUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutMerchantInput | BusinessRegistrationCreateOrConnectWithoutMerchantInput[]
    createMany?: BusinessRegistrationCreateManyMerchantInputEnvelope
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
  }

  export type BrandUncheckedCreateNestedManyWithoutMerchantInput = {
    create?: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput> | BrandCreateWithoutMerchantInput[] | BrandUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutMerchantInput | BrandCreateOrConnectWithoutMerchantInput[]
    createMany?: BrandCreateManyMerchantInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type BusinessUserAccessUncheckedCreateNestedManyWithoutMerchantInput = {
    create?: XOR<BusinessUserAccessCreateWithoutMerchantInput, BusinessUserAccessUncheckedCreateWithoutMerchantInput> | BusinessUserAccessCreateWithoutMerchantInput[] | BusinessUserAccessUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutMerchantInput | BusinessUserAccessCreateOrConnectWithoutMerchantInput[]
    createMany?: BusinessUserAccessCreateManyMerchantInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type RegionUpdateOneWithoutMerchantsNestedInput = {
    create?: XOR<RegionCreateWithoutMerchantsInput, RegionUncheckedCreateWithoutMerchantsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutMerchantsInput
    upsert?: RegionUpsertWithoutMerchantsInput
    disconnect?: RegionWhereInput | boolean
    delete?: RegionWhereInput | boolean
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutMerchantsInput, RegionUpdateWithoutMerchantsInput>, RegionUncheckedUpdateWithoutMerchantsInput>
  }

  export type CountryUpdateOneRequiredWithoutMerchantsNestedInput = {
    create?: XOR<CountryCreateWithoutMerchantsInput, CountryUncheckedCreateWithoutMerchantsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutMerchantsInput
    upsert?: CountryUpsertWithoutMerchantsInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutMerchantsInput, CountryUpdateWithoutMerchantsInput>, CountryUncheckedUpdateWithoutMerchantsInput>
  }

  export type BusinessRegistrationUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<BusinessRegistrationCreateWithoutMerchantInput, BusinessRegistrationUncheckedCreateWithoutMerchantInput> | BusinessRegistrationCreateWithoutMerchantInput[] | BusinessRegistrationUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutMerchantInput | BusinessRegistrationCreateOrConnectWithoutMerchantInput[]
    upsert?: BusinessRegistrationUpsertWithWhereUniqueWithoutMerchantInput | BusinessRegistrationUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: BusinessRegistrationCreateManyMerchantInputEnvelope
    set?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    disconnect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    delete?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    update?: BusinessRegistrationUpdateWithWhereUniqueWithoutMerchantInput | BusinessRegistrationUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: BusinessRegistrationUpdateManyWithWhereWithoutMerchantInput | BusinessRegistrationUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: BusinessRegistrationScalarWhereInput | BusinessRegistrationScalarWhereInput[]
  }

  export type BrandUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput> | BrandCreateWithoutMerchantInput[] | BrandUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutMerchantInput | BrandCreateOrConnectWithoutMerchantInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutMerchantInput | BrandUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: BrandCreateManyMerchantInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutMerchantInput | BrandUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutMerchantInput | BrandUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type BusinessUserAccessUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutMerchantInput, BusinessUserAccessUncheckedCreateWithoutMerchantInput> | BusinessUserAccessCreateWithoutMerchantInput[] | BusinessUserAccessUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutMerchantInput | BusinessUserAccessCreateOrConnectWithoutMerchantInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutMerchantInput | BusinessUserAccessUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: BusinessUserAccessCreateManyMerchantInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutMerchantInput | BusinessUserAccessUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutMerchantInput | BusinessUserAccessUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type BusinessRegistrationUncheckedUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<BusinessRegistrationCreateWithoutMerchantInput, BusinessRegistrationUncheckedCreateWithoutMerchantInput> | BusinessRegistrationCreateWithoutMerchantInput[] | BusinessRegistrationUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutMerchantInput | BusinessRegistrationCreateOrConnectWithoutMerchantInput[]
    upsert?: BusinessRegistrationUpsertWithWhereUniqueWithoutMerchantInput | BusinessRegistrationUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: BusinessRegistrationCreateManyMerchantInputEnvelope
    set?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    disconnect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    delete?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    update?: BusinessRegistrationUpdateWithWhereUniqueWithoutMerchantInput | BusinessRegistrationUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: BusinessRegistrationUpdateManyWithWhereWithoutMerchantInput | BusinessRegistrationUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: BusinessRegistrationScalarWhereInput | BusinessRegistrationScalarWhereInput[]
  }

  export type BrandUncheckedUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput> | BrandCreateWithoutMerchantInput[] | BrandUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutMerchantInput | BrandCreateOrConnectWithoutMerchantInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutMerchantInput | BrandUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: BrandCreateManyMerchantInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutMerchantInput | BrandUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutMerchantInput | BrandUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutMerchantInput, BusinessUserAccessUncheckedCreateWithoutMerchantInput> | BusinessUserAccessCreateWithoutMerchantInput[] | BusinessUserAccessUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutMerchantInput | BusinessUserAccessCreateOrConnectWithoutMerchantInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutMerchantInput | BusinessUserAccessUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: BusinessUserAccessCreateManyMerchantInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutMerchantInput | BusinessUserAccessUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutMerchantInput | BusinessUserAccessUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type MerchantCreateNestedOneWithoutBrandsInput = {
    create?: XOR<MerchantCreateWithoutBrandsInput, MerchantUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutBrandsInput
    connect?: MerchantWhereUniqueInput
  }

  export type RegionCreateNestedOneWithoutBrandsInput = {
    create?: XOR<RegionCreateWithoutBrandsInput, RegionUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutBrandsInput
    connect?: RegionWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutBrandsInput = {
    create?: XOR<CountryCreateWithoutBrandsInput, CountryUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutBrandsInput
    connect?: CountryWhereUniqueInput
  }

  export type BusinessRegistrationCreateNestedManyWithoutBrandInput = {
    create?: XOR<BusinessRegistrationCreateWithoutBrandInput, BusinessRegistrationUncheckedCreateWithoutBrandInput> | BusinessRegistrationCreateWithoutBrandInput[] | BusinessRegistrationUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutBrandInput | BusinessRegistrationCreateOrConnectWithoutBrandInput[]
    createMany?: BusinessRegistrationCreateManyBrandInputEnvelope
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
  }

  export type StoreCreateNestedManyWithoutBrandInput = {
    create?: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput> | StoreCreateWithoutBrandInput[] | StoreUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutBrandInput | StoreCreateOrConnectWithoutBrandInput[]
    createMany?: StoreCreateManyBrandInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type BusinessUserAccessCreateNestedManyWithoutBrandInput = {
    create?: XOR<BusinessUserAccessCreateWithoutBrandInput, BusinessUserAccessUncheckedCreateWithoutBrandInput> | BusinessUserAccessCreateWithoutBrandInput[] | BusinessUserAccessUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutBrandInput | BusinessUserAccessCreateOrConnectWithoutBrandInput[]
    createMany?: BusinessUserAccessCreateManyBrandInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type BusinessRegistrationUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<BusinessRegistrationCreateWithoutBrandInput, BusinessRegistrationUncheckedCreateWithoutBrandInput> | BusinessRegistrationCreateWithoutBrandInput[] | BusinessRegistrationUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutBrandInput | BusinessRegistrationCreateOrConnectWithoutBrandInput[]
    createMany?: BusinessRegistrationCreateManyBrandInputEnvelope
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
  }

  export type StoreUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput> | StoreCreateWithoutBrandInput[] | StoreUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutBrandInput | StoreCreateOrConnectWithoutBrandInput[]
    createMany?: StoreCreateManyBrandInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type BusinessUserAccessUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<BusinessUserAccessCreateWithoutBrandInput, BusinessUserAccessUncheckedCreateWithoutBrandInput> | BusinessUserAccessCreateWithoutBrandInput[] | BusinessUserAccessUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutBrandInput | BusinessUserAccessCreateOrConnectWithoutBrandInput[]
    createMany?: BusinessUserAccessCreateManyBrandInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type MerchantUpdateOneRequiredWithoutBrandsNestedInput = {
    create?: XOR<MerchantCreateWithoutBrandsInput, MerchantUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutBrandsInput
    upsert?: MerchantUpsertWithoutBrandsInput
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutBrandsInput, MerchantUpdateWithoutBrandsInput>, MerchantUncheckedUpdateWithoutBrandsInput>
  }

  export type RegionUpdateOneWithoutBrandsNestedInput = {
    create?: XOR<RegionCreateWithoutBrandsInput, RegionUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: RegionCreateOrConnectWithoutBrandsInput
    upsert?: RegionUpsertWithoutBrandsInput
    disconnect?: RegionWhereInput | boolean
    delete?: RegionWhereInput | boolean
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutBrandsInput, RegionUpdateWithoutBrandsInput>, RegionUncheckedUpdateWithoutBrandsInput>
  }

  export type CountryUpdateOneRequiredWithoutBrandsNestedInput = {
    create?: XOR<CountryCreateWithoutBrandsInput, CountryUncheckedCreateWithoutBrandsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutBrandsInput
    upsert?: CountryUpsertWithoutBrandsInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutBrandsInput, CountryUpdateWithoutBrandsInput>, CountryUncheckedUpdateWithoutBrandsInput>
  }

  export type BusinessRegistrationUpdateManyWithoutBrandNestedInput = {
    create?: XOR<BusinessRegistrationCreateWithoutBrandInput, BusinessRegistrationUncheckedCreateWithoutBrandInput> | BusinessRegistrationCreateWithoutBrandInput[] | BusinessRegistrationUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutBrandInput | BusinessRegistrationCreateOrConnectWithoutBrandInput[]
    upsert?: BusinessRegistrationUpsertWithWhereUniqueWithoutBrandInput | BusinessRegistrationUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: BusinessRegistrationCreateManyBrandInputEnvelope
    set?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    disconnect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    delete?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    update?: BusinessRegistrationUpdateWithWhereUniqueWithoutBrandInput | BusinessRegistrationUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: BusinessRegistrationUpdateManyWithWhereWithoutBrandInput | BusinessRegistrationUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: BusinessRegistrationScalarWhereInput | BusinessRegistrationScalarWhereInput[]
  }

  export type StoreUpdateManyWithoutBrandNestedInput = {
    create?: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput> | StoreCreateWithoutBrandInput[] | StoreUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutBrandInput | StoreCreateOrConnectWithoutBrandInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutBrandInput | StoreUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: StoreCreateManyBrandInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutBrandInput | StoreUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutBrandInput | StoreUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type BusinessUserAccessUpdateManyWithoutBrandNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutBrandInput, BusinessUserAccessUncheckedCreateWithoutBrandInput> | BusinessUserAccessCreateWithoutBrandInput[] | BusinessUserAccessUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutBrandInput | BusinessUserAccessCreateOrConnectWithoutBrandInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutBrandInput | BusinessUserAccessUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: BusinessUserAccessCreateManyBrandInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutBrandInput | BusinessUserAccessUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutBrandInput | BusinessUserAccessUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type BusinessRegistrationUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<BusinessRegistrationCreateWithoutBrandInput, BusinessRegistrationUncheckedCreateWithoutBrandInput> | BusinessRegistrationCreateWithoutBrandInput[] | BusinessRegistrationUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutBrandInput | BusinessRegistrationCreateOrConnectWithoutBrandInput[]
    upsert?: BusinessRegistrationUpsertWithWhereUniqueWithoutBrandInput | BusinessRegistrationUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: BusinessRegistrationCreateManyBrandInputEnvelope
    set?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    disconnect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    delete?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    update?: BusinessRegistrationUpdateWithWhereUniqueWithoutBrandInput | BusinessRegistrationUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: BusinessRegistrationUpdateManyWithWhereWithoutBrandInput | BusinessRegistrationUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: BusinessRegistrationScalarWhereInput | BusinessRegistrationScalarWhereInput[]
  }

  export type StoreUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput> | StoreCreateWithoutBrandInput[] | StoreUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutBrandInput | StoreCreateOrConnectWithoutBrandInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutBrandInput | StoreUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: StoreCreateManyBrandInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutBrandInput | StoreUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutBrandInput | StoreUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutBrandInput, BusinessUserAccessUncheckedCreateWithoutBrandInput> | BusinessUserAccessCreateWithoutBrandInput[] | BusinessUserAccessUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutBrandInput | BusinessUserAccessCreateOrConnectWithoutBrandInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutBrandInput | BusinessUserAccessUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: BusinessUserAccessCreateManyBrandInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutBrandInput | BusinessUserAccessUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutBrandInput | BusinessUserAccessUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type BrandCreateNestedOneWithoutStoresInput = {
    create?: XOR<BrandCreateWithoutStoresInput, BrandUncheckedCreateWithoutStoresInput>
    connectOrCreate?: BrandCreateOrConnectWithoutStoresInput
    connect?: BrandWhereUniqueInput
  }

  export type RegionCreateNestedOneWithoutStoresInput = {
    create?: XOR<RegionCreateWithoutStoresInput, RegionUncheckedCreateWithoutStoresInput>
    connectOrCreate?: RegionCreateOrConnectWithoutStoresInput
    connect?: RegionWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutStoresInput = {
    create?: XOR<CountryCreateWithoutStoresInput, CountryUncheckedCreateWithoutStoresInput>
    connectOrCreate?: CountryCreateOrConnectWithoutStoresInput
    connect?: CountryWhereUniqueInput
  }

  export type CurrencyCreateNestedOneWithoutStoresInput = {
    create?: XOR<CurrencyCreateWithoutStoresInput, CurrencyUncheckedCreateWithoutStoresInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutStoresInput
    connect?: CurrencyWhereUniqueInput
  }

  export type BusinessRegistrationCreateNestedManyWithoutStoreInput = {
    create?: XOR<BusinessRegistrationCreateWithoutStoreInput, BusinessRegistrationUncheckedCreateWithoutStoreInput> | BusinessRegistrationCreateWithoutStoreInput[] | BusinessRegistrationUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutStoreInput | BusinessRegistrationCreateOrConnectWithoutStoreInput[]
    createMany?: BusinessRegistrationCreateManyStoreInputEnvelope
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
  }

  export type ReceiptCreateNestedManyWithoutStoreInput = {
    create?: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput> | ReceiptCreateWithoutStoreInput[] | ReceiptUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutStoreInput | ReceiptCreateOrConnectWithoutStoreInput[]
    createMany?: ReceiptCreateManyStoreInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type BusinessUserAccessCreateNestedManyWithoutStoreInput = {
    create?: XOR<BusinessUserAccessCreateWithoutStoreInput, BusinessUserAccessUncheckedCreateWithoutStoreInput> | BusinessUserAccessCreateWithoutStoreInput[] | BusinessUserAccessUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutStoreInput | BusinessUserAccessCreateOrConnectWithoutStoreInput[]
    createMany?: BusinessUserAccessCreateManyStoreInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type BusinessRegistrationUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<BusinessRegistrationCreateWithoutStoreInput, BusinessRegistrationUncheckedCreateWithoutStoreInput> | BusinessRegistrationCreateWithoutStoreInput[] | BusinessRegistrationUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutStoreInput | BusinessRegistrationCreateOrConnectWithoutStoreInput[]
    createMany?: BusinessRegistrationCreateManyStoreInputEnvelope
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
  }

  export type ReceiptUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput> | ReceiptCreateWithoutStoreInput[] | ReceiptUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutStoreInput | ReceiptCreateOrConnectWithoutStoreInput[]
    createMany?: ReceiptCreateManyStoreInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type BusinessUserAccessUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<BusinessUserAccessCreateWithoutStoreInput, BusinessUserAccessUncheckedCreateWithoutStoreInput> | BusinessUserAccessCreateWithoutStoreInput[] | BusinessUserAccessUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutStoreInput | BusinessUserAccessCreateOrConnectWithoutStoreInput[]
    createMany?: BusinessUserAccessCreateManyStoreInputEnvelope
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BrandUpdateOneRequiredWithoutStoresNestedInput = {
    create?: XOR<BrandCreateWithoutStoresInput, BrandUncheckedCreateWithoutStoresInput>
    connectOrCreate?: BrandCreateOrConnectWithoutStoresInput
    upsert?: BrandUpsertWithoutStoresInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutStoresInput, BrandUpdateWithoutStoresInput>, BrandUncheckedUpdateWithoutStoresInput>
  }

  export type RegionUpdateOneWithoutStoresNestedInput = {
    create?: XOR<RegionCreateWithoutStoresInput, RegionUncheckedCreateWithoutStoresInput>
    connectOrCreate?: RegionCreateOrConnectWithoutStoresInput
    upsert?: RegionUpsertWithoutStoresInput
    disconnect?: RegionWhereInput | boolean
    delete?: RegionWhereInput | boolean
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutStoresInput, RegionUpdateWithoutStoresInput>, RegionUncheckedUpdateWithoutStoresInput>
  }

  export type CountryUpdateOneRequiredWithoutStoresNestedInput = {
    create?: XOR<CountryCreateWithoutStoresInput, CountryUncheckedCreateWithoutStoresInput>
    connectOrCreate?: CountryCreateOrConnectWithoutStoresInput
    upsert?: CountryUpsertWithoutStoresInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutStoresInput, CountryUpdateWithoutStoresInput>, CountryUncheckedUpdateWithoutStoresInput>
  }

  export type CurrencyUpdateOneRequiredWithoutStoresNestedInput = {
    create?: XOR<CurrencyCreateWithoutStoresInput, CurrencyUncheckedCreateWithoutStoresInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutStoresInput
    upsert?: CurrencyUpsertWithoutStoresInput
    connect?: CurrencyWhereUniqueInput
    update?: XOR<XOR<CurrencyUpdateToOneWithWhereWithoutStoresInput, CurrencyUpdateWithoutStoresInput>, CurrencyUncheckedUpdateWithoutStoresInput>
  }

  export type BusinessRegistrationUpdateManyWithoutStoreNestedInput = {
    create?: XOR<BusinessRegistrationCreateWithoutStoreInput, BusinessRegistrationUncheckedCreateWithoutStoreInput> | BusinessRegistrationCreateWithoutStoreInput[] | BusinessRegistrationUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutStoreInput | BusinessRegistrationCreateOrConnectWithoutStoreInput[]
    upsert?: BusinessRegistrationUpsertWithWhereUniqueWithoutStoreInput | BusinessRegistrationUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: BusinessRegistrationCreateManyStoreInputEnvelope
    set?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    disconnect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    delete?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    update?: BusinessRegistrationUpdateWithWhereUniqueWithoutStoreInput | BusinessRegistrationUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: BusinessRegistrationUpdateManyWithWhereWithoutStoreInput | BusinessRegistrationUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: BusinessRegistrationScalarWhereInput | BusinessRegistrationScalarWhereInput[]
  }

  export type ReceiptUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput> | ReceiptCreateWithoutStoreInput[] | ReceiptUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutStoreInput | ReceiptCreateOrConnectWithoutStoreInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutStoreInput | ReceiptUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ReceiptCreateManyStoreInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutStoreInput | ReceiptUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutStoreInput | ReceiptUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type BusinessUserAccessUpdateManyWithoutStoreNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutStoreInput, BusinessUserAccessUncheckedCreateWithoutStoreInput> | BusinessUserAccessCreateWithoutStoreInput[] | BusinessUserAccessUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutStoreInput | BusinessUserAccessCreateOrConnectWithoutStoreInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutStoreInput | BusinessUserAccessUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: BusinessUserAccessCreateManyStoreInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutStoreInput | BusinessUserAccessUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutStoreInput | BusinessUserAccessUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type BusinessRegistrationUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<BusinessRegistrationCreateWithoutStoreInput, BusinessRegistrationUncheckedCreateWithoutStoreInput> | BusinessRegistrationCreateWithoutStoreInput[] | BusinessRegistrationUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: BusinessRegistrationCreateOrConnectWithoutStoreInput | BusinessRegistrationCreateOrConnectWithoutStoreInput[]
    upsert?: BusinessRegistrationUpsertWithWhereUniqueWithoutStoreInput | BusinessRegistrationUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: BusinessRegistrationCreateManyStoreInputEnvelope
    set?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    disconnect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    delete?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    connect?: BusinessRegistrationWhereUniqueInput | BusinessRegistrationWhereUniqueInput[]
    update?: BusinessRegistrationUpdateWithWhereUniqueWithoutStoreInput | BusinessRegistrationUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: BusinessRegistrationUpdateManyWithWhereWithoutStoreInput | BusinessRegistrationUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: BusinessRegistrationScalarWhereInput | BusinessRegistrationScalarWhereInput[]
  }

  export type ReceiptUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput> | ReceiptCreateWithoutStoreInput[] | ReceiptUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutStoreInput | ReceiptCreateOrConnectWithoutStoreInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutStoreInput | ReceiptUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ReceiptCreateManyStoreInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutStoreInput | ReceiptUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutStoreInput | ReceiptUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<BusinessUserAccessCreateWithoutStoreInput, BusinessUserAccessUncheckedCreateWithoutStoreInput> | BusinessUserAccessCreateWithoutStoreInput[] | BusinessUserAccessUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: BusinessUserAccessCreateOrConnectWithoutStoreInput | BusinessUserAccessCreateOrConnectWithoutStoreInput[]
    upsert?: BusinessUserAccessUpsertWithWhereUniqueWithoutStoreInput | BusinessUserAccessUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: BusinessUserAccessCreateManyStoreInputEnvelope
    set?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    disconnect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    delete?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    connect?: BusinessUserAccessWhereUniqueInput | BusinessUserAccessWhereUniqueInput[]
    update?: BusinessUserAccessUpdateWithWhereUniqueWithoutStoreInput | BusinessUserAccessUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: BusinessUserAccessUpdateManyWithWhereWithoutStoreInput | BusinessUserAccessUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
  }

  export type ReceiptCreateotherInformationInput = {
    set: string[]
  }

  export type ConsumerCreateNestedOneWithoutReceiptsInput = {
    create?: XOR<ConsumerCreateWithoutReceiptsInput, ConsumerUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutReceiptsInput
    connect?: ConsumerWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutReceiptsInput = {
    create?: XOR<StoreCreateWithoutReceiptsInput, StoreUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutReceiptsInput
    connect?: StoreWhereUniqueInput
  }

  export type ReceiptItemCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput> | ReceiptItemCreateWithoutReceiptInput[] | ReceiptItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptItemCreateOrConnectWithoutReceiptInput | ReceiptItemCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptItemCreateManyReceiptInputEnvelope
    connect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
  }

  export type ReceiptPaymentCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput> | ReceiptPaymentCreateWithoutReceiptInput[] | ReceiptPaymentUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptPaymentCreateOrConnectWithoutReceiptInput | ReceiptPaymentCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptPaymentCreateManyReceiptInputEnvelope
    connect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
  }

  export type ReceiptTaxCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptTaxCreateWithoutReceiptInput, ReceiptTaxUncheckedCreateWithoutReceiptInput> | ReceiptTaxCreateWithoutReceiptInput[] | ReceiptTaxUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptTaxCreateOrConnectWithoutReceiptInput | ReceiptTaxCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptTaxCreateManyReceiptInputEnvelope
    connect?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
  }

  export type ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput> | ReceiptItemCreateWithoutReceiptInput[] | ReceiptItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptItemCreateOrConnectWithoutReceiptInput | ReceiptItemCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptItemCreateManyReceiptInputEnvelope
    connect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
  }

  export type ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput> | ReceiptPaymentCreateWithoutReceiptInput[] | ReceiptPaymentUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptPaymentCreateOrConnectWithoutReceiptInput | ReceiptPaymentCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptPaymentCreateManyReceiptInputEnvelope
    connect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
  }

  export type ReceiptTaxUncheckedCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ReceiptTaxCreateWithoutReceiptInput, ReceiptTaxUncheckedCreateWithoutReceiptInput> | ReceiptTaxCreateWithoutReceiptInput[] | ReceiptTaxUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptTaxCreateOrConnectWithoutReceiptInput | ReceiptTaxCreateOrConnectWithoutReceiptInput[]
    createMany?: ReceiptTaxCreateManyReceiptInputEnvelope
    connect?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
  }

  export type ReceiptUpdateotherInformationInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ConsumerUpdateOneRequiredWithoutReceiptsNestedInput = {
    create?: XOR<ConsumerCreateWithoutReceiptsInput, ConsumerUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: ConsumerCreateOrConnectWithoutReceiptsInput
    upsert?: ConsumerUpsertWithoutReceiptsInput
    connect?: ConsumerWhereUniqueInput
    update?: XOR<XOR<ConsumerUpdateToOneWithWhereWithoutReceiptsInput, ConsumerUpdateWithoutReceiptsInput>, ConsumerUncheckedUpdateWithoutReceiptsInput>
  }

  export type StoreUpdateOneRequiredWithoutReceiptsNestedInput = {
    create?: XOR<StoreCreateWithoutReceiptsInput, StoreUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutReceiptsInput
    upsert?: StoreUpsertWithoutReceiptsInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutReceiptsInput, StoreUpdateWithoutReceiptsInput>, StoreUncheckedUpdateWithoutReceiptsInput>
  }

  export type ReceiptItemUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput> | ReceiptItemCreateWithoutReceiptInput[] | ReceiptItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptItemCreateOrConnectWithoutReceiptInput | ReceiptItemCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput | ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptItemCreateManyReceiptInputEnvelope
    set?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    disconnect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    delete?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    connect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    update?: ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput | ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptItemUpdateManyWithWhereWithoutReceiptInput | ReceiptItemUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptItemScalarWhereInput | ReceiptItemScalarWhereInput[]
  }

  export type ReceiptPaymentUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput> | ReceiptPaymentCreateWithoutReceiptInput[] | ReceiptPaymentUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptPaymentCreateOrConnectWithoutReceiptInput | ReceiptPaymentCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput | ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptPaymentCreateManyReceiptInputEnvelope
    set?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    disconnect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    delete?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    connect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    update?: ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput | ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput | ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptPaymentScalarWhereInput | ReceiptPaymentScalarWhereInput[]
  }

  export type ReceiptTaxUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptTaxCreateWithoutReceiptInput, ReceiptTaxUncheckedCreateWithoutReceiptInput> | ReceiptTaxCreateWithoutReceiptInput[] | ReceiptTaxUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptTaxCreateOrConnectWithoutReceiptInput | ReceiptTaxCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptTaxUpsertWithWhereUniqueWithoutReceiptInput | ReceiptTaxUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptTaxCreateManyReceiptInputEnvelope
    set?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
    disconnect?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
    delete?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
    connect?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
    update?: ReceiptTaxUpdateWithWhereUniqueWithoutReceiptInput | ReceiptTaxUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptTaxUpdateManyWithWhereWithoutReceiptInput | ReceiptTaxUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptTaxScalarWhereInput | ReceiptTaxScalarWhereInput[]
  }

  export type ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput> | ReceiptItemCreateWithoutReceiptInput[] | ReceiptItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptItemCreateOrConnectWithoutReceiptInput | ReceiptItemCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput | ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptItemCreateManyReceiptInputEnvelope
    set?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    disconnect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    delete?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    connect?: ReceiptItemWhereUniqueInput | ReceiptItemWhereUniqueInput[]
    update?: ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput | ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptItemUpdateManyWithWhereWithoutReceiptInput | ReceiptItemUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptItemScalarWhereInput | ReceiptItemScalarWhereInput[]
  }

  export type ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput> | ReceiptPaymentCreateWithoutReceiptInput[] | ReceiptPaymentUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptPaymentCreateOrConnectWithoutReceiptInput | ReceiptPaymentCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput | ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptPaymentCreateManyReceiptInputEnvelope
    set?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    disconnect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    delete?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    connect?: ReceiptPaymentWhereUniqueInput | ReceiptPaymentWhereUniqueInput[]
    update?: ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput | ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput | ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptPaymentScalarWhereInput | ReceiptPaymentScalarWhereInput[]
  }

  export type ReceiptTaxUncheckedUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ReceiptTaxCreateWithoutReceiptInput, ReceiptTaxUncheckedCreateWithoutReceiptInput> | ReceiptTaxCreateWithoutReceiptInput[] | ReceiptTaxUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ReceiptTaxCreateOrConnectWithoutReceiptInput | ReceiptTaxCreateOrConnectWithoutReceiptInput[]
    upsert?: ReceiptTaxUpsertWithWhereUniqueWithoutReceiptInput | ReceiptTaxUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ReceiptTaxCreateManyReceiptInputEnvelope
    set?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
    disconnect?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
    delete?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
    connect?: ReceiptTaxWhereUniqueInput | ReceiptTaxWhereUniqueInput[]
    update?: ReceiptTaxUpdateWithWhereUniqueWithoutReceiptInput | ReceiptTaxUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ReceiptTaxUpdateManyWithWhereWithoutReceiptInput | ReceiptTaxUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ReceiptTaxScalarWhereInput | ReceiptTaxScalarWhereInput[]
  }

  export type ReceiptCreateNestedOneWithoutReceiptTaxesInput = {
    create?: XOR<ReceiptCreateWithoutReceiptTaxesInput, ReceiptUncheckedCreateWithoutReceiptTaxesInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptTaxesInput
    connect?: ReceiptWhereUniqueInput
  }

  export type EnumTaxTypeFieldUpdateOperationsInput = {
    set?: $Enums.TaxType
  }

  export type ReceiptUpdateOneRequiredWithoutReceiptTaxesNestedInput = {
    create?: XOR<ReceiptCreateWithoutReceiptTaxesInput, ReceiptUncheckedCreateWithoutReceiptTaxesInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptTaxesInput
    upsert?: ReceiptUpsertWithoutReceiptTaxesInput
    connect?: ReceiptWhereUniqueInput
    update?: XOR<XOR<ReceiptUpdateToOneWithWhereWithoutReceiptTaxesInput, ReceiptUpdateWithoutReceiptTaxesInput>, ReceiptUncheckedUpdateWithoutReceiptTaxesInput>
  }

  export type ReceiptCreateNestedOneWithoutReceiptPaymentsInput = {
    create?: XOR<ReceiptCreateWithoutReceiptPaymentsInput, ReceiptUncheckedCreateWithoutReceiptPaymentsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptPaymentsInput
    connect?: ReceiptWhereUniqueInput
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type ReceiptUpdateOneRequiredWithoutReceiptPaymentsNestedInput = {
    create?: XOR<ReceiptCreateWithoutReceiptPaymentsInput, ReceiptUncheckedCreateWithoutReceiptPaymentsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptPaymentsInput
    upsert?: ReceiptUpsertWithoutReceiptPaymentsInput
    connect?: ReceiptWhereUniqueInput
    update?: XOR<XOR<ReceiptUpdateToOneWithWhereWithoutReceiptPaymentsInput, ReceiptUpdateWithoutReceiptPaymentsInput>, ReceiptUncheckedUpdateWithoutReceiptPaymentsInput>
  }

  export type ReceiptCreateNestedOneWithoutReceiptItemsInput = {
    create?: XOR<ReceiptCreateWithoutReceiptItemsInput, ReceiptUncheckedCreateWithoutReceiptItemsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptItemsInput
    connect?: ReceiptWhereUniqueInput
  }

  export type ReceiptUpdateOneRequiredWithoutReceiptItemsNestedInput = {
    create?: XOR<ReceiptCreateWithoutReceiptItemsInput, ReceiptUncheckedCreateWithoutReceiptItemsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutReceiptItemsInput
    upsert?: ReceiptUpsertWithoutReceiptItemsInput
    connect?: ReceiptWhereUniqueInput
    update?: XOR<XOR<ReceiptUpdateToOneWithWhereWithoutReceiptItemsInput, ReceiptUpdateWithoutReceiptItemsInput>, ReceiptUncheckedUpdateWithoutReceiptItemsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type EnumImageTypeFieldUpdateOperationsInput = {
    set?: $Enums.ImageType
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedEnumAccessLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelFilter<$PrismaModel> | $Enums.AccessLevel
  }

  export type NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel> | $Enums.AccessLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccessLevelFilter<$PrismaModel>
    _max?: NestedEnumAccessLevelFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumBusinessRegistrationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessRegistrationType | EnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessRegistrationType[] | ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessRegistrationType[] | ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessRegistrationTypeFilter<$PrismaModel> | $Enums.BusinessRegistrationType
  }

  export type NestedEnumBusinessRegistrationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessRegistrationType | EnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessRegistrationType[] | ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessRegistrationType[] | ListEnumBusinessRegistrationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessRegistrationTypeWithAggregatesFilter<$PrismaModel> | $Enums.BusinessRegistrationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessRegistrationTypeFilter<$PrismaModel>
    _max?: NestedEnumBusinessRegistrationTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumTaxTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TaxType | EnumTaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaxTypeFilter<$PrismaModel> | $Enums.TaxType
  }

  export type NestedEnumTaxTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaxType | EnumTaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaxType[] | ListEnumTaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTaxTypeWithAggregatesFilter<$PrismaModel> | $Enums.TaxType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaxTypeFilter<$PrismaModel>
    _max?: NestedEnumTaxTypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumImageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ImageType | EnumImageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ImageType[] | ListEnumImageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ImageType[] | ListEnumImageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumImageTypeFilter<$PrismaModel> | $Enums.ImageType
  }

  export type NestedEnumImageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ImageType | EnumImageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ImageType[] | ListEnumImageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ImageType[] | ListEnumImageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumImageTypeWithAggregatesFilter<$PrismaModel> | $Enums.ImageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImageTypeFilter<$PrismaModel>
    _max?: NestedEnumImageTypeFilter<$PrismaModel>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    expiresAt: Date | string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    expiresAt: Date | string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RegionCreateWithoutUsersInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutRegionsInput
    merchants?: MerchantCreateNestedManyWithoutRegionInput
    brands?: BrandCreateNestedManyWithoutRegionInput
    stores?: StoreCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutUsersInput = {
    id?: string
    code: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutRegionInput
    brands?: BrandUncheckedCreateNestedManyWithoutRegionInput
    stores?: StoreUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutUsersInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
  }

  export type ConsumerCreateWithoutUserInput = {
    id?: string
    barcode: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: ReceiptCreateNestedManyWithoutConsumerInput
  }

  export type ConsumerUncheckedCreateWithoutUserInput = {
    id?: string
    barcode: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: ReceiptUncheckedCreateNestedManyWithoutConsumerInput
  }

  export type ConsumerCreateOrConnectWithoutUserInput = {
    where: ConsumerWhereUniqueInput
    create: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
  }

  export type BusinessUserAccessCreateWithoutUserInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant?: MerchantCreateNestedOneWithoutUserAccessInput
    brand?: BrandCreateNestedOneWithoutUserAccessInput
    store?: StoreCreateNestedOneWithoutUserAccessInput
    createdBy?: UserCreateNestedOneWithoutCreatedAccessRecordsInput
  }

  export type BusinessUserAccessUncheckedCreateWithoutUserInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    brandId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessUserAccessCreateOrConnectWithoutUserInput = {
    where: BusinessUserAccessWhereUniqueInput
    create: XOR<BusinessUserAccessCreateWithoutUserInput, BusinessUserAccessUncheckedCreateWithoutUserInput>
  }

  export type BusinessUserAccessCreateManyUserInputEnvelope = {
    data: BusinessUserAccessCreateManyUserInput | BusinessUserAccessCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedUsersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedUsersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
  }

  export type UserCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput>
  }

  export type UserCreateManyCreatedByInputEnvelope = {
    data: UserCreateManyCreatedByInput | UserCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type BusinessUserAccessCreateWithoutCreatedByInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBusinessAccessInput
    merchant?: MerchantCreateNestedOneWithoutUserAccessInput
    brand?: BrandCreateNestedOneWithoutUserAccessInput
    store?: StoreCreateNestedOneWithoutUserAccessInput
  }

  export type BusinessUserAccessUncheckedCreateWithoutCreatedByInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    brandId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessUserAccessCreateOrConnectWithoutCreatedByInput = {
    where: BusinessUserAccessWhereUniqueInput
    create: XOR<BusinessUserAccessCreateWithoutCreatedByInput, BusinessUserAccessUncheckedCreateWithoutCreatedByInput>
  }

  export type BusinessUserAccessCreateManyCreatedByInputEnvelope = {
    data: BusinessUserAccessCreateManyCreatedByInput | BusinessUserAccessCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type EmailChangeRecordCreateWithoutUserInput = {
    id?: string
    email: string
    newEmail: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
  }

  export type EmailChangeRecordUncheckedCreateWithoutUserInput = {
    id?: string
    email: string
    newEmail: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
  }

  export type EmailChangeRecordCreateOrConnectWithoutUserInput = {
    where: EmailChangeRecordWhereUniqueInput
    create: XOR<EmailChangeRecordCreateWithoutUserInput, EmailChangeRecordUncheckedCreateWithoutUserInput>
  }

  export type EmailChangeRecordCreateManyUserInputEnvelope = {
    data: EmailChangeRecordCreateManyUserInput | EmailChangeRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PhoneChangeRecordCreateWithoutUserInput = {
    id?: string
    phoneNumber?: string | null
    newPhoneNumber: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
  }

  export type PhoneChangeRecordUncheckedCreateWithoutUserInput = {
    id?: string
    phoneNumber?: string | null
    newPhoneNumber: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
  }

  export type PhoneChangeRecordCreateOrConnectWithoutUserInput = {
    where: PhoneChangeRecordWhereUniqueInput
    create: XOR<PhoneChangeRecordCreateWithoutUserInput, PhoneChangeRecordUncheckedCreateWithoutUserInput>
  }

  export type PhoneChangeRecordCreateManyUserInputEnvelope = {
    data: PhoneChangeRecordCreateManyUserInput | PhoneChangeRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    action: string
    category: string
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: number
    action: string
    category: string
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    userId?: StringFilter<"Account"> | string
  }

  export type RegionUpsertWithoutUsersInput = {
    update: XOR<RegionUpdateWithoutUsersInput, RegionUncheckedUpdateWithoutUsersInput>
    create: XOR<RegionCreateWithoutUsersInput, RegionUncheckedCreateWithoutUsersInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutUsersInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutUsersInput, RegionUncheckedUpdateWithoutUsersInput>
  }

  export type RegionUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutRegionsNestedInput
    merchants?: MerchantUpdateManyWithoutRegionNestedInput
    brands?: BrandUpdateManyWithoutRegionNestedInput
    stores?: StoreUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutRegionNestedInput
    brands?: BrandUncheckedUpdateManyWithoutRegionNestedInput
    stores?: StoreUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type ConsumerUpsertWithoutUserInput = {
    update: XOR<ConsumerUpdateWithoutUserInput, ConsumerUncheckedUpdateWithoutUserInput>
    create: XOR<ConsumerCreateWithoutUserInput, ConsumerUncheckedCreateWithoutUserInput>
    where?: ConsumerWhereInput
  }

  export type ConsumerUpdateToOneWithWhereWithoutUserInput = {
    where?: ConsumerWhereInput
    data: XOR<ConsumerUpdateWithoutUserInput, ConsumerUncheckedUpdateWithoutUserInput>
  }

  export type ConsumerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptUpdateManyWithoutConsumerNestedInput
  }

  export type ConsumerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptUncheckedUpdateManyWithoutConsumerNestedInput
  }

  export type BusinessUserAccessUpsertWithWhereUniqueWithoutUserInput = {
    where: BusinessUserAccessWhereUniqueInput
    update: XOR<BusinessUserAccessUpdateWithoutUserInput, BusinessUserAccessUncheckedUpdateWithoutUserInput>
    create: XOR<BusinessUserAccessCreateWithoutUserInput, BusinessUserAccessUncheckedCreateWithoutUserInput>
  }

  export type BusinessUserAccessUpdateWithWhereUniqueWithoutUserInput = {
    where: BusinessUserAccessWhereUniqueInput
    data: XOR<BusinessUserAccessUpdateWithoutUserInput, BusinessUserAccessUncheckedUpdateWithoutUserInput>
  }

  export type BusinessUserAccessUpdateManyWithWhereWithoutUserInput = {
    where: BusinessUserAccessScalarWhereInput
    data: XOR<BusinessUserAccessUpdateManyMutationInput, BusinessUserAccessUncheckedUpdateManyWithoutUserInput>
  }

  export type BusinessUserAccessScalarWhereInput = {
    AND?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
    OR?: BusinessUserAccessScalarWhereInput[]
    NOT?: BusinessUserAccessScalarWhereInput | BusinessUserAccessScalarWhereInput[]
    id?: StringFilter<"BusinessUserAccess"> | string
    userId?: StringFilter<"BusinessUserAccess"> | string
    accessLevel?: EnumAccessLevelFilter<"BusinessUserAccess"> | $Enums.AccessLevel
    permissions?: EnumPermissionNullableListFilter<"BusinessUserAccess">
    jobTitle?: StringNullableFilter<"BusinessUserAccess"> | string | null
    merchantId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    brandId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    storeId?: StringNullableFilter<"BusinessUserAccess"> | string | null
    isActive?: BoolFilter<"BusinessUserAccess"> | boolean
    createdAt?: DateTimeFilter<"BusinessUserAccess"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessUserAccess"> | Date | string
    createdById?: StringNullableFilter<"BusinessUserAccess"> | string | null
  }

  export type UserUpsertWithoutCreatedUsersInput = {
    update: XOR<UserUpdateWithoutCreatedUsersInput, UserUncheckedUpdateWithoutCreatedUsersInput>
    create: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedUsersInput, UserUncheckedUpdateWithoutCreatedUsersInput>
  }

  export type UserUpdateWithoutCreatedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCreatedByInput, UserUncheckedUpdateWithoutCreatedByInput>
    create: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCreatedByInput, UserUncheckedUpdateWithoutCreatedByInput>
  }

  export type UserUpdateManyWithWhereWithoutCreatedByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    name?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    postalCode?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    regionId?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    phoneVerified?: BoolFilter<"User"> | boolean
    timezone?: StringNullableFilter<"User"> | string | null
    locale?: StringNullableFilter<"User"> | string | null
    status?: EnumStatusFilter<"User"> | $Enums.Status
    createdById?: StringNullableFilter<"User"> | string | null
  }

  export type BusinessUserAccessUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: BusinessUserAccessWhereUniqueInput
    update: XOR<BusinessUserAccessUpdateWithoutCreatedByInput, BusinessUserAccessUncheckedUpdateWithoutCreatedByInput>
    create: XOR<BusinessUserAccessCreateWithoutCreatedByInput, BusinessUserAccessUncheckedCreateWithoutCreatedByInput>
  }

  export type BusinessUserAccessUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: BusinessUserAccessWhereUniqueInput
    data: XOR<BusinessUserAccessUpdateWithoutCreatedByInput, BusinessUserAccessUncheckedUpdateWithoutCreatedByInput>
  }

  export type BusinessUserAccessUpdateManyWithWhereWithoutCreatedByInput = {
    where: BusinessUserAccessScalarWhereInput
    data: XOR<BusinessUserAccessUpdateManyMutationInput, BusinessUserAccessUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type EmailChangeRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: EmailChangeRecordWhereUniqueInput
    update: XOR<EmailChangeRecordUpdateWithoutUserInput, EmailChangeRecordUncheckedUpdateWithoutUserInput>
    create: XOR<EmailChangeRecordCreateWithoutUserInput, EmailChangeRecordUncheckedCreateWithoutUserInput>
  }

  export type EmailChangeRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: EmailChangeRecordWhereUniqueInput
    data: XOR<EmailChangeRecordUpdateWithoutUserInput, EmailChangeRecordUncheckedUpdateWithoutUserInput>
  }

  export type EmailChangeRecordUpdateManyWithWhereWithoutUserInput = {
    where: EmailChangeRecordScalarWhereInput
    data: XOR<EmailChangeRecordUpdateManyMutationInput, EmailChangeRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type EmailChangeRecordScalarWhereInput = {
    AND?: EmailChangeRecordScalarWhereInput | EmailChangeRecordScalarWhereInput[]
    OR?: EmailChangeRecordScalarWhereInput[]
    NOT?: EmailChangeRecordScalarWhereInput | EmailChangeRecordScalarWhereInput[]
    id?: StringFilter<"EmailChangeRecord"> | string
    email?: StringFilter<"EmailChangeRecord"> | string
    newEmail?: StringFilter<"EmailChangeRecord"> | string
    otp?: StringFilter<"EmailChangeRecord"> | string
    expiresAt?: DateTimeFilter<"EmailChangeRecord"> | Date | string
    attempts?: IntFilter<"EmailChangeRecord"> | number
    createdAt?: DateTimeFilter<"EmailChangeRecord"> | Date | string
    userId?: StringFilter<"EmailChangeRecord"> | string
  }

  export type PhoneChangeRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: PhoneChangeRecordWhereUniqueInput
    update: XOR<PhoneChangeRecordUpdateWithoutUserInput, PhoneChangeRecordUncheckedUpdateWithoutUserInput>
    create: XOR<PhoneChangeRecordCreateWithoutUserInput, PhoneChangeRecordUncheckedCreateWithoutUserInput>
  }

  export type PhoneChangeRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: PhoneChangeRecordWhereUniqueInput
    data: XOR<PhoneChangeRecordUpdateWithoutUserInput, PhoneChangeRecordUncheckedUpdateWithoutUserInput>
  }

  export type PhoneChangeRecordUpdateManyWithWhereWithoutUserInput = {
    where: PhoneChangeRecordScalarWhereInput
    data: XOR<PhoneChangeRecordUpdateManyMutationInput, PhoneChangeRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type PhoneChangeRecordScalarWhereInput = {
    AND?: PhoneChangeRecordScalarWhereInput | PhoneChangeRecordScalarWhereInput[]
    OR?: PhoneChangeRecordScalarWhereInput[]
    NOT?: PhoneChangeRecordScalarWhereInput | PhoneChangeRecordScalarWhereInput[]
    id?: StringFilter<"PhoneChangeRecord"> | string
    phoneNumber?: StringNullableFilter<"PhoneChangeRecord"> | string | null
    newPhoneNumber?: StringFilter<"PhoneChangeRecord"> | string
    otp?: StringFilter<"PhoneChangeRecord"> | string
    expiresAt?: DateTimeFilter<"PhoneChangeRecord"> | Date | string
    attempts?: IntFilter<"PhoneChangeRecord"> | number
    createdAt?: DateTimeFilter<"PhoneChangeRecord"> | Date | string
    userId?: StringFilter<"PhoneChangeRecord"> | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    category?: StringFilter<"AuditLog"> | string
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonFilter<"AuditLog">
    sessionId?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutEmailChangeRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmailChangeRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmailChangeRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmailChangeRecordsInput, UserUncheckedCreateWithoutEmailChangeRecordsInput>
  }

  export type UserUpsertWithoutEmailChangeRecordsInput = {
    update: XOR<UserUpdateWithoutEmailChangeRecordsInput, UserUncheckedUpdateWithoutEmailChangeRecordsInput>
    create: XOR<UserCreateWithoutEmailChangeRecordsInput, UserUncheckedCreateWithoutEmailChangeRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmailChangeRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmailChangeRecordsInput, UserUncheckedUpdateWithoutEmailChangeRecordsInput>
  }

  export type UserUpdateWithoutEmailChangeRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmailChangeRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPhoneChangeRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPhoneChangeRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPhoneChangeRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPhoneChangeRecordsInput, UserUncheckedCreateWithoutPhoneChangeRecordsInput>
  }

  export type UserUpsertWithoutPhoneChangeRecordsInput = {
    update: XOR<UserUpdateWithoutPhoneChangeRecordsInput, UserUncheckedUpdateWithoutPhoneChangeRecordsInput>
    create: XOR<UserCreateWithoutPhoneChangeRecordsInput, UserUncheckedCreateWithoutPhoneChangeRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPhoneChangeRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPhoneChangeRecordsInput, UserUncheckedUpdateWithoutPhoneChangeRecordsInput>
  }

  export type UserUpdateWithoutPhoneChangeRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPhoneChangeRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutConsumerProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConsumerProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConsumerProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConsumerProfileInput, UserUncheckedCreateWithoutConsumerProfileInput>
  }

  export type ReceiptCreateWithoutConsumerInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutConsumerInput = {
    id?: string
    receiptNumber: string
    storeId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutConsumerInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput>
  }

  export type ReceiptCreateManyConsumerInputEnvelope = {
    data: ReceiptCreateManyConsumerInput | ReceiptCreateManyConsumerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutConsumerProfileInput = {
    update: XOR<UserUpdateWithoutConsumerProfileInput, UserUncheckedUpdateWithoutConsumerProfileInput>
    create: XOR<UserCreateWithoutConsumerProfileInput, UserUncheckedCreateWithoutConsumerProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConsumerProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConsumerProfileInput, UserUncheckedUpdateWithoutConsumerProfileInput>
  }

  export type UserUpdateWithoutConsumerProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConsumerProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReceiptUpsertWithWhereUniqueWithoutConsumerInput = {
    where: ReceiptWhereUniqueInput
    update: XOR<ReceiptUpdateWithoutConsumerInput, ReceiptUncheckedUpdateWithoutConsumerInput>
    create: XOR<ReceiptCreateWithoutConsumerInput, ReceiptUncheckedCreateWithoutConsumerInput>
  }

  export type ReceiptUpdateWithWhereUniqueWithoutConsumerInput = {
    where: ReceiptWhereUniqueInput
    data: XOR<ReceiptUpdateWithoutConsumerInput, ReceiptUncheckedUpdateWithoutConsumerInput>
  }

  export type ReceiptUpdateManyWithWhereWithoutConsumerInput = {
    where: ReceiptScalarWhereInput
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyWithoutConsumerInput>
  }

  export type ReceiptScalarWhereInput = {
    AND?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
    OR?: ReceiptScalarWhereInput[]
    NOT?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
    id?: StringFilter<"Receipt"> | string
    receiptNumber?: StringFilter<"Receipt"> | string
    consumerId?: StringFilter<"Receipt"> | string
    storeId?: StringFilter<"Receipt"> | string
    subTotal?: FloatFilter<"Receipt"> | number
    totalTax?: FloatFilter<"Receipt"> | number
    cardSurcharge?: FloatNullableFilter<"Receipt"> | number | null
    discount?: FloatNullableFilter<"Receipt"> | number | null
    tip?: FloatNullableFilter<"Receipt"> | number | null
    roundingAdjustment?: FloatNullableFilter<"Receipt"> | number | null
    finalTotal?: FloatFilter<"Receipt"> | number
    otherInformation?: StringNullableListFilter<"Receipt">
    receiptDateTime?: DateTimeFilter<"Receipt"> | Date | string
    timezone?: StringNullableFilter<"Receipt"> | string | null
    createdAt?: DateTimeFilter<"Receipt"> | Date | string
    updatedAt?: DateTimeFilter<"Receipt"> | Date | string
  }

  export type UserCreateWithoutBusinessAccessInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBusinessAccessInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBusinessAccessInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBusinessAccessInput, UserUncheckedCreateWithoutBusinessAccessInput>
  }

  export type MerchantCreateWithoutUserAccessInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutMerchantsInput
    country: CountryCreateNestedOneWithoutMerchantsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutMerchantInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutUserAccessInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutMerchantInput
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutUserAccessInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutUserAccessInput, MerchantUncheckedCreateWithoutUserAccessInput>
  }

  export type BrandCreateWithoutUserAccessInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    region?: RegionCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutUserAccessInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutBrandInput
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutUserAccessInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutUserAccessInput, BrandUncheckedCreateWithoutUserAccessInput>
  }

  export type StoreCreateWithoutUserAccessInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    region?: RegionCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoresInput
    currency: CurrencyCreateNestedOneWithoutStoresInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutUserAccessInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutStoreInput
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutUserAccessInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutUserAccessInput, StoreUncheckedCreateWithoutUserAccessInput>
  }

  export type UserCreateWithoutCreatedAccessRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedAccessRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedAccessRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAccessRecordsInput, UserUncheckedCreateWithoutCreatedAccessRecordsInput>
  }

  export type UserUpsertWithoutBusinessAccessInput = {
    update: XOR<UserUpdateWithoutBusinessAccessInput, UserUncheckedUpdateWithoutBusinessAccessInput>
    create: XOR<UserCreateWithoutBusinessAccessInput, UserUncheckedCreateWithoutBusinessAccessInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBusinessAccessInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBusinessAccessInput, UserUncheckedUpdateWithoutBusinessAccessInput>
  }

  export type UserUpdateWithoutBusinessAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBusinessAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MerchantUpsertWithoutUserAccessInput = {
    update: XOR<MerchantUpdateWithoutUserAccessInput, MerchantUncheckedUpdateWithoutUserAccessInput>
    create: XOR<MerchantCreateWithoutUserAccessInput, MerchantUncheckedCreateWithoutUserAccessInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutUserAccessInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutUserAccessInput, MerchantUncheckedUpdateWithoutUserAccessInput>
  }

  export type MerchantUpdateWithoutUserAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutMerchantsNestedInput
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutMerchantNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutUserAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutMerchantNestedInput
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type BrandUpsertWithoutUserAccessInput = {
    update: XOR<BrandUpdateWithoutUserAccessInput, BrandUncheckedUpdateWithoutUserAccessInput>
    create: XOR<BrandCreateWithoutUserAccessInput, BrandUncheckedCreateWithoutUserAccessInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutUserAccessInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutUserAccessInput, BrandUncheckedUpdateWithoutUserAccessInput>
  }

  export type BrandUpdateWithoutUserAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    region?: RegionUpdateOneWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutUserAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutBrandNestedInput
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type StoreUpsertWithoutUserAccessInput = {
    update: XOR<StoreUpdateWithoutUserAccessInput, StoreUncheckedUpdateWithoutUserAccessInput>
    create: XOR<StoreCreateWithoutUserAccessInput, StoreUncheckedCreateWithoutUserAccessInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutUserAccessInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutUserAccessInput, StoreUncheckedUpdateWithoutUserAccessInput>
  }

  export type StoreUpdateWithoutUserAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    region?: RegionUpdateOneWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoresNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoresNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutUserAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type UserUpsertWithoutCreatedAccessRecordsInput = {
    update: XOR<UserUpdateWithoutCreatedAccessRecordsInput, UserUncheckedUpdateWithoutCreatedAccessRecordsInput>
    create: XOR<UserCreateWithoutCreatedAccessRecordsInput, UserUncheckedCreateWithoutCreatedAccessRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAccessRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAccessRecordsInput, UserUncheckedUpdateWithoutCreatedAccessRecordsInput>
  }

  export type UserUpdateWithoutCreatedAccessRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAccessRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CountryCreateWithoutCurrencyInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    continent: ContinentCreateNestedOneWithoutCountriesInput
    regions?: RegionCreateNestedManyWithoutCountryInput
    merchants?: MerchantCreateNestedManyWithoutCountryInput
    brands?: BrandCreateNestedManyWithoutCountryInput
    stores?: StoreCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutCurrencyInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    continentId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    regions?: RegionUncheckedCreateNestedManyWithoutCountryInput
    merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    brands?: BrandUncheckedCreateNestedManyWithoutCountryInput
    stores?: StoreUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutCurrencyInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutCurrencyInput, CountryUncheckedCreateWithoutCurrencyInput>
  }

  export type CountryCreateManyCurrencyInputEnvelope = {
    data: CountryCreateManyCurrencyInput | CountryCreateManyCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type StoreCreateWithoutCurrencyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    region?: RegionCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoresInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutCurrencyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutStoreInput
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutCurrencyInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput>
  }

  export type StoreCreateManyCurrencyInputEnvelope = {
    data: StoreCreateManyCurrencyInput | StoreCreateManyCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: CountryWhereUniqueInput
    update: XOR<CountryUpdateWithoutCurrencyInput, CountryUncheckedUpdateWithoutCurrencyInput>
    create: XOR<CountryCreateWithoutCurrencyInput, CountryUncheckedCreateWithoutCurrencyInput>
  }

  export type CountryUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: CountryWhereUniqueInput
    data: XOR<CountryUpdateWithoutCurrencyInput, CountryUncheckedUpdateWithoutCurrencyInput>
  }

  export type CountryUpdateManyWithWhereWithoutCurrencyInput = {
    where: CountryScalarWhereInput
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyWithoutCurrencyInput>
  }

  export type CountryScalarWhereInput = {
    AND?: CountryScalarWhereInput | CountryScalarWhereInput[]
    OR?: CountryScalarWhereInput[]
    NOT?: CountryScalarWhereInput | CountryScalarWhereInput[]
    id?: StringFilter<"Country"> | string
    isoCode?: StringFilter<"Country"> | string
    isoCode3?: StringFilter<"Country"> | string
    name?: StringFilter<"Country"> | string
    flag?: StringFilter<"Country"> | string
    latitude?: FloatFilter<"Country"> | number
    longitude?: FloatFilter<"Country"> | number
    currencyId?: StringFilter<"Country"> | string
    continentId?: StringFilter<"Country"> | string
    phonePrefix?: StringNullableFilter<"Country"> | string | null
    createdAt?: DateTimeFilter<"Country"> | Date | string
    updatedAt?: DateTimeFilter<"Country"> | Date | string
  }

  export type StoreUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: StoreWhereUniqueInput
    update: XOR<StoreUpdateWithoutCurrencyInput, StoreUncheckedUpdateWithoutCurrencyInput>
    create: XOR<StoreCreateWithoutCurrencyInput, StoreUncheckedCreateWithoutCurrencyInput>
  }

  export type StoreUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: StoreWhereUniqueInput
    data: XOR<StoreUpdateWithoutCurrencyInput, StoreUncheckedUpdateWithoutCurrencyInput>
  }

  export type StoreUpdateManyWithWhereWithoutCurrencyInput = {
    where: StoreScalarWhereInput
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyWithoutCurrencyInput>
  }

  export type StoreScalarWhereInput = {
    AND?: StoreScalarWhereInput | StoreScalarWhereInput[]
    OR?: StoreScalarWhereInput[]
    NOT?: StoreScalarWhereInput | StoreScalarWhereInput[]
    id?: StringFilter<"Store"> | string
    name?: StringFilter<"Store"> | string
    slug?: StringFilter<"Store"> | string
    status?: EnumStatusFilter<"Store"> | $Enums.Status
    brandId?: StringFilter<"Store"> | string
    addressLine1?: StringFilter<"Store"> | string
    addressLine2?: StringNullableFilter<"Store"> | string | null
    addressLine3?: StringNullableFilter<"Store"> | string | null
    city?: StringFilter<"Store"> | string
    regionId?: StringNullableFilter<"Store"> | string | null
    postalCode?: StringFilter<"Store"> | string
    countryId?: StringFilter<"Store"> | string
    formattedAddress?: StringNullableFilter<"Store"> | string | null
    latitude?: FloatNullableFilter<"Store"> | number | null
    longitude?: FloatNullableFilter<"Store"> | number | null
    phoneNumber?: StringNullableFilter<"Store"> | string | null
    timezone?: StringNullableFilter<"Store"> | string | null
    currencyId?: StringFilter<"Store"> | string
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
  }

  export type CountryCreateWithoutContinentInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currency: CurrencyCreateNestedOneWithoutCountriesInput
    regions?: RegionCreateNestedManyWithoutCountryInput
    merchants?: MerchantCreateNestedManyWithoutCountryInput
    brands?: BrandCreateNestedManyWithoutCountryInput
    stores?: StoreCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutContinentInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    regions?: RegionUncheckedCreateNestedManyWithoutCountryInput
    merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    brands?: BrandUncheckedCreateNestedManyWithoutCountryInput
    stores?: StoreUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutContinentInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutContinentInput, CountryUncheckedCreateWithoutContinentInput>
  }

  export type CountryCreateManyContinentInputEnvelope = {
    data: CountryCreateManyContinentInput | CountryCreateManyContinentInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithWhereUniqueWithoutContinentInput = {
    where: CountryWhereUniqueInput
    update: XOR<CountryUpdateWithoutContinentInput, CountryUncheckedUpdateWithoutContinentInput>
    create: XOR<CountryCreateWithoutContinentInput, CountryUncheckedCreateWithoutContinentInput>
  }

  export type CountryUpdateWithWhereUniqueWithoutContinentInput = {
    where: CountryWhereUniqueInput
    data: XOR<CountryUpdateWithoutContinentInput, CountryUncheckedUpdateWithoutContinentInput>
  }

  export type CountryUpdateManyWithWhereWithoutContinentInput = {
    where: CountryScalarWhereInput
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyWithoutContinentInput>
  }

  export type CurrencyCreateWithoutCountriesInput = {
    id?: string
    name: string
    code: string
    symbol?: string | null
    decimals?: number | null
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    numToBasic?: number | null
    stores?: StoreCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateWithoutCountriesInput = {
    id?: string
    name: string
    code: string
    symbol?: string | null
    decimals?: number | null
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    numToBasic?: number | null
    stores?: StoreUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyCreateOrConnectWithoutCountriesInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutCountriesInput, CurrencyUncheckedCreateWithoutCountriesInput>
  }

  export type ContinentCreateWithoutCountriesInput = {
    id?: string
    name: string
  }

  export type ContinentUncheckedCreateWithoutCountriesInput = {
    id?: string
    name: string
  }

  export type ContinentCreateOrConnectWithoutCountriesInput = {
    where: ContinentWhereUniqueInput
    create: XOR<ContinentCreateWithoutCountriesInput, ContinentUncheckedCreateWithoutCountriesInput>
  }

  export type RegionCreateWithoutCountryInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantCreateNestedManyWithoutRegionInput
    brands?: BrandCreateNestedManyWithoutRegionInput
    stores?: StoreCreateNestedManyWithoutRegionInput
    users?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutCountryInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutRegionInput
    brands?: BrandUncheckedCreateNestedManyWithoutRegionInput
    stores?: StoreUncheckedCreateNestedManyWithoutRegionInput
    users?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutCountryInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutCountryInput, RegionUncheckedCreateWithoutCountryInput>
  }

  export type RegionCreateManyCountryInputEnvelope = {
    data: RegionCreateManyCountryInput | RegionCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type MerchantCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutMerchantsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutMerchantInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutMerchantInput
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutCountryInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput>
  }

  export type MerchantCreateManyCountryInputEnvelope = {
    data: MerchantCreateManyCountryInput | MerchantCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type BrandCreateWithoutCountryInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    region?: RegionCreateNestedOneWithoutBrandsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutCountryInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutBrandInput
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutCountryInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput>
  }

  export type BrandCreateManyCountryInputEnvelope = {
    data: BrandCreateManyCountryInput | BrandCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type StoreCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    region?: RegionCreateNestedOneWithoutStoresInput
    currency: CurrencyCreateNestedOneWithoutStoresInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutStoreInput
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutCountryInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput>
  }

  export type StoreCreateManyCountryInputEnvelope = {
    data: StoreCreateManyCountryInput | StoreCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type CurrencyUpsertWithoutCountriesInput = {
    update: XOR<CurrencyUpdateWithoutCountriesInput, CurrencyUncheckedUpdateWithoutCountriesInput>
    create: XOR<CurrencyCreateWithoutCountriesInput, CurrencyUncheckedCreateWithoutCountriesInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutCountriesInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutCountriesInput, CurrencyUncheckedUpdateWithoutCountriesInput>
  }

  export type CurrencyUpdateWithoutCountriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
    stores?: StoreUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateWithoutCountriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
    stores?: StoreUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type ContinentUpsertWithoutCountriesInput = {
    update: XOR<ContinentUpdateWithoutCountriesInput, ContinentUncheckedUpdateWithoutCountriesInput>
    create: XOR<ContinentCreateWithoutCountriesInput, ContinentUncheckedCreateWithoutCountriesInput>
    where?: ContinentWhereInput
  }

  export type ContinentUpdateToOneWithWhereWithoutCountriesInput = {
    where?: ContinentWhereInput
    data: XOR<ContinentUpdateWithoutCountriesInput, ContinentUncheckedUpdateWithoutCountriesInput>
  }

  export type ContinentUpdateWithoutCountriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ContinentUncheckedUpdateWithoutCountriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUpsertWithWhereUniqueWithoutCountryInput = {
    where: RegionWhereUniqueInput
    update: XOR<RegionUpdateWithoutCountryInput, RegionUncheckedUpdateWithoutCountryInput>
    create: XOR<RegionCreateWithoutCountryInput, RegionUncheckedCreateWithoutCountryInput>
  }

  export type RegionUpdateWithWhereUniqueWithoutCountryInput = {
    where: RegionWhereUniqueInput
    data: XOR<RegionUpdateWithoutCountryInput, RegionUncheckedUpdateWithoutCountryInput>
  }

  export type RegionUpdateManyWithWhereWithoutCountryInput = {
    where: RegionScalarWhereInput
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyWithoutCountryInput>
  }

  export type RegionScalarWhereInput = {
    AND?: RegionScalarWhereInput | RegionScalarWhereInput[]
    OR?: RegionScalarWhereInput[]
    NOT?: RegionScalarWhereInput | RegionScalarWhereInput[]
    id?: StringFilter<"Region"> | string
    code?: StringFilter<"Region"> | string
    name?: StringFilter<"Region"> | string
    countryId?: StringFilter<"Region"> | string
    createdAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
  }

  export type MerchantUpsertWithWhereUniqueWithoutCountryInput = {
    where: MerchantWhereUniqueInput
    update: XOR<MerchantUpdateWithoutCountryInput, MerchantUncheckedUpdateWithoutCountryInput>
    create: XOR<MerchantCreateWithoutCountryInput, MerchantUncheckedCreateWithoutCountryInput>
  }

  export type MerchantUpdateWithWhereUniqueWithoutCountryInput = {
    where: MerchantWhereUniqueInput
    data: XOR<MerchantUpdateWithoutCountryInput, MerchantUncheckedUpdateWithoutCountryInput>
  }

  export type MerchantUpdateManyWithWhereWithoutCountryInput = {
    where: MerchantScalarWhereInput
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyWithoutCountryInput>
  }

  export type MerchantScalarWhereInput = {
    AND?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
    OR?: MerchantScalarWhereInput[]
    NOT?: MerchantScalarWhereInput | MerchantScalarWhereInput[]
    id?: StringFilter<"Merchant"> | string
    name?: StringFilter<"Merchant"> | string
    slug?: StringFilter<"Merchant"> | string
    status?: EnumStatusFilter<"Merchant"> | $Enums.Status
    phoneNumber?: StringFilter<"Merchant"> | string
    genericEmail?: StringFilter<"Merchant"> | string
    invoiceEmail?: StringNullableFilter<"Merchant"> | string | null
    addressLine1?: StringFilter<"Merchant"> | string
    addressLine2?: StringNullableFilter<"Merchant"> | string | null
    addressLine3?: StringNullableFilter<"Merchant"> | string | null
    city?: StringFilter<"Merchant"> | string
    postalCode?: StringFilter<"Merchant"> | string
    regionId?: StringNullableFilter<"Merchant"> | string | null
    countryId?: StringFilter<"Merchant"> | string
    timezone?: StringNullableFilter<"Merchant"> | string | null
    logo?: StringNullableFilter<"Merchant"> | string | null
    website?: StringNullableFilter<"Merchant"> | string | null
    createdAt?: DateTimeFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeFilter<"Merchant"> | Date | string
  }

  export type BrandUpsertWithWhereUniqueWithoutCountryInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutCountryInput, BrandUncheckedUpdateWithoutCountryInput>
    create: XOR<BrandCreateWithoutCountryInput, BrandUncheckedCreateWithoutCountryInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutCountryInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutCountryInput, BrandUncheckedUpdateWithoutCountryInput>
  }

  export type BrandUpdateManyWithWhereWithoutCountryInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutCountryInput>
  }

  export type BrandScalarWhereInput = {
    AND?: BrandScalarWhereInput | BrandScalarWhereInput[]
    OR?: BrandScalarWhereInput[]
    NOT?: BrandScalarWhereInput | BrandScalarWhereInput[]
    id?: StringFilter<"Brand"> | string
    status?: EnumStatusFilter<"Brand"> | $Enums.Status
    merchantId?: StringFilter<"Brand"> | string
    name?: StringFilter<"Brand"> | string
    slug?: StringFilter<"Brand"> | string
    genericEmail?: StringFilter<"Brand"> | string
    invoiceEmail?: StringNullableFilter<"Brand"> | string | null
    tradingAsName?: StringNullableFilter<"Brand"> | string | null
    logo?: StringNullableFilter<"Brand"> | string | null
    website?: StringNullableFilter<"Brand"> | string | null
    addressLine1?: StringFilter<"Brand"> | string
    addressLine2?: StringNullableFilter<"Brand"> | string | null
    addressLine3?: StringNullableFilter<"Brand"> | string | null
    city?: StringFilter<"Brand"> | string
    postalCode?: StringFilter<"Brand"> | string
    regionId?: StringNullableFilter<"Brand"> | string | null
    countryId?: StringFilter<"Brand"> | string
    phoneNumber?: StringFilter<"Brand"> | string
    timezone?: StringNullableFilter<"Brand"> | string | null
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
  }

  export type StoreUpsertWithWhereUniqueWithoutCountryInput = {
    where: StoreWhereUniqueInput
    update: XOR<StoreUpdateWithoutCountryInput, StoreUncheckedUpdateWithoutCountryInput>
    create: XOR<StoreCreateWithoutCountryInput, StoreUncheckedCreateWithoutCountryInput>
  }

  export type StoreUpdateWithWhereUniqueWithoutCountryInput = {
    where: StoreWhereUniqueInput
    data: XOR<StoreUpdateWithoutCountryInput, StoreUncheckedUpdateWithoutCountryInput>
  }

  export type StoreUpdateManyWithWhereWithoutCountryInput = {
    where: StoreScalarWhereInput
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyWithoutCountryInput>
  }

  export type CountryCreateWithoutRegionsInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currency: CurrencyCreateNestedOneWithoutCountriesInput
    continent: ContinentCreateNestedOneWithoutCountriesInput
    merchants?: MerchantCreateNestedManyWithoutCountryInput
    brands?: BrandCreateNestedManyWithoutCountryInput
    stores?: StoreCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutRegionsInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    continentId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    brands?: BrandUncheckedCreateNestedManyWithoutCountryInput
    stores?: StoreUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutRegionsInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutRegionsInput, CountryUncheckedCreateWithoutRegionsInput>
  }

  export type MerchantCreateWithoutRegionInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutMerchantsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutMerchantInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutRegionInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    countryId: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutMerchantInput
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutRegionInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutRegionInput, MerchantUncheckedCreateWithoutRegionInput>
  }

  export type MerchantCreateManyRegionInputEnvelope = {
    data: MerchantCreateManyRegionInput | MerchantCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type BrandCreateWithoutRegionInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutRegionInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutBrandInput
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutRegionInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutRegionInput, BrandUncheckedCreateWithoutRegionInput>
  }

  export type BrandCreateManyRegionInputEnvelope = {
    data: BrandCreateManyRegionInput | BrandCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type StoreCreateWithoutRegionInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoresInput
    currency: CurrencyCreateNestedOneWithoutStoresInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutRegionInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutStoreInput
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutRegionInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutRegionInput, StoreUncheckedCreateWithoutRegionInput>
  }

  export type StoreCreateManyRegionInputEnvelope = {
    data: StoreCreateManyRegionInput | StoreCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutRegionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRegionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRegionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserCreateManyRegionInputEnvelope = {
    data: UserCreateManyRegionInput | UserCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutRegionsInput = {
    update: XOR<CountryUpdateWithoutRegionsInput, CountryUncheckedUpdateWithoutRegionsInput>
    create: XOR<CountryCreateWithoutRegionsInput, CountryUncheckedCreateWithoutRegionsInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutRegionsInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutRegionsInput, CountryUncheckedUpdateWithoutRegionsInput>
  }

  export type CountryUpdateWithoutRegionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: CurrencyUpdateOneRequiredWithoutCountriesNestedInput
    continent?: ContinentUpdateOneRequiredWithoutCountriesNestedInput
    merchants?: MerchantUpdateManyWithoutCountryNestedInput
    brands?: BrandUpdateManyWithoutCountryNestedInput
    stores?: StoreUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutRegionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    continentId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    brands?: BrandUncheckedUpdateManyWithoutCountryNestedInput
    stores?: StoreUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type MerchantUpsertWithWhereUniqueWithoutRegionInput = {
    where: MerchantWhereUniqueInput
    update: XOR<MerchantUpdateWithoutRegionInput, MerchantUncheckedUpdateWithoutRegionInput>
    create: XOR<MerchantCreateWithoutRegionInput, MerchantUncheckedCreateWithoutRegionInput>
  }

  export type MerchantUpdateWithWhereUniqueWithoutRegionInput = {
    where: MerchantWhereUniqueInput
    data: XOR<MerchantUpdateWithoutRegionInput, MerchantUncheckedUpdateWithoutRegionInput>
  }

  export type MerchantUpdateManyWithWhereWithoutRegionInput = {
    where: MerchantScalarWhereInput
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyWithoutRegionInput>
  }

  export type BrandUpsertWithWhereUniqueWithoutRegionInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutRegionInput, BrandUncheckedUpdateWithoutRegionInput>
    create: XOR<BrandCreateWithoutRegionInput, BrandUncheckedCreateWithoutRegionInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutRegionInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutRegionInput, BrandUncheckedUpdateWithoutRegionInput>
  }

  export type BrandUpdateManyWithWhereWithoutRegionInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutRegionInput>
  }

  export type StoreUpsertWithWhereUniqueWithoutRegionInput = {
    where: StoreWhereUniqueInput
    update: XOR<StoreUpdateWithoutRegionInput, StoreUncheckedUpdateWithoutRegionInput>
    create: XOR<StoreCreateWithoutRegionInput, StoreUncheckedCreateWithoutRegionInput>
  }

  export type StoreUpdateWithWhereUniqueWithoutRegionInput = {
    where: StoreWhereUniqueInput
    data: XOR<StoreUpdateWithoutRegionInput, StoreUncheckedUpdateWithoutRegionInput>
  }

  export type StoreUpdateManyWithWhereWithoutRegionInput = {
    where: StoreScalarWhereInput
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyWithoutRegionInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
  }

  export type UserUpdateManyWithWhereWithoutRegionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRegionInput>
  }

  export type MerchantCreateWithoutBusinessRegistrationsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutMerchantsInput
    country: CountryCreateNestedOneWithoutMerchantsInput
    brands?: BrandCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutBusinessRegistrationsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brands?: BrandUncheckedCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutBusinessRegistrationsInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutBusinessRegistrationsInput, MerchantUncheckedCreateWithoutBusinessRegistrationsInput>
  }

  export type BrandCreateWithoutBusinessRegistrationsInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    region?: RegionCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandsInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutBusinessRegistrationsInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutBusinessRegistrationsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutBusinessRegistrationsInput, BrandUncheckedCreateWithoutBusinessRegistrationsInput>
  }

  export type StoreCreateWithoutBusinessRegistrationsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    region?: RegionCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoresInput
    currency: CurrencyCreateNestedOneWithoutStoresInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutBusinessRegistrationsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutBusinessRegistrationsInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutBusinessRegistrationsInput, StoreUncheckedCreateWithoutBusinessRegistrationsInput>
  }

  export type MerchantUpsertWithoutBusinessRegistrationsInput = {
    update: XOR<MerchantUpdateWithoutBusinessRegistrationsInput, MerchantUncheckedUpdateWithoutBusinessRegistrationsInput>
    create: XOR<MerchantCreateWithoutBusinessRegistrationsInput, MerchantUncheckedCreateWithoutBusinessRegistrationsInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutBusinessRegistrationsInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutBusinessRegistrationsInput, MerchantUncheckedUpdateWithoutBusinessRegistrationsInput>
  }

  export type MerchantUpdateWithoutBusinessRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutMerchantsNestedInput
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutBusinessRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type BrandUpsertWithoutBusinessRegistrationsInput = {
    update: XOR<BrandUpdateWithoutBusinessRegistrationsInput, BrandUncheckedUpdateWithoutBusinessRegistrationsInput>
    create: XOR<BrandCreateWithoutBusinessRegistrationsInput, BrandUncheckedCreateWithoutBusinessRegistrationsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutBusinessRegistrationsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutBusinessRegistrationsInput, BrandUncheckedUpdateWithoutBusinessRegistrationsInput>
  }

  export type BrandUpdateWithoutBusinessRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    region?: RegionUpdateOneWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandsNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutBusinessRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type StoreUpsertWithoutBusinessRegistrationsInput = {
    update: XOR<StoreUpdateWithoutBusinessRegistrationsInput, StoreUncheckedUpdateWithoutBusinessRegistrationsInput>
    create: XOR<StoreCreateWithoutBusinessRegistrationsInput, StoreUncheckedCreateWithoutBusinessRegistrationsInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutBusinessRegistrationsInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutBusinessRegistrationsInput, StoreUncheckedUpdateWithoutBusinessRegistrationsInput>
  }

  export type StoreUpdateWithoutBusinessRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    region?: RegionUpdateOneWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoresNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoresNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutBusinessRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type RegionCreateWithoutMerchantsInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutRegionsInput
    brands?: BrandCreateNestedManyWithoutRegionInput
    stores?: StoreCreateNestedManyWithoutRegionInput
    users?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutMerchantsInput = {
    id?: string
    code: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    brands?: BrandUncheckedCreateNestedManyWithoutRegionInput
    stores?: StoreUncheckedCreateNestedManyWithoutRegionInput
    users?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutMerchantsInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutMerchantsInput, RegionUncheckedCreateWithoutMerchantsInput>
  }

  export type CountryCreateWithoutMerchantsInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currency: CurrencyCreateNestedOneWithoutCountriesInput
    continent: ContinentCreateNestedOneWithoutCountriesInput
    regions?: RegionCreateNestedManyWithoutCountryInput
    brands?: BrandCreateNestedManyWithoutCountryInput
    stores?: StoreCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutMerchantsInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    continentId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    regions?: RegionUncheckedCreateNestedManyWithoutCountryInput
    brands?: BrandUncheckedCreateNestedManyWithoutCountryInput
    stores?: StoreUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutMerchantsInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutMerchantsInput, CountryUncheckedCreateWithoutMerchantsInput>
  }

  export type BusinessRegistrationCreateWithoutMerchantInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutBusinessRegistrationsInput
    store?: StoreCreateNestedOneWithoutBusinessRegistrationsInput
  }

  export type BusinessRegistrationUncheckedCreateWithoutMerchantInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    brandId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessRegistrationCreateOrConnectWithoutMerchantInput = {
    where: BusinessRegistrationWhereUniqueInput
    create: XOR<BusinessRegistrationCreateWithoutMerchantInput, BusinessRegistrationUncheckedCreateWithoutMerchantInput>
  }

  export type BusinessRegistrationCreateManyMerchantInputEnvelope = {
    data: BusinessRegistrationCreateManyMerchantInput | BusinessRegistrationCreateManyMerchantInput[]
    skipDuplicates?: boolean
  }

  export type BrandCreateWithoutMerchantInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutBrandInput
    stores?: StoreCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutMerchantInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutBrandInput
    stores?: StoreUncheckedCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutMerchantInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput>
  }

  export type BrandCreateManyMerchantInputEnvelope = {
    data: BrandCreateManyMerchantInput | BrandCreateManyMerchantInput[]
    skipDuplicates?: boolean
  }

  export type BusinessUserAccessCreateWithoutMerchantInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBusinessAccessInput
    brand?: BrandCreateNestedOneWithoutUserAccessInput
    store?: StoreCreateNestedOneWithoutUserAccessInput
    createdBy?: UserCreateNestedOneWithoutCreatedAccessRecordsInput
  }

  export type BusinessUserAccessUncheckedCreateWithoutMerchantInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    brandId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessUserAccessCreateOrConnectWithoutMerchantInput = {
    where: BusinessUserAccessWhereUniqueInput
    create: XOR<BusinessUserAccessCreateWithoutMerchantInput, BusinessUserAccessUncheckedCreateWithoutMerchantInput>
  }

  export type BusinessUserAccessCreateManyMerchantInputEnvelope = {
    data: BusinessUserAccessCreateManyMerchantInput | BusinessUserAccessCreateManyMerchantInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutMerchantsInput = {
    update: XOR<RegionUpdateWithoutMerchantsInput, RegionUncheckedUpdateWithoutMerchantsInput>
    create: XOR<RegionCreateWithoutMerchantsInput, RegionUncheckedCreateWithoutMerchantsInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutMerchantsInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutMerchantsInput, RegionUncheckedUpdateWithoutMerchantsInput>
  }

  export type RegionUpdateWithoutMerchantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutRegionsNestedInput
    brands?: BrandUpdateManyWithoutRegionNestedInput
    stores?: StoreUpdateManyWithoutRegionNestedInput
    users?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutMerchantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brands?: BrandUncheckedUpdateManyWithoutRegionNestedInput
    stores?: StoreUncheckedUpdateManyWithoutRegionNestedInput
    users?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type CountryUpsertWithoutMerchantsInput = {
    update: XOR<CountryUpdateWithoutMerchantsInput, CountryUncheckedUpdateWithoutMerchantsInput>
    create: XOR<CountryCreateWithoutMerchantsInput, CountryUncheckedCreateWithoutMerchantsInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutMerchantsInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutMerchantsInput, CountryUncheckedUpdateWithoutMerchantsInput>
  }

  export type CountryUpdateWithoutMerchantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: CurrencyUpdateOneRequiredWithoutCountriesNestedInput
    continent?: ContinentUpdateOneRequiredWithoutCountriesNestedInput
    regions?: RegionUpdateManyWithoutCountryNestedInput
    brands?: BrandUpdateManyWithoutCountryNestedInput
    stores?: StoreUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutMerchantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    continentId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    regions?: RegionUncheckedUpdateManyWithoutCountryNestedInput
    brands?: BrandUncheckedUpdateManyWithoutCountryNestedInput
    stores?: StoreUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type BusinessRegistrationUpsertWithWhereUniqueWithoutMerchantInput = {
    where: BusinessRegistrationWhereUniqueInput
    update: XOR<BusinessRegistrationUpdateWithoutMerchantInput, BusinessRegistrationUncheckedUpdateWithoutMerchantInput>
    create: XOR<BusinessRegistrationCreateWithoutMerchantInput, BusinessRegistrationUncheckedCreateWithoutMerchantInput>
  }

  export type BusinessRegistrationUpdateWithWhereUniqueWithoutMerchantInput = {
    where: BusinessRegistrationWhereUniqueInput
    data: XOR<BusinessRegistrationUpdateWithoutMerchantInput, BusinessRegistrationUncheckedUpdateWithoutMerchantInput>
  }

  export type BusinessRegistrationUpdateManyWithWhereWithoutMerchantInput = {
    where: BusinessRegistrationScalarWhereInput
    data: XOR<BusinessRegistrationUpdateManyMutationInput, BusinessRegistrationUncheckedUpdateManyWithoutMerchantInput>
  }

  export type BusinessRegistrationScalarWhereInput = {
    AND?: BusinessRegistrationScalarWhereInput | BusinessRegistrationScalarWhereInput[]
    OR?: BusinessRegistrationScalarWhereInput[]
    NOT?: BusinessRegistrationScalarWhereInput | BusinessRegistrationScalarWhereInput[]
    id?: StringFilter<"BusinessRegistration"> | string
    type?: EnumBusinessRegistrationTypeFilter<"BusinessRegistration"> | $Enums.BusinessRegistrationType
    number?: StringFilter<"BusinessRegistration"> | string
    issuingBody?: StringNullableFilter<"BusinessRegistration"> | string | null
    validFrom?: DateTimeNullableFilter<"BusinessRegistration"> | Date | string | null
    validUntil?: DateTimeNullableFilter<"BusinessRegistration"> | Date | string | null
    isActive?: BoolFilter<"BusinessRegistration"> | boolean
    merchantId?: StringNullableFilter<"BusinessRegistration"> | string | null
    brandId?: StringNullableFilter<"BusinessRegistration"> | string | null
    storeId?: StringNullableFilter<"BusinessRegistration"> | string | null
    createdAt?: DateTimeFilter<"BusinessRegistration"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessRegistration"> | Date | string
  }

  export type BrandUpsertWithWhereUniqueWithoutMerchantInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutMerchantInput, BrandUncheckedUpdateWithoutMerchantInput>
    create: XOR<BrandCreateWithoutMerchantInput, BrandUncheckedCreateWithoutMerchantInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutMerchantInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutMerchantInput, BrandUncheckedUpdateWithoutMerchantInput>
  }

  export type BrandUpdateManyWithWhereWithoutMerchantInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutMerchantInput>
  }

  export type BusinessUserAccessUpsertWithWhereUniqueWithoutMerchantInput = {
    where: BusinessUserAccessWhereUniqueInput
    update: XOR<BusinessUserAccessUpdateWithoutMerchantInput, BusinessUserAccessUncheckedUpdateWithoutMerchantInput>
    create: XOR<BusinessUserAccessCreateWithoutMerchantInput, BusinessUserAccessUncheckedCreateWithoutMerchantInput>
  }

  export type BusinessUserAccessUpdateWithWhereUniqueWithoutMerchantInput = {
    where: BusinessUserAccessWhereUniqueInput
    data: XOR<BusinessUserAccessUpdateWithoutMerchantInput, BusinessUserAccessUncheckedUpdateWithoutMerchantInput>
  }

  export type BusinessUserAccessUpdateManyWithWhereWithoutMerchantInput = {
    where: BusinessUserAccessScalarWhereInput
    data: XOR<BusinessUserAccessUpdateManyMutationInput, BusinessUserAccessUncheckedUpdateManyWithoutMerchantInput>
  }

  export type MerchantCreateWithoutBrandsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutMerchantsInput
    country: CountryCreateNestedOneWithoutMerchantsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutBrandsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutMerchantInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutBrandsInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutBrandsInput, MerchantUncheckedCreateWithoutBrandsInput>
  }

  export type RegionCreateWithoutBrandsInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutRegionsInput
    merchants?: MerchantCreateNestedManyWithoutRegionInput
    stores?: StoreCreateNestedManyWithoutRegionInput
    users?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutBrandsInput = {
    id?: string
    code: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutRegionInput
    stores?: StoreUncheckedCreateNestedManyWithoutRegionInput
    users?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutBrandsInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutBrandsInput, RegionUncheckedCreateWithoutBrandsInput>
  }

  export type CountryCreateWithoutBrandsInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currency: CurrencyCreateNestedOneWithoutCountriesInput
    continent: ContinentCreateNestedOneWithoutCountriesInput
    regions?: RegionCreateNestedManyWithoutCountryInput
    merchants?: MerchantCreateNestedManyWithoutCountryInput
    stores?: StoreCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutBrandsInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    continentId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    regions?: RegionUncheckedCreateNestedManyWithoutCountryInput
    merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    stores?: StoreUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutBrandsInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutBrandsInput, CountryUncheckedCreateWithoutBrandsInput>
  }

  export type BusinessRegistrationCreateWithoutBrandInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant?: MerchantCreateNestedOneWithoutBusinessRegistrationsInput
    store?: StoreCreateNestedOneWithoutBusinessRegistrationsInput
  }

  export type BusinessRegistrationUncheckedCreateWithoutBrandInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    merchantId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessRegistrationCreateOrConnectWithoutBrandInput = {
    where: BusinessRegistrationWhereUniqueInput
    create: XOR<BusinessRegistrationCreateWithoutBrandInput, BusinessRegistrationUncheckedCreateWithoutBrandInput>
  }

  export type BusinessRegistrationCreateManyBrandInputEnvelope = {
    data: BusinessRegistrationCreateManyBrandInput | BusinessRegistrationCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type StoreCreateWithoutBrandInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: RegionCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoresInput
    currency: CurrencyCreateNestedOneWithoutStoresInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutStoreInput
    receipts?: ReceiptCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutBrandInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutStoreInput
    receipts?: ReceiptUncheckedCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutBrandInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput>
  }

  export type StoreCreateManyBrandInputEnvelope = {
    data: StoreCreateManyBrandInput | StoreCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type BusinessUserAccessCreateWithoutBrandInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBusinessAccessInput
    merchant?: MerchantCreateNestedOneWithoutUserAccessInput
    store?: StoreCreateNestedOneWithoutUserAccessInput
    createdBy?: UserCreateNestedOneWithoutCreatedAccessRecordsInput
  }

  export type BusinessUserAccessUncheckedCreateWithoutBrandInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessUserAccessCreateOrConnectWithoutBrandInput = {
    where: BusinessUserAccessWhereUniqueInput
    create: XOR<BusinessUserAccessCreateWithoutBrandInput, BusinessUserAccessUncheckedCreateWithoutBrandInput>
  }

  export type BusinessUserAccessCreateManyBrandInputEnvelope = {
    data: BusinessUserAccessCreateManyBrandInput | BusinessUserAccessCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type MerchantUpsertWithoutBrandsInput = {
    update: XOR<MerchantUpdateWithoutBrandsInput, MerchantUncheckedUpdateWithoutBrandsInput>
    create: XOR<MerchantCreateWithoutBrandsInput, MerchantUncheckedCreateWithoutBrandsInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutBrandsInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutBrandsInput, MerchantUncheckedUpdateWithoutBrandsInput>
  }

  export type MerchantUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutMerchantsNestedInput
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type RegionUpsertWithoutBrandsInput = {
    update: XOR<RegionUpdateWithoutBrandsInput, RegionUncheckedUpdateWithoutBrandsInput>
    create: XOR<RegionCreateWithoutBrandsInput, RegionUncheckedCreateWithoutBrandsInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutBrandsInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutBrandsInput, RegionUncheckedUpdateWithoutBrandsInput>
  }

  export type RegionUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutRegionsNestedInput
    merchants?: MerchantUpdateManyWithoutRegionNestedInput
    stores?: StoreUpdateManyWithoutRegionNestedInput
    users?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutRegionNestedInput
    stores?: StoreUncheckedUpdateManyWithoutRegionNestedInput
    users?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type CountryUpsertWithoutBrandsInput = {
    update: XOR<CountryUpdateWithoutBrandsInput, CountryUncheckedUpdateWithoutBrandsInput>
    create: XOR<CountryCreateWithoutBrandsInput, CountryUncheckedCreateWithoutBrandsInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutBrandsInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutBrandsInput, CountryUncheckedUpdateWithoutBrandsInput>
  }

  export type CountryUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: CurrencyUpdateOneRequiredWithoutCountriesNestedInput
    continent?: ContinentUpdateOneRequiredWithoutCountriesNestedInput
    regions?: RegionUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUpdateManyWithoutCountryNestedInput
    stores?: StoreUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    continentId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    regions?: RegionUncheckedUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    stores?: StoreUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type BusinessRegistrationUpsertWithWhereUniqueWithoutBrandInput = {
    where: BusinessRegistrationWhereUniqueInput
    update: XOR<BusinessRegistrationUpdateWithoutBrandInput, BusinessRegistrationUncheckedUpdateWithoutBrandInput>
    create: XOR<BusinessRegistrationCreateWithoutBrandInput, BusinessRegistrationUncheckedCreateWithoutBrandInput>
  }

  export type BusinessRegistrationUpdateWithWhereUniqueWithoutBrandInput = {
    where: BusinessRegistrationWhereUniqueInput
    data: XOR<BusinessRegistrationUpdateWithoutBrandInput, BusinessRegistrationUncheckedUpdateWithoutBrandInput>
  }

  export type BusinessRegistrationUpdateManyWithWhereWithoutBrandInput = {
    where: BusinessRegistrationScalarWhereInput
    data: XOR<BusinessRegistrationUpdateManyMutationInput, BusinessRegistrationUncheckedUpdateManyWithoutBrandInput>
  }

  export type StoreUpsertWithWhereUniqueWithoutBrandInput = {
    where: StoreWhereUniqueInput
    update: XOR<StoreUpdateWithoutBrandInput, StoreUncheckedUpdateWithoutBrandInput>
    create: XOR<StoreCreateWithoutBrandInput, StoreUncheckedCreateWithoutBrandInput>
  }

  export type StoreUpdateWithWhereUniqueWithoutBrandInput = {
    where: StoreWhereUniqueInput
    data: XOR<StoreUpdateWithoutBrandInput, StoreUncheckedUpdateWithoutBrandInput>
  }

  export type StoreUpdateManyWithWhereWithoutBrandInput = {
    where: StoreScalarWhereInput
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyWithoutBrandInput>
  }

  export type BusinessUserAccessUpsertWithWhereUniqueWithoutBrandInput = {
    where: BusinessUserAccessWhereUniqueInput
    update: XOR<BusinessUserAccessUpdateWithoutBrandInput, BusinessUserAccessUncheckedUpdateWithoutBrandInput>
    create: XOR<BusinessUserAccessCreateWithoutBrandInput, BusinessUserAccessUncheckedCreateWithoutBrandInput>
  }

  export type BusinessUserAccessUpdateWithWhereUniqueWithoutBrandInput = {
    where: BusinessUserAccessWhereUniqueInput
    data: XOR<BusinessUserAccessUpdateWithoutBrandInput, BusinessUserAccessUncheckedUpdateWithoutBrandInput>
  }

  export type BusinessUserAccessUpdateManyWithWhereWithoutBrandInput = {
    where: BusinessUserAccessScalarWhereInput
    data: XOR<BusinessUserAccessUpdateManyMutationInput, BusinessUserAccessUncheckedUpdateManyWithoutBrandInput>
  }

  export type BrandCreateWithoutStoresInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant: MerchantCreateNestedOneWithoutBrandsInput
    region?: RegionCreateNestedOneWithoutBrandsInput
    country: CountryCreateNestedOneWithoutBrandsInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutStoresInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutBrandInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutStoresInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutStoresInput, BrandUncheckedCreateWithoutStoresInput>
  }

  export type RegionCreateWithoutStoresInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutRegionsInput
    merchants?: MerchantCreateNestedManyWithoutRegionInput
    brands?: BrandCreateNestedManyWithoutRegionInput
    users?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutStoresInput = {
    id?: string
    code: string
    name: string
    countryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    merchants?: MerchantUncheckedCreateNestedManyWithoutRegionInput
    brands?: BrandUncheckedCreateNestedManyWithoutRegionInput
    users?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutStoresInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutStoresInput, RegionUncheckedCreateWithoutStoresInput>
  }

  export type CountryCreateWithoutStoresInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currency: CurrencyCreateNestedOneWithoutCountriesInput
    continent: ContinentCreateNestedOneWithoutCountriesInput
    regions?: RegionCreateNestedManyWithoutCountryInput
    merchants?: MerchantCreateNestedManyWithoutCountryInput
    brands?: BrandCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutStoresInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    continentId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    regions?: RegionUncheckedCreateNestedManyWithoutCountryInput
    merchants?: MerchantUncheckedCreateNestedManyWithoutCountryInput
    brands?: BrandUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutStoresInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutStoresInput, CountryUncheckedCreateWithoutStoresInput>
  }

  export type CurrencyCreateWithoutStoresInput = {
    id?: string
    name: string
    code: string
    symbol?: string | null
    decimals?: number | null
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    numToBasic?: number | null
    countries?: CountryCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyUncheckedCreateWithoutStoresInput = {
    id?: string
    name: string
    code: string
    symbol?: string | null
    decimals?: number | null
    demonym?: string | null
    majorSingle?: string | null
    majorPlural?: string | null
    ISOnum?: number | null
    symbolNative: string
    minorSingle?: string | null
    minorPlural?: string | null
    ISOdigits?: number | null
    numToBasic?: number | null
    countries?: CountryUncheckedCreateNestedManyWithoutCurrencyInput
  }

  export type CurrencyCreateOrConnectWithoutStoresInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutStoresInput, CurrencyUncheckedCreateWithoutStoresInput>
  }

  export type BusinessRegistrationCreateWithoutStoreInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant?: MerchantCreateNestedOneWithoutBusinessRegistrationsInput
    brand?: BrandCreateNestedOneWithoutBusinessRegistrationsInput
  }

  export type BusinessRegistrationUncheckedCreateWithoutStoreInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    merchantId?: string | null
    brandId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessRegistrationCreateOrConnectWithoutStoreInput = {
    where: BusinessRegistrationWhereUniqueInput
    create: XOR<BusinessRegistrationCreateWithoutStoreInput, BusinessRegistrationUncheckedCreateWithoutStoreInput>
  }

  export type BusinessRegistrationCreateManyStoreInputEnvelope = {
    data: BusinessRegistrationCreateManyStoreInput | BusinessRegistrationCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type ReceiptCreateWithoutStoreInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutStoreInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutStoreInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput>
  }

  export type ReceiptCreateManyStoreInputEnvelope = {
    data: ReceiptCreateManyStoreInput | ReceiptCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type BusinessUserAccessCreateWithoutStoreInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBusinessAccessInput
    merchant?: MerchantCreateNestedOneWithoutUserAccessInput
    brand?: BrandCreateNestedOneWithoutUserAccessInput
    createdBy?: UserCreateNestedOneWithoutCreatedAccessRecordsInput
  }

  export type BusinessUserAccessUncheckedCreateWithoutStoreInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    brandId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessUserAccessCreateOrConnectWithoutStoreInput = {
    where: BusinessUserAccessWhereUniqueInput
    create: XOR<BusinessUserAccessCreateWithoutStoreInput, BusinessUserAccessUncheckedCreateWithoutStoreInput>
  }

  export type BusinessUserAccessCreateManyStoreInputEnvelope = {
    data: BusinessUserAccessCreateManyStoreInput | BusinessUserAccessCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type BrandUpsertWithoutStoresInput = {
    update: XOR<BrandUpdateWithoutStoresInput, BrandUncheckedUpdateWithoutStoresInput>
    create: XOR<BrandCreateWithoutStoresInput, BrandUncheckedCreateWithoutStoresInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutStoresInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutStoresInput, BrandUncheckedUpdateWithoutStoresInput>
  }

  export type BrandUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    region?: RegionUpdateOneWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type RegionUpsertWithoutStoresInput = {
    update: XOR<RegionUpdateWithoutStoresInput, RegionUncheckedUpdateWithoutStoresInput>
    create: XOR<RegionCreateWithoutStoresInput, RegionUncheckedCreateWithoutStoresInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutStoresInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutStoresInput, RegionUncheckedUpdateWithoutStoresInput>
  }

  export type RegionUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutRegionsNestedInput
    merchants?: MerchantUpdateManyWithoutRegionNestedInput
    brands?: BrandUpdateManyWithoutRegionNestedInput
    users?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutRegionNestedInput
    brands?: BrandUncheckedUpdateManyWithoutRegionNestedInput
    users?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type CountryUpsertWithoutStoresInput = {
    update: XOR<CountryUpdateWithoutStoresInput, CountryUncheckedUpdateWithoutStoresInput>
    create: XOR<CountryCreateWithoutStoresInput, CountryUncheckedCreateWithoutStoresInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutStoresInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutStoresInput, CountryUncheckedUpdateWithoutStoresInput>
  }

  export type CountryUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: CurrencyUpdateOneRequiredWithoutCountriesNestedInput
    continent?: ContinentUpdateOneRequiredWithoutCountriesNestedInput
    regions?: RegionUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUpdateManyWithoutCountryNestedInput
    brands?: BrandUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    continentId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    regions?: RegionUncheckedUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    brands?: BrandUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CurrencyUpsertWithoutStoresInput = {
    update: XOR<CurrencyUpdateWithoutStoresInput, CurrencyUncheckedUpdateWithoutStoresInput>
    create: XOR<CurrencyCreateWithoutStoresInput, CurrencyUncheckedCreateWithoutStoresInput>
    where?: CurrencyWhereInput
  }

  export type CurrencyUpdateToOneWithWhereWithoutStoresInput = {
    where?: CurrencyWhereInput
    data: XOR<CurrencyUpdateWithoutStoresInput, CurrencyUncheckedUpdateWithoutStoresInput>
  }

  export type CurrencyUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
    countries?: CountryUpdateManyWithoutCurrencyNestedInput
  }

  export type CurrencyUncheckedUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: NullableIntFieldUpdateOperationsInput | number | null
    demonym?: NullableStringFieldUpdateOperationsInput | string | null
    majorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    majorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOnum?: NullableIntFieldUpdateOperationsInput | number | null
    symbolNative?: StringFieldUpdateOperationsInput | string
    minorSingle?: NullableStringFieldUpdateOperationsInput | string | null
    minorPlural?: NullableStringFieldUpdateOperationsInput | string | null
    ISOdigits?: NullableIntFieldUpdateOperationsInput | number | null
    numToBasic?: NullableIntFieldUpdateOperationsInput | number | null
    countries?: CountryUncheckedUpdateManyWithoutCurrencyNestedInput
  }

  export type BusinessRegistrationUpsertWithWhereUniqueWithoutStoreInput = {
    where: BusinessRegistrationWhereUniqueInput
    update: XOR<BusinessRegistrationUpdateWithoutStoreInput, BusinessRegistrationUncheckedUpdateWithoutStoreInput>
    create: XOR<BusinessRegistrationCreateWithoutStoreInput, BusinessRegistrationUncheckedCreateWithoutStoreInput>
  }

  export type BusinessRegistrationUpdateWithWhereUniqueWithoutStoreInput = {
    where: BusinessRegistrationWhereUniqueInput
    data: XOR<BusinessRegistrationUpdateWithoutStoreInput, BusinessRegistrationUncheckedUpdateWithoutStoreInput>
  }

  export type BusinessRegistrationUpdateManyWithWhereWithoutStoreInput = {
    where: BusinessRegistrationScalarWhereInput
    data: XOR<BusinessRegistrationUpdateManyMutationInput, BusinessRegistrationUncheckedUpdateManyWithoutStoreInput>
  }

  export type ReceiptUpsertWithWhereUniqueWithoutStoreInput = {
    where: ReceiptWhereUniqueInput
    update: XOR<ReceiptUpdateWithoutStoreInput, ReceiptUncheckedUpdateWithoutStoreInput>
    create: XOR<ReceiptCreateWithoutStoreInput, ReceiptUncheckedCreateWithoutStoreInput>
  }

  export type ReceiptUpdateWithWhereUniqueWithoutStoreInput = {
    where: ReceiptWhereUniqueInput
    data: XOR<ReceiptUpdateWithoutStoreInput, ReceiptUncheckedUpdateWithoutStoreInput>
  }

  export type ReceiptUpdateManyWithWhereWithoutStoreInput = {
    where: ReceiptScalarWhereInput
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyWithoutStoreInput>
  }

  export type BusinessUserAccessUpsertWithWhereUniqueWithoutStoreInput = {
    where: BusinessUserAccessWhereUniqueInput
    update: XOR<BusinessUserAccessUpdateWithoutStoreInput, BusinessUserAccessUncheckedUpdateWithoutStoreInput>
    create: XOR<BusinessUserAccessCreateWithoutStoreInput, BusinessUserAccessUncheckedCreateWithoutStoreInput>
  }

  export type BusinessUserAccessUpdateWithWhereUniqueWithoutStoreInput = {
    where: BusinessUserAccessWhereUniqueInput
    data: XOR<BusinessUserAccessUpdateWithoutStoreInput, BusinessUserAccessUncheckedUpdateWithoutStoreInput>
  }

  export type BusinessUserAccessUpdateManyWithWhereWithoutStoreInput = {
    where: BusinessUserAccessScalarWhereInput
    data: XOR<BusinessUserAccessUpdateManyMutationInput, BusinessUserAccessUncheckedUpdateManyWithoutStoreInput>
  }

  export type ConsumerCreateWithoutReceiptsInput = {
    id?: string
    barcode: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConsumerProfileInput
  }

  export type ConsumerUncheckedCreateWithoutReceiptsInput = {
    id?: string
    barcode: string
    userId: string
    gender?: $Enums.Gender | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsumerCreateOrConnectWithoutReceiptsInput = {
    where: ConsumerWhereUniqueInput
    create: XOR<ConsumerCreateWithoutReceiptsInput, ConsumerUncheckedCreateWithoutReceiptsInput>
  }

  export type StoreCreateWithoutReceiptsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutStoresInput
    region?: RegionCreateNestedOneWithoutStoresInput
    country: CountryCreateNestedOneWithoutStoresInput
    currency: CurrencyCreateNestedOneWithoutStoresInput
    businessRegistrations?: BusinessRegistrationCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutReceiptsInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    businessRegistrations?: BusinessRegistrationUncheckedCreateNestedManyWithoutStoreInput
    userAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutReceiptsInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutReceiptsInput, StoreUncheckedCreateWithoutReceiptsInput>
  }

  export type ReceiptItemCreateWithoutReceiptInput = {
    id?: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    category?: string | null
    quantity: number
    unitPrice: number
    itemTotal: number
    itemDiscount?: number | null
    taxAmount: number
    finalAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemUncheckedCreateWithoutReceiptInput = {
    id?: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    category?: string | null
    quantity: number
    unitPrice: number
    itemTotal: number
    itemDiscount?: number | null
    taxAmount: number
    finalAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemCreateOrConnectWithoutReceiptInput = {
    where: ReceiptItemWhereUniqueInput
    create: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptItemCreateManyReceiptInputEnvelope = {
    data: ReceiptItemCreateManyReceiptInput | ReceiptItemCreateManyReceiptInput[]
    skipDuplicates?: boolean
  }

  export type ReceiptPaymentCreateWithoutReceiptInput = {
    id?: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    authCode?: string | null
    paymentMethod?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentUncheckedCreateWithoutReceiptInput = {
    id?: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    authCode?: string | null
    paymentMethod?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentCreateOrConnectWithoutReceiptInput = {
    where: ReceiptPaymentWhereUniqueInput
    create: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptPaymentCreateManyReceiptInputEnvelope = {
    data: ReceiptPaymentCreateManyReceiptInput | ReceiptPaymentCreateManyReceiptInput[]
    skipDuplicates?: boolean
  }

  export type ReceiptTaxCreateWithoutReceiptInput = {
    id?: string
    taxType: $Enums.TaxType
    taxName: string
    taxRate: number
    taxableAmount: number
    taxAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptTaxUncheckedCreateWithoutReceiptInput = {
    id?: string
    taxType: $Enums.TaxType
    taxName: string
    taxRate: number
    taxableAmount: number
    taxAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptTaxCreateOrConnectWithoutReceiptInput = {
    where: ReceiptTaxWhereUniqueInput
    create: XOR<ReceiptTaxCreateWithoutReceiptInput, ReceiptTaxUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptTaxCreateManyReceiptInputEnvelope = {
    data: ReceiptTaxCreateManyReceiptInput | ReceiptTaxCreateManyReceiptInput[]
    skipDuplicates?: boolean
  }

  export type ConsumerUpsertWithoutReceiptsInput = {
    update: XOR<ConsumerUpdateWithoutReceiptsInput, ConsumerUncheckedUpdateWithoutReceiptsInput>
    create: XOR<ConsumerCreateWithoutReceiptsInput, ConsumerUncheckedCreateWithoutReceiptsInput>
    where?: ConsumerWhereInput
  }

  export type ConsumerUpdateToOneWithWhereWithoutReceiptsInput = {
    where?: ConsumerWhereInput
    data: XOR<ConsumerUpdateWithoutReceiptsInput, ConsumerUncheckedUpdateWithoutReceiptsInput>
  }

  export type ConsumerUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConsumerProfileNestedInput
  }

  export type ConsumerUncheckedUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUpsertWithoutReceiptsInput = {
    update: XOR<StoreUpdateWithoutReceiptsInput, StoreUncheckedUpdateWithoutReceiptsInput>
    create: XOR<StoreCreateWithoutReceiptsInput, StoreUncheckedCreateWithoutReceiptsInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutReceiptsInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutReceiptsInput, StoreUncheckedUpdateWithoutReceiptsInput>
  }

  export type StoreUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    region?: RegionUpdateOneWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoresNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoresNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type ReceiptItemUpsertWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptItemWhereUniqueInput
    update: XOR<ReceiptItemUpdateWithoutReceiptInput, ReceiptItemUncheckedUpdateWithoutReceiptInput>
    create: XOR<ReceiptItemCreateWithoutReceiptInput, ReceiptItemUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptItemUpdateWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptItemWhereUniqueInput
    data: XOR<ReceiptItemUpdateWithoutReceiptInput, ReceiptItemUncheckedUpdateWithoutReceiptInput>
  }

  export type ReceiptItemUpdateManyWithWhereWithoutReceiptInput = {
    where: ReceiptItemScalarWhereInput
    data: XOR<ReceiptItemUpdateManyMutationInput, ReceiptItemUncheckedUpdateManyWithoutReceiptInput>
  }

  export type ReceiptItemScalarWhereInput = {
    AND?: ReceiptItemScalarWhereInput | ReceiptItemScalarWhereInput[]
    OR?: ReceiptItemScalarWhereInput[]
    NOT?: ReceiptItemScalarWhereInput | ReceiptItemScalarWhereInput[]
    id?: StringFilter<"ReceiptItem"> | string
    receiptId?: StringFilter<"ReceiptItem"> | string
    name?: StringFilter<"ReceiptItem"> | string
    sku?: StringNullableFilter<"ReceiptItem"> | string | null
    description?: StringNullableFilter<"ReceiptItem"> | string | null
    modelNumber?: StringNullableFilter<"ReceiptItem"> | string | null
    category?: StringNullableFilter<"ReceiptItem"> | string | null
    quantity?: FloatFilter<"ReceiptItem"> | number
    unitPrice?: FloatFilter<"ReceiptItem"> | number
    itemTotal?: FloatFilter<"ReceiptItem"> | number
    itemDiscount?: FloatNullableFilter<"ReceiptItem"> | number | null
    taxAmount?: FloatFilter<"ReceiptItem"> | number
    finalAmount?: FloatFilter<"ReceiptItem"> | number
    createdAt?: DateTimeFilter<"ReceiptItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptItem"> | Date | string
  }

  export type ReceiptPaymentUpsertWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptPaymentWhereUniqueInput
    update: XOR<ReceiptPaymentUpdateWithoutReceiptInput, ReceiptPaymentUncheckedUpdateWithoutReceiptInput>
    create: XOR<ReceiptPaymentCreateWithoutReceiptInput, ReceiptPaymentUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptPaymentUpdateWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptPaymentWhereUniqueInput
    data: XOR<ReceiptPaymentUpdateWithoutReceiptInput, ReceiptPaymentUncheckedUpdateWithoutReceiptInput>
  }

  export type ReceiptPaymentUpdateManyWithWhereWithoutReceiptInput = {
    where: ReceiptPaymentScalarWhereInput
    data: XOR<ReceiptPaymentUpdateManyMutationInput, ReceiptPaymentUncheckedUpdateManyWithoutReceiptInput>
  }

  export type ReceiptPaymentScalarWhereInput = {
    AND?: ReceiptPaymentScalarWhereInput | ReceiptPaymentScalarWhereInput[]
    OR?: ReceiptPaymentScalarWhereInput[]
    NOT?: ReceiptPaymentScalarWhereInput | ReceiptPaymentScalarWhereInput[]
    id?: StringFilter<"ReceiptPayment"> | string
    receiptId?: StringFilter<"ReceiptPayment"> | string
    paymentType?: EnumPaymentTypeFilter<"ReceiptPayment"> | $Enums.PaymentType
    amount?: FloatFilter<"ReceiptPayment"> | number
    terminal?: StringNullableFilter<"ReceiptPayment"> | string | null
    reference?: StringNullableFilter<"ReceiptPayment"> | string | null
    cardNo?: StringNullableFilter<"ReceiptPayment"> | string | null
    authCode?: StringNullableFilter<"ReceiptPayment"> | string | null
    paymentMethod?: StringNullableFilter<"ReceiptPayment"> | string | null
    createdAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptPayment"> | Date | string
  }

  export type ReceiptTaxUpsertWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptTaxWhereUniqueInput
    update: XOR<ReceiptTaxUpdateWithoutReceiptInput, ReceiptTaxUncheckedUpdateWithoutReceiptInput>
    create: XOR<ReceiptTaxCreateWithoutReceiptInput, ReceiptTaxUncheckedCreateWithoutReceiptInput>
  }

  export type ReceiptTaxUpdateWithWhereUniqueWithoutReceiptInput = {
    where: ReceiptTaxWhereUniqueInput
    data: XOR<ReceiptTaxUpdateWithoutReceiptInput, ReceiptTaxUncheckedUpdateWithoutReceiptInput>
  }

  export type ReceiptTaxUpdateManyWithWhereWithoutReceiptInput = {
    where: ReceiptTaxScalarWhereInput
    data: XOR<ReceiptTaxUpdateManyMutationInput, ReceiptTaxUncheckedUpdateManyWithoutReceiptInput>
  }

  export type ReceiptTaxScalarWhereInput = {
    AND?: ReceiptTaxScalarWhereInput | ReceiptTaxScalarWhereInput[]
    OR?: ReceiptTaxScalarWhereInput[]
    NOT?: ReceiptTaxScalarWhereInput | ReceiptTaxScalarWhereInput[]
    id?: StringFilter<"ReceiptTax"> | string
    receiptId?: StringFilter<"ReceiptTax"> | string
    taxType?: EnumTaxTypeFilter<"ReceiptTax"> | $Enums.TaxType
    taxName?: StringFilter<"ReceiptTax"> | string
    taxRate?: FloatFilter<"ReceiptTax"> | number
    taxableAmount?: FloatFilter<"ReceiptTax"> | number
    taxAmount?: FloatFilter<"ReceiptTax"> | number
    createdAt?: DateTimeFilter<"ReceiptTax"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptTax"> | Date | string
  }

  export type ReceiptCreateWithoutReceiptTaxesInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutReceiptTaxesInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutReceiptTaxesInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutReceiptTaxesInput, ReceiptUncheckedCreateWithoutReceiptTaxesInput>
  }

  export type ReceiptUpsertWithoutReceiptTaxesInput = {
    update: XOR<ReceiptUpdateWithoutReceiptTaxesInput, ReceiptUncheckedUpdateWithoutReceiptTaxesInput>
    create: XOR<ReceiptCreateWithoutReceiptTaxesInput, ReceiptUncheckedCreateWithoutReceiptTaxesInput>
    where?: ReceiptWhereInput
  }

  export type ReceiptUpdateToOneWithWhereWithoutReceiptTaxesInput = {
    where?: ReceiptWhereInput
    data: XOR<ReceiptUpdateWithoutReceiptTaxesInput, ReceiptUncheckedUpdateWithoutReceiptTaxesInput>
  }

  export type ReceiptUpdateWithoutReceiptTaxesInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutReceiptTaxesInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptCreateWithoutReceiptPaymentsInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptItems?: ReceiptItemCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutReceiptPaymentsInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptItems?: ReceiptItemUncheckedCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutReceiptPaymentsInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutReceiptPaymentsInput, ReceiptUncheckedCreateWithoutReceiptPaymentsInput>
  }

  export type ReceiptUpsertWithoutReceiptPaymentsInput = {
    update: XOR<ReceiptUpdateWithoutReceiptPaymentsInput, ReceiptUncheckedUpdateWithoutReceiptPaymentsInput>
    create: XOR<ReceiptCreateWithoutReceiptPaymentsInput, ReceiptUncheckedCreateWithoutReceiptPaymentsInput>
    where?: ReceiptWhereInput
  }

  export type ReceiptUpdateToOneWithWhereWithoutReceiptPaymentsInput = {
    where?: ReceiptWhereInput
    data: XOR<ReceiptUpdateWithoutReceiptPaymentsInput, ReceiptUncheckedUpdateWithoutReceiptPaymentsInput>
  }

  export type ReceiptUpdateWithoutReceiptPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutReceiptPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptCreateWithoutReceiptItemsInput = {
    id?: string
    receiptNumber: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consumer: ConsumerCreateNestedOneWithoutReceiptsInput
    store: StoreCreateNestedOneWithoutReceiptsInput
    receiptPayments?: ReceiptPaymentCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutReceiptItemsInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    storeId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receiptPayments?: ReceiptPaymentUncheckedCreateNestedManyWithoutReceiptInput
    receiptTaxes?: ReceiptTaxUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutReceiptItemsInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutReceiptItemsInput, ReceiptUncheckedCreateWithoutReceiptItemsInput>
  }

  export type ReceiptUpsertWithoutReceiptItemsInput = {
    update: XOR<ReceiptUpdateWithoutReceiptItemsInput, ReceiptUncheckedUpdateWithoutReceiptItemsInput>
    create: XOR<ReceiptCreateWithoutReceiptItemsInput, ReceiptUncheckedCreateWithoutReceiptItemsInput>
    where?: ReceiptWhereInput
  }

  export type ReceiptUpdateToOneWithWhereWithoutReceiptItemsInput = {
    where?: ReceiptWhereInput
    data: XOR<ReceiptUpdateWithoutReceiptItemsInput, ReceiptUncheckedUpdateWithoutReceiptItemsInput>
  }

  export type ReceiptUpdateWithoutReceiptItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutReceiptItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    region?: RegionCreateNestedOneWithoutUsersInput
    consumerProfile?: ConsumerCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessCreateNestedManyWithoutUserInput
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consumerProfile?: ConsumerUncheckedCreateNestedOneWithoutUserInput
    businessAccess?: BusinessUserAccessUncheckedCreateNestedManyWithoutUserInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdAccessRecords?: BusinessUserAccessUncheckedCreateNestedManyWithoutCreatedByInput
    emailChangeRecords?: EmailChangeRecordUncheckedCreateNestedManyWithoutUserInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    expiresAt: Date | string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type AccountCreateManyUserInput = {
    id?: string
    createdAt: Date | string
    updatedAt: Date | string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
  }

  export type BusinessUserAccessCreateManyUserInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    brandId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type UserCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    regionId?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
  }

  export type BusinessUserAccessCreateManyCreatedByInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    brandId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailChangeRecordCreateManyUserInput = {
    id?: string
    email: string
    newEmail: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
  }

  export type PhoneChangeRecordCreateManyUserInput = {
    id?: string
    phoneNumber?: string | null
    newPhoneNumber: string
    otp: string
    expiresAt: Date | string
    attempts?: number
    createdAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: number
    action: string
    category: string
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: string | null
    createdAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessUserAccessUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneWithoutUserAccessNestedInput
    brand?: BrandUpdateOneWithoutUserAccessNestedInput
    store?: StoreUpdateOneWithoutUserAccessNestedInput
    createdBy?: UserUpdateOneWithoutCreatedAccessRecordsNestedInput
  }

  export type BusinessUserAccessUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    region?: RegionUpdateOneWithoutUsersNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type BusinessUserAccessUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBusinessAccessNestedInput
    merchant?: MerchantUpdateOneWithoutUserAccessNestedInput
    brand?: BrandUpdateOneWithoutUserAccessNestedInput
    store?: StoreUpdateOneWithoutUserAccessNestedInput
  }

  export type BusinessUserAccessUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailChangeRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    newEmail?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailChangeRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    newEmail?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailChangeRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    newEmail?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneChangeRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    newPhoneNumber?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneChangeRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    newPhoneNumber?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneChangeRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    newPhoneNumber?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: JsonNullValueInput | InputJsonValue
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptCreateManyConsumerInput = {
    id?: string
    receiptNumber: string
    storeId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptUpdateWithoutConsumerInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: StoreUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutConsumerInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateManyWithoutConsumerInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryCreateManyCurrencyInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    continentId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreCreateManyCurrencyInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CountryUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    continent?: ContinentUpdateOneRequiredWithoutCountriesNestedInput
    regions?: RegionUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUpdateManyWithoutCountryNestedInput
    brands?: BrandUpdateManyWithoutCountryNestedInput
    stores?: StoreUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    continentId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    regions?: RegionUncheckedUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    brands?: BrandUncheckedUpdateManyWithoutCountryNestedInput
    stores?: StoreUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateManyWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    continentId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    region?: RegionUpdateOneWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoresNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateManyWithoutCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryCreateManyContinentInput = {
    id?: string
    isoCode: string
    isoCode3: string
    name: string
    flag: string
    latitude: number
    longitude: number
    currencyId: string
    phonePrefix?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CountryUpdateWithoutContinentInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: CurrencyUpdateOneRequiredWithoutCountriesNestedInput
    regions?: RegionUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUpdateManyWithoutCountryNestedInput
    brands?: BrandUpdateManyWithoutCountryNestedInput
    stores?: StoreUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutContinentInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    regions?: RegionUncheckedUpdateManyWithoutCountryNestedInput
    merchants?: MerchantUncheckedUpdateManyWithoutCountryNestedInput
    brands?: BrandUncheckedUpdateManyWithoutCountryNestedInput
    stores?: StoreUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateManyWithoutContinentInput = {
    id?: StringFieldUpdateOperationsInput | string
    isoCode?: StringFieldUpdateOperationsInput | string
    isoCode3?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    flag?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    currencyId?: StringFieldUpdateOperationsInput | string
    phonePrefix?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionCreateManyCountryInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MerchantCreateManyCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateManyCountryInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreCreateManyCountryInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUpdateManyWithoutRegionNestedInput
    brands?: BrandUpdateManyWithoutRegionNestedInput
    stores?: StoreUpdateManyWithoutRegionNestedInput
    users?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchants?: MerchantUncheckedUpdateManyWithoutRegionNestedInput
    brands?: BrandUncheckedUpdateManyWithoutRegionNestedInput
    stores?: StoreUncheckedUpdateManyWithoutRegionNestedInput
    users?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutMerchantsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutMerchantNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutMerchantNestedInput
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    region?: RegionUpdateOneWithoutBrandsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutBrandNestedInput
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    region?: RegionUpdateOneWithoutStoresNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoresNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantCreateManyRegionInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    phoneNumber: string
    genericEmail: string
    invoiceEmail?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    countryId: string
    timezone?: string | null
    logo?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateManyRegionInput = {
    id?: string
    status?: $Enums.Status
    merchantId: string
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreCreateManyRegionInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    brandId: string
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyRegionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    lastName: string
    email: string
    emailVerified?: boolean
    image?: string | null
    role?: $Enums.UserRole
    postalCode?: string | null
    city?: string | null
    phoneNumber?: string | null
    phoneVerified?: boolean
    timezone?: string | null
    locale?: string | null
    status?: $Enums.Status
    createdById?: string | null
  }

  export type MerchantUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutMerchantsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutMerchantNestedInput
    brands?: BrandUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutMerchantNestedInput
    brands?: BrandUncheckedUpdateManyWithoutMerchantNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    phoneNumber?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneRequiredWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutBrandNestedInput
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    merchantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoresNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoresNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    brandId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUpdateManyWithoutUserNestedInput
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consumerProfile?: ConsumerUncheckedUpdateOneWithoutUserNestedInput
    businessAccess?: BusinessUserAccessUncheckedUpdateManyWithoutUserNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAccessRecords?: BusinessUserAccessUncheckedUpdateManyWithoutCreatedByNestedInput
    emailChangeRecords?: EmailChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    phoneChangeRecords?: PhoneChangeRecordUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessRegistrationCreateManyMerchantInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    brandId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateManyMerchantInput = {
    id?: string
    status?: $Enums.Status
    name: string
    slug: string
    genericEmail: string
    invoiceEmail?: string | null
    tradingAsName?: string | null
    logo?: string | null
    website?: string | null
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    postalCode: string
    regionId?: string | null
    countryId: string
    phoneNumber: string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessUserAccessCreateManyMerchantInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    brandId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessRegistrationUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutBusinessRegistrationsNestedInput
    store?: StoreUpdateOneWithoutBusinessRegistrationsNestedInput
  }

  export type BusinessRegistrationUncheckedUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessRegistrationUncheckedUpdateManyWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutBrandsNestedInput
    country?: CountryUpdateOneRequiredWithoutBrandsNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutBrandNestedInput
    stores?: StoreUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutBrandNestedInput
    stores?: StoreUncheckedUpdateManyWithoutBrandNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    genericEmail?: StringFieldUpdateOperationsInput | string
    invoiceEmail?: NullableStringFieldUpdateOperationsInput | string | null
    tradingAsName?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessUserAccessUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBusinessAccessNestedInput
    brand?: BrandUpdateOneWithoutUserAccessNestedInput
    store?: StoreUpdateOneWithoutUserAccessNestedInput
    createdBy?: UserUpdateOneWithoutCreatedAccessRecordsNestedInput
  }

  export type BusinessUserAccessUncheckedUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessRegistrationCreateManyBrandInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    merchantId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreCreateManyBrandInput = {
    id?: string
    name: string
    slug: string
    status?: $Enums.Status
    addressLine1: string
    addressLine2?: string | null
    addressLine3?: string | null
    city: string
    regionId?: string | null
    postalCode: string
    countryId: string
    formattedAddress?: string | null
    latitude?: number | null
    longitude?: number | null
    phoneNumber?: string | null
    timezone?: string | null
    currencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessUserAccessCreateManyBrandInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    storeId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessRegistrationUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneWithoutBusinessRegistrationsNestedInput
    store?: StoreUpdateOneWithoutBusinessRegistrationsNestedInput
  }

  export type BusinessRegistrationUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessRegistrationUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneWithoutStoresNestedInput
    country?: CountryUpdateOneRequiredWithoutStoresNestedInput
    currency?: CurrencyUpdateOneRequiredWithoutStoresNestedInput
    businessRegistrations?: BusinessRegistrationUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessRegistrations?: BusinessRegistrationUncheckedUpdateManyWithoutStoreNestedInput
    receipts?: ReceiptUncheckedUpdateManyWithoutStoreNestedInput
    userAccess?: BusinessUserAccessUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine3?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: StringFieldUpdateOperationsInput | string
    countryId?: StringFieldUpdateOperationsInput | string
    formattedAddress?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    currencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessUserAccessUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBusinessAccessNestedInput
    merchant?: MerchantUpdateOneWithoutUserAccessNestedInput
    store?: StoreUpdateOneWithoutUserAccessNestedInput
    createdBy?: UserUpdateOneWithoutCreatedAccessRecordsNestedInput
  }

  export type BusinessUserAccessUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessRegistrationCreateManyStoreInput = {
    id?: string
    type: $Enums.BusinessRegistrationType
    number: string
    issuingBody?: string | null
    validFrom?: Date | string | null
    validUntil?: Date | string | null
    isActive?: boolean
    merchantId?: string | null
    brandId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptCreateManyStoreInput = {
    id?: string
    receiptNumber: string
    consumerId: string
    subTotal: number
    totalTax: number
    cardSurcharge?: number | null
    discount?: number | null
    tip?: number | null
    roundingAdjustment?: number | null
    finalTotal: number
    otherInformation?: ReceiptCreateotherInformationInput | string[]
    receiptDateTime: Date | string
    timezone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessUserAccessCreateManyStoreInput = {
    id?: string
    userId: string
    accessLevel: $Enums.AccessLevel
    permissions?: BusinessUserAccessCreatepermissionsInput | $Enums.Permission[]
    jobTitle?: string | null
    merchantId?: string | null
    brandId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type BusinessRegistrationUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneWithoutBusinessRegistrationsNestedInput
    brand?: BrandUpdateOneWithoutBusinessRegistrationsNestedInput
  }

  export type BusinessRegistrationUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessRegistrationUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBusinessRegistrationTypeFieldUpdateOperationsInput | $Enums.BusinessRegistrationType
    number?: StringFieldUpdateOperationsInput | string
    issuingBody?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumer?: ConsumerUpdateOneRequiredWithoutReceiptsNestedInput
    receiptItems?: ReceiptItemUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiptItems?: ReceiptItemUncheckedUpdateManyWithoutReceiptNestedInput
    receiptPayments?: ReceiptPaymentUncheckedUpdateManyWithoutReceiptNestedInput
    receiptTaxes?: ReceiptTaxUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiptNumber?: StringFieldUpdateOperationsInput | string
    consumerId?: StringFieldUpdateOperationsInput | string
    subTotal?: FloatFieldUpdateOperationsInput | number
    totalTax?: FloatFieldUpdateOperationsInput | number
    cardSurcharge?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    tip?: NullableFloatFieldUpdateOperationsInput | number | null
    roundingAdjustment?: NullableFloatFieldUpdateOperationsInput | number | null
    finalTotal?: FloatFieldUpdateOperationsInput | number
    otherInformation?: ReceiptUpdateotherInformationInput | string[]
    receiptDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessUserAccessUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBusinessAccessNestedInput
    merchant?: MerchantUpdateOneWithoutUserAccessNestedInput
    brand?: BrandUpdateOneWithoutUserAccessNestedInput
    createdBy?: UserUpdateOneWithoutCreatedAccessRecordsNestedInput
  }

  export type BusinessUserAccessUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessUserAccessUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    permissions?: BusinessUserAccessUpdatepermissionsInput | $Enums.Permission[]
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReceiptItemCreateManyReceiptInput = {
    id?: string
    name: string
    sku?: string | null
    description?: string | null
    modelNumber?: string | null
    category?: string | null
    quantity: number
    unitPrice: number
    itemTotal: number
    itemDiscount?: number | null
    taxAmount: number
    finalAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptPaymentCreateManyReceiptInput = {
    id?: string
    paymentType: $Enums.PaymentType
    amount: number
    terminal?: string | null
    reference?: string | null
    cardNo?: string | null
    authCode?: string | null
    paymentMethod?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptTaxCreateManyReceiptInput = {
    id?: string
    taxType: $Enums.TaxType
    taxName: string
    taxRate: number
    taxableAmount: number
    taxAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReceiptItemUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    itemTotal?: FloatFieldUpdateOperationsInput | number
    itemDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    taxAmount?: FloatFieldUpdateOperationsInput | number
    finalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemUncheckedUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    itemTotal?: FloatFieldUpdateOperationsInput | number
    itemDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    taxAmount?: FloatFieldUpdateOperationsInput | number
    finalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptItemUncheckedUpdateManyWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    modelNumber?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: FloatFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    itemTotal?: FloatFieldUpdateOperationsInput | number
    itemDiscount?: NullableFloatFieldUpdateOperationsInput | number | null
    taxAmount?: FloatFieldUpdateOperationsInput | number
    finalAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentUncheckedUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptPaymentUncheckedUpdateManyWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    amount?: FloatFieldUpdateOperationsInput | number
    terminal?: NullableStringFieldUpdateOperationsInput | string | null
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    cardNo?: NullableStringFieldUpdateOperationsInput | string | null
    authCode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptTaxUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxType?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    taxName?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    taxableAmount?: FloatFieldUpdateOperationsInput | number
    taxAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptTaxUncheckedUpdateWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxType?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    taxName?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    taxableAmount?: FloatFieldUpdateOperationsInput | number
    taxAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceiptTaxUncheckedUpdateManyWithoutReceiptInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxType?: EnumTaxTypeFieldUpdateOperationsInput | $Enums.TaxType
    taxName?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    taxableAmount?: FloatFieldUpdateOperationsInput | number
    taxAmount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}