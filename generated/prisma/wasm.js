
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  emailVerified: 'emailVerified',
  emailVerifiedTime: 'emailVerifiedTime',
  passwordVerified: 'passwordVerified',
  postcode: 'postcode',
  city: 'city',
  stateId: 'stateId',
  phoneNumber: 'phoneNumber',
  password: 'password',
  image: 'image',
  role: 'role',
  totpKey: 'totpKey',
  recoveryCodes: 'recoveryCodes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  twoFactorVerified: 'twoFactorVerified',
  userId: 'userId',
  rememberMe: 'rememberMe'
};

exports.Prisma.EmailVerificationRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  expiresAt: 'expiresAt',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  expiresAt: 'expiresAt',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsumerScalarFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  userId: 'userId',
  gender: 'gender',
  dateOfBirth: 'dateOfBirth',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerchantUserScalarFieldEnum = {
  id: 'id',
  jobTitle: 'jobTitle',
  merchantId: 'merchantId',
  merchantRole: 'merchantRole',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminUserScalarFieldEnum = {
  id: 'id',
  jobTitle: 'jobTitle',
  adminRole: 'adminRole',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandUserScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  merchantUserId: 'merchantUserId',
  brandRole: 'brandRole',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CurrencyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  demonym: 'demonym',
  majorSingle: 'majorSingle',
  majorPlural: 'majorPlural',
  ISOnum: 'ISOnum',
  symbol: 'symbol',
  symbolNative: 'symbolNative',
  minorSingle: 'minorSingle',
  minorPlural: 'minorPlural',
  ISOdigits: 'ISOdigits',
  decimals: 'decimals',
  numToBasic: 'numToBasic'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  isoCode: 'isoCode',
  name: 'name',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  isoCode: 'isoCode',
  name: 'name',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerchantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  status: 'status',
  phoneNumber: 'phoneNumber',
  genericEmail: 'genericEmail',
  invoiceEmail: 'invoiceEmail',
  address1: 'address1',
  address2: 'address2',
  suburb: 'suburb',
  postcode: 'postcode',
  stateId: 'stateId',
  countryId: 'countryId',
  abn: 'abn',
  acn: 'acn',
  logoUrl: 'logoUrl',
  primaryContactId: 'primaryContactId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  status: 'status',
  merchantId: 'merchantId',
  name: 'name',
  slug: 'slug',
  genericEmail: 'genericEmail',
  invoiceEmail: 'invoiceEmail',
  tradingAsName: 'tradingAsName',
  logoUrl: 'logoUrl',
  address1: 'address1',
  address2: 'address2',
  suburb: 'suburb',
  postcode: 'postcode',
  stateId: 'stateId',
  countryId: 'countryId',
  abn: 'abn',
  acn: 'acn',
  phoneNumber: 'phoneNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  primaryContactId: 'primaryContactId'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  status: 'status',
  brandId: 'brandId',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  region: 'region',
  postalCode: 'postalCode',
  countryId: 'countryId',
  formattedAddress: 'formattedAddress',
  latitude: 'latitude',
  longitude: 'longitude',
  abn: 'abn',
  acn: 'acn',
  phoneNumber: 'phoneNumber',
  currencyId: 'currencyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiptScalarFieldEnum = {
  id: 'id',
  receiptNumber: 'receiptNumber',
  consumerId: 'consumerId',
  storeId: 'storeId',
  subTotal: 'subTotal',
  tax: 'tax',
  cardSurcharge: 'cardSurcharge',
  otherInformation: 'otherInformation',
  receiptDateTime: 'receiptDateTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiptPaymentScalarFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  paymentType: 'paymentType',
  amount: 'amount',
  terminal: 'terminal',
  reference: 'reference',
  cardNo: 'cardNo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiptItemScalarFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  name: 'name',
  sku: 'sku',
  description: 'description',
  modelNumber: 'modelNumber',
  quantity: 'quantity',
  itemCost: 'itemCost',
  itemTax: 'itemTax',
  subTotal: 'subTotal',
  tax: 'tax',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  postcode: 'postcode',
  city: 'city',
  stateId: 'stateId',
  phoneNumber: 'phoneNumber',
  password: 'password',
  image: 'image',
  recoveryCodes: 'recoveryCodes'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.EmailVerificationRequestOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  code: 'code'
};

exports.Prisma.PasswordResetSessionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  code: 'code'
};

exports.Prisma.ConsumerOrderByRelevanceFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  userId: 'userId'
};

exports.Prisma.MerchantUserOrderByRelevanceFieldEnum = {
  id: 'id',
  jobTitle: 'jobTitle',
  merchantId: 'merchantId',
  userId: 'userId'
};

exports.Prisma.AdminUserOrderByRelevanceFieldEnum = {
  id: 'id',
  jobTitle: 'jobTitle',
  userId: 'userId'
};

exports.Prisma.BrandUserOrderByRelevanceFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  merchantUserId: 'merchantUserId'
};

exports.Prisma.CurrencyOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  demonym: 'demonym',
  majorSingle: 'majorSingle',
  majorPlural: 'majorPlural',
  symbol: 'symbol',
  symbolNative: 'symbolNative',
  minorSingle: 'minorSingle',
  minorPlural: 'minorPlural'
};

exports.Prisma.CountryOrderByRelevanceFieldEnum = {
  id: 'id',
  isoCode: 'isoCode',
  name: 'name',
  currency: 'currency'
};

exports.Prisma.StateOrderByRelevanceFieldEnum = {
  id: 'id',
  isoCode: 'isoCode',
  name: 'name',
  countryId: 'countryId'
};

exports.Prisma.MerchantOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  phoneNumber: 'phoneNumber',
  genericEmail: 'genericEmail',
  invoiceEmail: 'invoiceEmail',
  address1: 'address1',
  address2: 'address2',
  suburb: 'suburb',
  postcode: 'postcode',
  stateId: 'stateId',
  countryId: 'countryId',
  abn: 'abn',
  acn: 'acn',
  logoUrl: 'logoUrl',
  primaryContactId: 'primaryContactId'
};

exports.Prisma.BrandOrderByRelevanceFieldEnum = {
  id: 'id',
  merchantId: 'merchantId',
  name: 'name',
  slug: 'slug',
  genericEmail: 'genericEmail',
  invoiceEmail: 'invoiceEmail',
  tradingAsName: 'tradingAsName',
  logoUrl: 'logoUrl',
  address1: 'address1',
  address2: 'address2',
  suburb: 'suburb',
  postcode: 'postcode',
  stateId: 'stateId',
  countryId: 'countryId',
  abn: 'abn',
  acn: 'acn',
  phoneNumber: 'phoneNumber',
  primaryContactId: 'primaryContactId'
};

exports.Prisma.StoreOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  brandId: 'brandId',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  region: 'region',
  postalCode: 'postalCode',
  countryId: 'countryId',
  formattedAddress: 'formattedAddress',
  abn: 'abn',
  acn: 'acn',
  phoneNumber: 'phoneNumber',
  currencyId: 'currencyId'
};

exports.Prisma.ReceiptOrderByRelevanceFieldEnum = {
  id: 'id',
  receiptNumber: 'receiptNumber',
  consumerId: 'consumerId',
  storeId: 'storeId',
  otherInformation: 'otherInformation'
};

exports.Prisma.ReceiptPaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  terminal: 'terminal',
  reference: 'reference',
  cardNo: 'cardNo'
};

exports.Prisma.ReceiptItemOrderByRelevanceFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  name: 'name',
  sku: 'sku',
  description: 'description',
  modelNumber: 'modelNumber'
};
exports.Status = exports.$Enums.Status = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  DISABLED: 'DISABLED',
  REJECTED: 'REJECTED'
};

exports.Role = exports.$Enums.Role = {
  CONSUMER: 'CONSUMER',
  MERCHANT: 'MERCHANT',
  ADMIN: 'ADMIN'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  NOTSAY: 'NOTSAY'
};

exports.MerchantRole = exports.$Enums.MerchantRole = {
  ADMIN: 'ADMIN',
  TECHNICAL: 'TECHNICAL',
  ACCOUNTS: 'ACCOUNTS'
};

exports.AdminRole = exports.$Enums.AdminRole = {
  ADMIN: 'ADMIN',
  SALES: 'SALES',
  TECHNICAL: 'TECHNICAL',
  ACCOUNTS: 'ACCOUNTS'
};

exports.BrandRole = exports.$Enums.BrandRole = {
  ADMIN: 'ADMIN',
  TECHNICAL: 'TECHNICAL',
  ACCOUNTS: 'ACCOUNTS'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CASH: 'CASH',
  EFTPOS: 'EFTPOS',
  CREDIT: 'CREDIT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  EmailVerificationRequest: 'EmailVerificationRequest',
  PasswordResetSession: 'PasswordResetSession',
  Consumer: 'Consumer',
  MerchantUser: 'MerchantUser',
  AdminUser: 'AdminUser',
  BrandUser: 'BrandUser',
  Currency: 'Currency',
  Country: 'Country',
  State: 'State',
  Merchant: 'Merchant',
  Brand: 'Brand',
  Store: 'Store',
  Receipt: 'Receipt',
  ReceiptPayment: 'ReceiptPayment',
  ReceiptItem: 'ReceiptItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
