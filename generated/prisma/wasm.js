
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  lastName: 'lastName',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  postalCode: 'postalCode',
  city: 'city',
  regionId: 'regionId',
  phoneNumber: 'phoneNumber',
  phoneVerified: 'phoneVerified',
  timezone: 'timezone',
  locale: 'locale',
  status: 'status',
  createdById: 'createdById'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  impersonatedBy: 'impersonatedBy',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  userId: 'userId'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt'
};

exports.Prisma.EmailChangeRecordScalarFieldEnum = {
  id: 'id',
  email: 'email',
  newEmail: 'newEmail',
  otp: 'otp',
  expiresAt: 'expiresAt',
  attempts: 'attempts',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.PhoneChangeRecordScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  newPhoneNumber: 'newPhoneNumber',
  otp: 'otp',
  expiresAt: 'expiresAt',
  attempts: 'attempts',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.RateLimitScalarFieldEnum = {
  id: 'id',
  key: 'key',
  count: 'count',
  resetTime: 'resetTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsumerScalarFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  userId: 'userId',
  gender: 'gender',
  dateOfBirth: 'dateOfBirth',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessUserAccessScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accessLevel: 'accessLevel',
  permissions: 'permissions',
  jobTitle: 'jobTitle',
  merchantId: 'merchantId',
  brandId: 'brandId',
  storeId: 'storeId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.CurrencyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  symbol: 'symbol',
  decimals: 'decimals',
  demonym: 'demonym',
  majorSingle: 'majorSingle',
  majorPlural: 'majorPlural',
  ISOnum: 'ISOnum',
  symbolNative: 'symbolNative',
  minorSingle: 'minorSingle',
  minorPlural: 'minorPlural',
  ISOdigits: 'ISOdigits',
  numToBasic: 'numToBasic'
};

exports.Prisma.ContinentScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  isoCode: 'isoCode',
  isoCode3: 'isoCode3',
  name: 'name',
  flag: 'flag',
  latitude: 'latitude',
  longitude: 'longitude',
  currencyId: 'currencyId',
  continentId: 'continentId',
  phonePrefix: 'phonePrefix',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessRegistrationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  number: 'number',
  issuingBody: 'issuingBody',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  isActive: 'isActive',
  merchantId: 'merchantId',
  brandId: 'brandId',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerchantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  status: 'status',
  phoneNumber: 'phoneNumber',
  genericEmail: 'genericEmail',
  invoiceEmail: 'invoiceEmail',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  addressLine3: 'addressLine3',
  city: 'city',
  postalCode: 'postalCode',
  regionId: 'regionId',
  countryId: 'countryId',
  timezone: 'timezone',
  logo: 'logo',
  website: 'website',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  status: 'status',
  merchantId: 'merchantId',
  name: 'name',
  slug: 'slug',
  genericEmail: 'genericEmail',
  invoiceEmail: 'invoiceEmail',
  tradingAsName: 'tradingAsName',
  logo: 'logo',
  website: 'website',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  addressLine3: 'addressLine3',
  city: 'city',
  postalCode: 'postalCode',
  regionId: 'regionId',
  countryId: 'countryId',
  phoneNumber: 'phoneNumber',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  status: 'status',
  brandId: 'brandId',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  addressLine3: 'addressLine3',
  city: 'city',
  regionId: 'regionId',
  postalCode: 'postalCode',
  countryId: 'countryId',
  formattedAddress: 'formattedAddress',
  latitude: 'latitude',
  longitude: 'longitude',
  phoneNumber: 'phoneNumber',
  timezone: 'timezone',
  currencyId: 'currencyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiptScalarFieldEnum = {
  id: 'id',
  receiptNumber: 'receiptNumber',
  consumerId: 'consumerId',
  storeId: 'storeId',
  subTotal: 'subTotal',
  totalTax: 'totalTax',
  cardSurcharge: 'cardSurcharge',
  discount: 'discount',
  tip: 'tip',
  roundingAdjustment: 'roundingAdjustment',
  finalTotal: 'finalTotal',
  otherInformation: 'otherInformation',
  receiptDateTime: 'receiptDateTime',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiptTaxScalarFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  taxType: 'taxType',
  taxName: 'taxName',
  taxRate: 'taxRate',
  taxableAmount: 'taxableAmount',
  taxAmount: 'taxAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiptPaymentScalarFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  paymentType: 'paymentType',
  amount: 'amount',
  terminal: 'terminal',
  reference: 'reference',
  cardNo: 'cardNo',
  authCode: 'authCode',
  paymentMethod: 'paymentMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiptItemScalarFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  name: 'name',
  sku: 'sku',
  description: 'description',
  modelNumber: 'modelNumber',
  category: 'category',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  itemTotal: 'itemTotal',
  itemDiscount: 'itemDiscount',
  taxAmount: 'taxAmount',
  finalAmount: 'finalAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  category: 'category',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  sessionId: 'sessionId',
  createdAt: 'createdAt'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  image: 'image',
  imageName: 'imageName',
  imageType: 'imageType',
  relatedEntity: 'relatedEntity',
  bucket: 'bucket',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  lastName: 'lastName',
  email: 'email',
  image: 'image',
  postalCode: 'postalCode',
  city: 'city',
  regionId: 'regionId',
  phoneNumber: 'phoneNumber',
  timezone: 'timezone',
  locale: 'locale',
  createdById: 'createdById'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  impersonatedBy: 'impersonatedBy',
  userId: 'userId'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  scope: 'scope',
  password: 'password',
  userId: 'userId'
};

exports.Prisma.VerificationOrderByRelevanceFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value'
};

exports.Prisma.EmailChangeRecordOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  newEmail: 'newEmail',
  otp: 'otp',
  userId: 'userId'
};

exports.Prisma.PhoneChangeRecordOrderByRelevanceFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  newPhoneNumber: 'newPhoneNumber',
  otp: 'otp',
  userId: 'userId'
};

exports.Prisma.RateLimitOrderByRelevanceFieldEnum = {
  id: 'id',
  key: 'key'
};

exports.Prisma.ConsumerOrderByRelevanceFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  userId: 'userId'
};

exports.Prisma.BusinessUserAccessOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobTitle: 'jobTitle',
  merchantId: 'merchantId',
  brandId: 'brandId',
  storeId: 'storeId',
  createdById: 'createdById'
};

exports.Prisma.CurrencyOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  symbol: 'symbol',
  demonym: 'demonym',
  majorSingle: 'majorSingle',
  majorPlural: 'majorPlural',
  symbolNative: 'symbolNative',
  minorSingle: 'minorSingle',
  minorPlural: 'minorPlural'
};

exports.Prisma.ContinentOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CountryOrderByRelevanceFieldEnum = {
  id: 'id',
  isoCode: 'isoCode',
  isoCode3: 'isoCode3',
  name: 'name',
  flag: 'flag',
  currencyId: 'currencyId',
  continentId: 'continentId',
  phonePrefix: 'phonePrefix'
};

exports.Prisma.RegionOrderByRelevanceFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  countryId: 'countryId'
};

exports.Prisma.BusinessRegistrationOrderByRelevanceFieldEnum = {
  id: 'id',
  number: 'number',
  issuingBody: 'issuingBody',
  merchantId: 'merchantId',
  brandId: 'brandId',
  storeId: 'storeId'
};

exports.Prisma.MerchantOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  phoneNumber: 'phoneNumber',
  genericEmail: 'genericEmail',
  invoiceEmail: 'invoiceEmail',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  addressLine3: 'addressLine3',
  city: 'city',
  postalCode: 'postalCode',
  regionId: 'regionId',
  countryId: 'countryId',
  timezone: 'timezone',
  logo: 'logo',
  website: 'website'
};

exports.Prisma.BrandOrderByRelevanceFieldEnum = {
  id: 'id',
  merchantId: 'merchantId',
  name: 'name',
  slug: 'slug',
  genericEmail: 'genericEmail',
  invoiceEmail: 'invoiceEmail',
  tradingAsName: 'tradingAsName',
  logo: 'logo',
  website: 'website',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  addressLine3: 'addressLine3',
  city: 'city',
  postalCode: 'postalCode',
  regionId: 'regionId',
  countryId: 'countryId',
  phoneNumber: 'phoneNumber',
  timezone: 'timezone'
};

exports.Prisma.StoreOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  brandId: 'brandId',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  addressLine3: 'addressLine3',
  city: 'city',
  regionId: 'regionId',
  postalCode: 'postalCode',
  countryId: 'countryId',
  formattedAddress: 'formattedAddress',
  phoneNumber: 'phoneNumber',
  timezone: 'timezone',
  currencyId: 'currencyId'
};

exports.Prisma.ReceiptOrderByRelevanceFieldEnum = {
  id: 'id',
  receiptNumber: 'receiptNumber',
  consumerId: 'consumerId',
  storeId: 'storeId',
  otherInformation: 'otherInformation',
  timezone: 'timezone'
};

exports.Prisma.ReceiptTaxOrderByRelevanceFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  taxName: 'taxName'
};

exports.Prisma.ReceiptPaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  terminal: 'terminal',
  reference: 'reference',
  cardNo: 'cardNo',
  authCode: 'authCode',
  paymentMethod: 'paymentMethod'
};

exports.Prisma.ReceiptItemOrderByRelevanceFieldEnum = {
  id: 'id',
  receiptId: 'receiptId',
  name: 'name',
  sku: 'sku',
  description: 'description',
  modelNumber: 'modelNumber',
  category: 'category'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  userId: 'userId',
  action: 'action',
  category: 'category',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId'
};

exports.Prisma.ImageOrderByRelevanceFieldEnum = {
  id: 'id',
  image: 'image',
  imageName: 'imageName',
  relatedEntity: 'relatedEntity',
  bucket: 'bucket'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  MERCHANT: 'MERCHANT',
  ADMIN: 'ADMIN'
};

exports.Status = exports.$Enums.Status = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  DISABLED: 'DISABLED',
  REJECTED: 'REJECTED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  NOTSAY: 'NOTSAY'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  ADMIN: 'ADMIN',
  MERCHANT: 'MERCHANT',
  BRAND: 'BRAND',
  STORE: 'STORE'
};

exports.Permission = exports.$Enums.Permission = {
  READ: 'READ',
  WRITE: 'WRITE',
  DELETE: 'DELETE',
  MANAGE_USERS: 'MANAGE_USERS',
  MANAGE_SETTINGS: 'MANAGE_SETTINGS',
  VIEW_REPORTS: 'VIEW_REPORTS',
  MANAGE_RECEIPTS: 'MANAGE_RECEIPTS'
};

exports.BusinessRegistrationType = exports.$Enums.BusinessRegistrationType = {
  COMPANY_NUMBER: 'COMPANY_NUMBER',
  TAX_ID: 'TAX_ID',
  VAT_NUMBER: 'VAT_NUMBER',
  BUSINESS_NUMBER: 'BUSINESS_NUMBER',
  ABN: 'ABN',
  ACN: 'ACN',
  GST_NUMBER: 'GST_NUMBER',
  TRADE_LICENSE: 'TRADE_LICENSE',
  NATIONAL_ID: 'NATIONAL_ID',
  OTHER: 'OTHER'
};

exports.TaxType = exports.$Enums.TaxType = {
  VAT: 'VAT',
  GST: 'GST',
  SALES_TAX: 'SALES_TAX',
  SERVICE_TAX: 'SERVICE_TAX',
  EXCISE_TAX: 'EXCISE_TAX',
  IMPORT_DUTY: 'IMPORT_DUTY',
  OTHER: 'OTHER'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CASH: 'CASH',
  CARD_CHIP: 'CARD_CHIP',
  CARD_CONTACTLESS: 'CARD_CONTACTLESS',
  CARD_SWIPE: 'CARD_SWIPE',
  MOBILE_PAYMENT: 'MOBILE_PAYMENT',
  BANK_TRANSFER: 'BANK_TRANSFER',
  DIGITAL_WALLET: 'DIGITAL_WALLET',
  VOUCHER: 'VOUCHER',
  GIFT_CARD: 'GIFT_CARD',
  OTHER: 'OTHER'
};

exports.ImageType = exports.$Enums.ImageType = {
  MERCHANT: 'MERCHANT',
  BRAND: 'BRAND',
  STORE: 'STORE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  EmailChangeRecord: 'EmailChangeRecord',
  PhoneChangeRecord: 'PhoneChangeRecord',
  RateLimit: 'RateLimit',
  Consumer: 'Consumer',
  BusinessUserAccess: 'BusinessUserAccess',
  Currency: 'Currency',
  Continent: 'Continent',
  Country: 'Country',
  Region: 'Region',
  BusinessRegistration: 'BusinessRegistration',
  Merchant: 'Merchant',
  Brand: 'Brand',
  Store: 'Store',
  Receipt: 'Receipt',
  ReceiptTax: 'ReceiptTax',
  ReceiptPayment: 'ReceiptPayment',
  ReceiptItem: 'ReceiptItem',
  AuditLog: 'AuditLog',
  Image: 'Image'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
