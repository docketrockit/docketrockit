datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum Status {
  DRAFT
  PENDING
  APPROVED
  DISABLED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOTSAY
}

enum Role {
  CONSUMER
  MERCHANT
  ADMIN
}

enum AdminRole {
  ADMIN
  SALES
  TECHNICAL
  ACCOUNTS
}

enum MerchantRole {
  ADMIN
  TECHNICAL
  ACCOUNTS
}

enum BrandRole {
  ADMIN
  TECHNICAL
  ACCOUNTS
}

model User {
  id                       String                     @id @default(cuid())
  firstName                String
  lastName                 String
  email                    String
  emailVerified            Boolean                    @default(false)
  emailVerifiedTime        DateTime?
  passwordVerified         Boolean                    @default(false)
  postcode                 String?
  city                     String?
  state                    State?                     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId                  String?
  phoneNumber              String?
  password                 String
  image                    String?
  role                     Role[]
  totpKey                  Bytes?
  recoveryCodes            String[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  status                   Status                     @default(APPROVED)
  consumerUser             Consumer?
  merchantUser             MerchantUser?
  adminUser                AdminUser?
  session                  Session[]
  emailVerificationRequest EmailVerificationRequest[]
  passwordResetSession     PasswordResetSession[]
  primaryContactMerchant   Merchant?
  primaryContactBrand      Brand[]

  @@unique([email])
}

model Session {
  id                String   @id @default(cuid())
  expiresAt         Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  ipAddress         String?
  userAgent         String?
  twoFactorVerified Boolean  @default(false)
  userId            String
  rememberMe        Boolean
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationRequest {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  expiresAt Int
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetSession {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  expiresAt Int
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Consumer {
  id          String    @id @default(cuid())
  barcode     String
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  gender      Gender?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Receipts    Receipt[]
}

model MerchantUser {
  id           String         @id @default(cuid())
  jobTitle     String
  merchant     Merchant       @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId   String
  merchantRole MerchantRole[]
  brandUsers   BrandUser[]
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model AdminUser {
  id        String      @id @default(cuid())
  jobTitle  String
  adminRole AdminRole[]
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model BrandUser {
  id             String        @id @default(cuid())
  brand          Brand         @relation(fields: [brandId], references: [id])
  brandId        String        @unique
  MerchantUser   MerchantUser? @relation(fields: [merchantUserId], references: [id])
  merchantUserId String?
  brandRole      BrandRole[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Currency {
  id           String  @id @default(cuid())
  name         String  @unique
  code         String  @unique
  demonym      String?
  majorSingle  String?
  majorPlural  String?
  ISOnum       Int?
  symbol       String?
  symbolNative String
  minorSingle  String?
  minorPlural  String?
  ISOdigits    Int?
  decimals     Int?
  numToBasic   Int?
  Store        Store[]
}

model Country {
  id        String     @id @default(cuid())
  isoCode   String
  name      String
  currency  String
  states    State[]
  Merchants Merchant[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  store     Store[]
  brand     Brand[]
}

model State {
  id        String     @id @default(cuid())
  isoCode   String
  name      String
  country   Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId String
  merchants Merchant[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  brands    Brand[]
  users     User[]
}

model Merchant {
  id               String         @id @default(cuid())
  name             String
  slug             String         @unique
  status           Status         @default(PENDING)
  phoneNumber      String
  genericEmail     String
  invoiceEmail     String?
  address1         String
  address2         String?
  suburb           String
  postcode         String
  state            State          @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId          String
  country          Country        @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId        String
  abn              String
  acn              String
  logoUrl          String?
  primaryContact   User?          @relation(fields: [primaryContactId], references: [id]) // references `id` of `Profile`
  primaryContactId String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  brands           Brand[]
  merchantUser     MerchantUser[]
}

model Brand {
  id               String     @id @default(cuid())
  status           Status     @default(PENDING)
  merchant         Merchant   @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId       String
  name             String
  slug             String     @unique
  genericEmail     String
  invoiceEmail     String?
  tradingAsName    String
  logoUrl          String
  address1         String
  address2         String?
  suburb           String
  postcode         String
  state            State      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId          String
  country          Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId        String
  abn              String?
  acn              String?
  phoneNumber      String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  primaryContact   User?      @relation(fields: [primaryContactId], references: [id]) // references `id` of `Profile`
  primaryContactId String?    @unique
  stores           Store[]
  BrandUser        BrandUser?
}

model Store {
  id               String    @id @default(cuid())
  name             String
  slug             String    @unique
  status           Status    @default(PENDING)
  brand            Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId          String
  address1         String
  address2         String?
  city             String
  region           String
  postalCode       String
  country          Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId        String
  formattedAddress String
  latitude         Float
  longitude        Float
  abn              String?
  acn              String?
  phoneNumber      String
  currency         Currency  @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId       String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  receipts         Receipt[]
}

model Receipt {
  id               String        @id @default(cuid())
  consumer         Consumer      @relation(fields: [consumerId], references: [id], onDelete: Cascade)
  consumerId       String
  store            Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId          String
  subTotal         Float
  tax              Float
  cardSurcharge    Float
  otherInformation String[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  receiptItems     ReceiptItem[]
}

model ReceiptItem {
  id          String  @id @default(cuid())
  receipt     Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  receiptId   String
  name        String
  sku         String?
  description String?
  modelNumber String?
  quantity    Int
  itemCost    Float
  itemTax     Float
  subTotal    Float
  tax         Float
}
